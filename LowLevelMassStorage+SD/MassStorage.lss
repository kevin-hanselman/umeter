
MassStorage.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000008a  00800100  00006c6e  00006d02  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00006c6e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000362  0080018a  0080018a  00006d8c  2**0
                  ALLOC
  3 .stab         000043c8  00000000  00000000  00006d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0000121b  00000000  00000000  0000b154  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000510  00000000  00000000  0000c36f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000c0c  00000000  00000000  0000c87f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00006645  00000000  00000000  0000d48b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 000018e6  00000000  00000000  00013ad0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00005de1  00000000  00000000  000153b6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000820  00000000  00000000  0001b198  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000250c  00000000  00000000  0001b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00005671  00000000  00000000  0001dec4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000b02  00000000  00000000  00023535  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000006a0  00000000  00000000  00024037  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
#endif

uint8_t Endpoint_BytesToEPSizeMaskDynamic(const uint16_t Size)
{
	return Endpoint_BytesToEPSizeMask(Size);
}
       0:	3a c1       	rjmp	.+628    	; 0x276 <__ctors_end>
       2:	00 00       	nop
       4:	54 c1       	rjmp	.+680    	; 0x2ae <__bad_interrupt>
       6:	00 00       	nop
       8:	52 c1       	rjmp	.+676    	; 0x2ae <__bad_interrupt>
       a:	00 00       	nop
       c:	50 c1       	rjmp	.+672    	; 0x2ae <__bad_interrupt>
       e:	00 00       	nop
      10:	4e c1       	rjmp	.+668    	; 0x2ae <__bad_interrupt>
      12:	00 00       	nop
      14:	4c c1       	rjmp	.+664    	; 0x2ae <__bad_interrupt>
      16:	00 00       	nop
      18:	4a c1       	rjmp	.+660    	; 0x2ae <__bad_interrupt>
      1a:	00 00       	nop
      1c:	48 c1       	rjmp	.+656    	; 0x2ae <__bad_interrupt>
      1e:	00 00       	nop
      20:	46 c1       	rjmp	.+652    	; 0x2ae <__bad_interrupt>
      22:	00 00       	nop
      24:	44 c1       	rjmp	.+648    	; 0x2ae <__bad_interrupt>
      26:	00 00       	nop
      28:	0c 94 51 2f 	jmp	0x5ea2	; 0x5ea2 <__vector_10>
      2c:	0c 94 17 30 	jmp	0x602e	; 0x602e <__vector_11>
      30:	3e c1       	rjmp	.+636    	; 0x2ae <__bad_interrupt>
      32:	00 00       	nop
      34:	3c c1       	rjmp	.+632    	; 0x2ae <__bad_interrupt>
      36:	00 00       	nop
      38:	3a c1       	rjmp	.+628    	; 0x2ae <__bad_interrupt>
      3a:	00 00       	nop
      3c:	38 c1       	rjmp	.+624    	; 0x2ae <__bad_interrupt>
      3e:	00 00       	nop
      40:	36 c1       	rjmp	.+620    	; 0x2ae <__bad_interrupt>
      42:	00 00       	nop
      44:	34 c1       	rjmp	.+616    	; 0x2ae <__bad_interrupt>
      46:	00 00       	nop
      48:	32 c1       	rjmp	.+612    	; 0x2ae <__bad_interrupt>
      4a:	00 00       	nop
      4c:	30 c1       	rjmp	.+608    	; 0x2ae <__bad_interrupt>
      4e:	00 00       	nop
      50:	2e c1       	rjmp	.+604    	; 0x2ae <__bad_interrupt>
      52:	00 00       	nop
      54:	2c c1       	rjmp	.+600    	; 0x2ae <__bad_interrupt>
      56:	00 00       	nop
      58:	2a c1       	rjmp	.+596    	; 0x2ae <__bad_interrupt>
      5a:	00 00       	nop
      5c:	28 c1       	rjmp	.+592    	; 0x2ae <__bad_interrupt>
      5e:	00 00       	nop
      60:	26 c1       	rjmp	.+588    	; 0x2ae <__bad_interrupt>
      62:	00 00       	nop
      64:	24 c1       	rjmp	.+584    	; 0x2ae <__bad_interrupt>
      66:	00 00       	nop
      68:	22 c1       	rjmp	.+580    	; 0x2ae <__bad_interrupt>
      6a:	00 00       	nop
      6c:	20 c1       	rjmp	.+576    	; 0x2ae <__bad_interrupt>
      6e:	00 00       	nop
      70:	1e c1       	rjmp	.+572    	; 0x2ae <__bad_interrupt>
      72:	00 00       	nop
      74:	1c c1       	rjmp	.+568    	; 0x2ae <__bad_interrupt>
      76:	00 00       	nop
      78:	1a c1       	rjmp	.+564    	; 0x2ae <__bad_interrupt>
      7a:	00 00       	nop
      7c:	18 c1       	rjmp	.+560    	; 0x2ae <__bad_interrupt>
      7e:	00 00       	nop
      80:	16 c1       	rjmp	.+556    	; 0x2ae <__bad_interrupt>
      82:	00 00       	nop
      84:	14 c1       	rjmp	.+552    	; 0x2ae <__bad_interrupt>
      86:	00 00       	nop
      88:	12 c1       	rjmp	.+548    	; 0x2ae <__bad_interrupt>
      8a:	00 00       	nop
      8c:	10 c1       	rjmp	.+544    	; 0x2ae <__bad_interrupt>
      8e:	00 00       	nop
      90:	0e c1       	rjmp	.+540    	; 0x2ae <__bad_interrupt>
      92:	00 00       	nop
      94:	0c c1       	rjmp	.+536    	; 0x2ae <__bad_interrupt>
      96:	00 00       	nop
      98:	0a c1       	rjmp	.+532    	; 0x2ae <__bad_interrupt>
      9a:	00 00       	nop
      9c:	08 c1       	rjmp	.+528    	; 0x2ae <__bad_interrupt>
      9e:	00 00       	nop
      a0:	06 c1       	rjmp	.+524    	; 0x2ae <__bad_interrupt>
      a2:	00 00       	nop
      a4:	04 c1       	rjmp	.+520    	; 0x2ae <__bad_interrupt>
      a6:	00 00       	nop
      a8:	02 c1       	rjmp	.+516    	; 0x2ae <__bad_interrupt>
      aa:	00 00       	nop

000000ac <__c.2452>:
      ac:	45 6e 74 65 72 69 6e 67 20 44 61 74 61 20 4c 6f     Entering Data Lo
      bc:	67 67 65 72 20 4d 6f 64 65 0d 0a 00                 gger Mode...

000000c8 <__c.2450>:
      c8:	45 6e 74 65 72 69 6e 67 20 4d 61 73 73 20 53 74     Entering Mass St
      d8:	6f 72 61 67 65 20 4d 6f 64 65 0d 0a 00              orage Mode...

000000e5 <DeviceDescriptor>:
      e5:	12 01 10 01 00 00 00 08 eb 03 45 20 00 00 01 02     ..........E ....
      f5:	00 01                                               ..

000000f7 <ConfigurationDescriptor>:
      f7:	09 02 20 00 01 01 00 80 32 09 04 00 00 02 08 06     .. .....2.......
     107:	50 00 07 05 83 02 40 00 00 07 05 04 02 40 00 00     P.....@......@..

00000117 <LanguageString>:
     117:	04 03 09 04                                         ....

0000011b <ManufacturerString>:
     11b:	18 03 44 00 65 00 61 00 6e 00 20 00 43 00 61 00     ..D.e.a.n. .C.a.
     12b:	6d 00 65 00 72 00 61 00 00 00                       m.e.r.a...

00000135 <ProductString>:
     135:	2e 03 4c 00 55 00 46 00 41 00 20 00 4d 00 61 00     ..L.U.F.A. .M.a.
     145:	73 00 73 00 20 00 53 00 74 00 6f 00 72 00 61 00     s.s. .S.t.o.r.a.
     155:	67 00 65 00 20 00 44 00 65 00 6d 00 6f 00 00 00     g.e. .D.e.m.o...

00000165 <__c.2731>:
     165:	52 20 25 6c 69 20 25 69 0d 0a 00                    R %li %i...

00000170 <__c.2712>:
     170:	57 20 25 6c 69 20 25 69 0d 0a 00                    W %li %i...

0000017b <__c.2699>:
     17b:	45 72 72 6f 72 20 72 65 61 64 69 6e 67 20 53 44     Error reading SD
     18b:	20 63 61 72 64 20 69 6e 66 6f 0d 0a 00               card info...

00000198 <__c.2678>:
     198:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     1a8:	20 66 69 6c 65 0d 0a 00                              file...

000001b0 <__c.2673>:
     1b0:	65 72 72 6f 72 20 77 72 69 74 69 6e 67 20 74 6f     error writing to
     1c0:	20 66 69 6c 65 0d 0a 00                              file...

000001c8 <__c.2668>:
     1c8:	65 72 72 6f 72 20 6f 70 65 6e 69 6e 67 20 66 69     error opening fi
     1d8:	6c 65 0d 0a 00                                      le...

000001dd <__c.2665>:
     1dd:	77 72 69 74 69 6e 67 2e 2e 2e 0d 0a 00              writing......

000001ea <__c.2655>:
     1ea:	65 72 72 6f 72 20 63 72 65 61 74 69 6e 67 20 66     error creating f
     1fa:	69 6c 65 0d 0a 00                                   ile...

00000200 <__c.2649>:
     200:	6f 70 65 6e 69 6e 67 20 72 6f 6f 74 20 64 69 72     opening root dir
     210:	65 63 74 6f 72 79 20 66 61 69 6c 65 64 0d 0a 00     ectory failed...

00000220 <__c.2646>:
     220:	6f 70 65 6e 69 6e 67 20 66 69 6c 65 73 79 73 74     opening filesyst
     230:	65 6d 20 66 61 69 6c 65 64 0d 0a 00                 em failed...

0000023c <__c.2644>:
     23c:	6f 70 65 6e 69 6e 67 20 70 61 72 74 69 74 69 6f     opening partitio
     24c:	6e 20 66 61 69 6c 65 64 0d 0a 00                    n failed...

00000257 <__c.2638>:
     257:	4d 4d 43 2f 53 44 20 69 6e 69 74 69 61 6c 69 7a     MMC/SD initializ
     267:	61 74 69 6f 6e 20 66 61 69 6c 65 64 0d 0a 00        ation failed...

00000276 <__ctors_end>:
     276:	11 24       	eor	r1, r1
     278:	1f be       	out	0x3f, r1	; 63
     27a:	cf ef       	ldi	r28, 0xFF	; 255
     27c:	da e0       	ldi	r29, 0x0A	; 10
     27e:	de bf       	out	0x3e, r29	; 62
     280:	cd bf       	out	0x3d, r28	; 61

00000282 <__do_copy_data>:
     282:	11 e0       	ldi	r17, 0x01	; 1
     284:	a0 e0       	ldi	r26, 0x00	; 0
     286:	b1 e0       	ldi	r27, 0x01	; 1
     288:	ee e6       	ldi	r30, 0x6E	; 110
     28a:	fc e6       	ldi	r31, 0x6C	; 108
     28c:	02 c0       	rjmp	.+4      	; 0x292 <__do_copy_data+0x10>
     28e:	05 90       	lpm	r0, Z+
     290:	0d 92       	st	X+, r0
     292:	aa 38       	cpi	r26, 0x8A	; 138
     294:	b1 07       	cpc	r27, r17
     296:	d9 f7       	brne	.-10     	; 0x28e <__do_copy_data+0xc>

00000298 <__do_clear_bss>:
     298:	14 e0       	ldi	r17, 0x04	; 4
     29a:	aa e8       	ldi	r26, 0x8A	; 138
     29c:	b1 e0       	ldi	r27, 0x01	; 1
     29e:	01 c0       	rjmp	.+2      	; 0x2a2 <.do_clear_bss_start>

000002a0 <.do_clear_bss_loop>:
     2a0:	1d 92       	st	X+, r1

000002a2 <.do_clear_bss_start>:
     2a2:	ac 3e       	cpi	r26, 0xEC	; 236
     2a4:	b1 07       	cpc	r27, r17
     2a6:	e1 f7       	brne	.-8      	; 0x2a0 <.do_clear_bss_loop>
     2a8:	17 d3       	rcall	.+1582   	; 0x8d8 <main>
     2aa:	0c 94 35 36 	jmp	0x6c6a	; 0x6c6a <_exit>

000002ae <__bad_interrupt>:
     2ae:	a8 ce       	rjmp	.-688    	; 0x0 <__vectors>

000002b0 <__muldi3>:
     2b0:	ac e2       	ldi	r26, 0x2C	; 44
     2b2:	b0 e0       	ldi	r27, 0x00	; 0
     2b4:	ee e5       	ldi	r30, 0x5E	; 94
     2b6:	f1 e0       	ldi	r31, 0x01	; 1
     2b8:	0c 94 b4 32 	jmp	0x6568	; 0x6568 <__prologue_saves__>
     2bc:	29 83       	std	Y+1, r18	; 0x01
     2be:	3a 83       	std	Y+2, r19	; 0x02
     2c0:	4b 83       	std	Y+3, r20	; 0x03
     2c2:	5c 83       	std	Y+4, r21	; 0x04
     2c4:	6d 83       	std	Y+5, r22	; 0x05
     2c6:	7e 83       	std	Y+6, r23	; 0x06
     2c8:	8f 83       	std	Y+7, r24	; 0x07
     2ca:	98 87       	std	Y+8, r25	; 0x08
     2cc:	a9 86       	std	Y+9, r10	; 0x09
     2ce:	ba 86       	std	Y+10, r11	; 0x0a
     2d0:	cb 86       	std	Y+11, r12	; 0x0b
     2d2:	dc 86       	std	Y+12, r13	; 0x0c
     2d4:	ed 86       	std	Y+13, r14	; 0x0d
     2d6:	fe 86       	std	Y+14, r15	; 0x0e
     2d8:	0f 87       	std	Y+15, r16	; 0x0f
     2da:	18 8b       	std	Y+16, r17	; 0x10
     2dc:	69 80       	ldd	r6, Y+1	; 0x01
     2de:	7a 80       	ldd	r7, Y+2	; 0x02
     2e0:	8b 80       	ldd	r8, Y+3	; 0x03
     2e2:	9c 80       	ldd	r9, Y+4	; 0x04
     2e4:	69 a2       	std	Y+33, r6	; 0x21
     2e6:	7a a2       	std	Y+34, r7	; 0x22
     2e8:	8b a2       	std	Y+35, r8	; 0x23
     2ea:	9c a2       	std	Y+36, r9	; 0x24
     2ec:	84 01       	movw	r16, r8
     2ee:	73 01       	movw	r14, r6
     2f0:	8f ef       	ldi	r24, 0xFF	; 255
     2f2:	9f ef       	ldi	r25, 0xFF	; 255
     2f4:	a0 e0       	ldi	r26, 0x00	; 0
     2f6:	b0 e0       	ldi	r27, 0x00	; 0
     2f8:	e8 22       	and	r14, r24
     2fa:	f9 22       	and	r15, r25
     2fc:	0a 23       	and	r16, r26
     2fe:	1b 23       	and	r17, r27
     300:	14 01       	movw	r2, r8
     302:	44 24       	eor	r4, r4
     304:	55 24       	eor	r5, r5
     306:	69 84       	ldd	r6, Y+9	; 0x09
     308:	7a 84       	ldd	r7, Y+10	; 0x0a
     30a:	8b 84       	ldd	r8, Y+11	; 0x0b
     30c:	9c 84       	ldd	r9, Y+12	; 0x0c
     30e:	6d a2       	std	Y+37, r6	; 0x25
     310:	7e a2       	std	Y+38, r7	; 0x26
     312:	8f a2       	std	Y+39, r8	; 0x27
     314:	98 a6       	std	Y+40, r9	; 0x28
     316:	64 01       	movw	r12, r8
     318:	53 01       	movw	r10, r6
     31a:	a8 22       	and	r10, r24
     31c:	b9 22       	and	r11, r25
     31e:	ca 22       	and	r12, r26
     320:	db 22       	and	r13, r27
     322:	34 01       	movw	r6, r8
     324:	88 24       	eor	r8, r8
     326:	99 24       	eor	r9, r9
     328:	c6 01       	movw	r24, r12
     32a:	b5 01       	movw	r22, r10
     32c:	a8 01       	movw	r20, r16
     32e:	97 01       	movw	r18, r14
     330:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
     334:	69 a7       	std	Y+41, r22	; 0x29
     336:	7a a7       	std	Y+42, r23	; 0x2a
     338:	8b a7       	std	Y+43, r24	; 0x2b
     33a:	9c a7       	std	Y+44, r25	; 0x2c
     33c:	c4 01       	movw	r24, r8
     33e:	b3 01       	movw	r22, r6
     340:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
     344:	7b 01       	movw	r14, r22
     346:	8c 01       	movw	r16, r24
     348:	c6 01       	movw	r24, r12
     34a:	b5 01       	movw	r22, r10
     34c:	a2 01       	movw	r20, r4
     34e:	91 01       	movw	r18, r2
     350:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
     354:	5b 01       	movw	r10, r22
     356:	6c 01       	movw	r12, r24
     358:	c4 01       	movw	r24, r8
     35a:	b3 01       	movw	r22, r6
     35c:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
     360:	9b 01       	movw	r18, r22
     362:	ac 01       	movw	r20, r24
     364:	ea 0c       	add	r14, r10
     366:	fb 1c       	adc	r15, r11
     368:	0c 1d       	adc	r16, r12
     36a:	1d 1d       	adc	r17, r13
     36c:	69 a4       	ldd	r6, Y+41	; 0x29
     36e:	7a a4       	ldd	r7, Y+42	; 0x2a
     370:	8b a4       	ldd	r8, Y+43	; 0x2b
     372:	9c a4       	ldd	r9, Y+44	; 0x2c
     374:	c4 01       	movw	r24, r8
     376:	aa 27       	eor	r26, r26
     378:	bb 27       	eor	r27, r27
     37a:	e8 0e       	add	r14, r24
     37c:	f9 1e       	adc	r15, r25
     37e:	0a 1f       	adc	r16, r26
     380:	1b 1f       	adc	r17, r27
     382:	ea 14       	cp	r14, r10
     384:	fb 04       	cpc	r15, r11
     386:	0c 05       	cpc	r16, r12
     388:	1d 05       	cpc	r17, r13
     38a:	20 f4       	brcc	.+8      	; 0x394 <__muldi3+0xe4>
     38c:	20 50       	subi	r18, 0x00	; 0
     38e:	30 40       	sbci	r19, 0x00	; 0
     390:	4f 4f       	sbci	r20, 0xFF	; 255
     392:	5f 4f       	sbci	r21, 0xFF	; 255
     394:	c8 01       	movw	r24, r16
     396:	aa 27       	eor	r26, r26
     398:	bb 27       	eor	r27, r27
     39a:	82 0f       	add	r24, r18
     39c:	93 1f       	adc	r25, r19
     39e:	a4 1f       	adc	r26, r20
     3a0:	b5 1f       	adc	r27, r21
     3a2:	8d 8f       	std	Y+29, r24	; 0x1d
     3a4:	9e 8f       	std	Y+30, r25	; 0x1e
     3a6:	af 8f       	std	Y+31, r26	; 0x1f
     3a8:	b8 a3       	std	Y+32, r27	; 0x20
     3aa:	87 01       	movw	r16, r14
     3ac:	ff 24       	eor	r15, r15
     3ae:	ee 24       	eor	r14, r14
     3b0:	29 a5       	ldd	r18, Y+41	; 0x29
     3b2:	3a a5       	ldd	r19, Y+42	; 0x2a
     3b4:	4b a5       	ldd	r20, Y+43	; 0x2b
     3b6:	5c a5       	ldd	r21, Y+44	; 0x2c
     3b8:	40 70       	andi	r20, 0x00	; 0
     3ba:	50 70       	andi	r21, 0x00	; 0
     3bc:	e2 0e       	add	r14, r18
     3be:	f3 1e       	adc	r15, r19
     3c0:	04 1f       	adc	r16, r20
     3c2:	15 1f       	adc	r17, r21
     3c4:	e9 8e       	std	Y+25, r14	; 0x19
     3c6:	fa 8e       	std	Y+26, r15	; 0x1a
     3c8:	0b 8f       	std	Y+27, r16	; 0x1b
     3ca:	1c 8f       	std	Y+28, r17	; 0x1c
     3cc:	de 2c       	mov	r13, r14
     3ce:	aa 8c       	ldd	r10, Y+26	; 0x1a
     3d0:	cb 8c       	ldd	r12, Y+27	; 0x1b
     3d2:	6c 8c       	ldd	r6, Y+28	; 0x1c
     3d4:	8d 8b       	std	Y+21, r24	; 0x15
     3d6:	8e 8d       	ldd	r24, Y+30	; 0x1e
     3d8:	8e 8b       	std	Y+22, r24	; 0x16
     3da:	8f 8d       	ldd	r24, Y+31	; 0x1f
     3dc:	8f 8b       	std	Y+23, r24	; 0x17
     3de:	88 a1       	ldd	r24, Y+32	; 0x20
     3e0:	88 8f       	std	Y+24, r24	; 0x18
     3e2:	2d 85       	ldd	r18, Y+13	; 0x0d
     3e4:	3e 85       	ldd	r19, Y+14	; 0x0e
     3e6:	4f 85       	ldd	r20, Y+15	; 0x0f
     3e8:	58 89       	ldd	r21, Y+16	; 0x10
     3ea:	69 a1       	ldd	r22, Y+33	; 0x21
     3ec:	7a a1       	ldd	r23, Y+34	; 0x22
     3ee:	8b a1       	ldd	r24, Y+35	; 0x23
     3f0:	9c a1       	ldd	r25, Y+36	; 0x24
     3f2:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
     3f6:	7b 01       	movw	r14, r22
     3f8:	8c 01       	movw	r16, r24
     3fa:	2d 81       	ldd	r18, Y+5	; 0x05
     3fc:	3e 81       	ldd	r19, Y+6	; 0x06
     3fe:	4f 81       	ldd	r20, Y+7	; 0x07
     400:	58 85       	ldd	r21, Y+8	; 0x08
     402:	6d a1       	ldd	r22, Y+37	; 0x25
     404:	7e a1       	ldd	r23, Y+38	; 0x26
     406:	8f a1       	ldd	r24, Y+39	; 0x27
     408:	98 a5       	ldd	r25, Y+40	; 0x28
     40a:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
     40e:	e6 0e       	add	r14, r22
     410:	f7 1e       	adc	r15, r23
     412:	08 1f       	adc	r16, r24
     414:	19 1f       	adc	r17, r25
     416:	6d 89       	ldd	r22, Y+21	; 0x15
     418:	7e 89       	ldd	r23, Y+22	; 0x16
     41a:	8f 89       	ldd	r24, Y+23	; 0x17
     41c:	98 8d       	ldd	r25, Y+24	; 0x18
     41e:	6e 0d       	add	r22, r14
     420:	7f 1d       	adc	r23, r15
     422:	80 1f       	adc	r24, r16
     424:	91 1f       	adc	r25, r17
     426:	6d 8b       	std	Y+21, r22	; 0x15
     428:	7e 8b       	std	Y+22, r23	; 0x16
     42a:	8f 8b       	std	Y+23, r24	; 0x17
     42c:	98 8f       	std	Y+24, r25	; 0x18
     42e:	7e 89       	ldd	r23, Y+22	; 0x16
     430:	2d 2d       	mov	r18, r13
     432:	3a 2d       	mov	r19, r10
     434:	4c 2d       	mov	r20, r12
     436:	56 2d       	mov	r21, r6
     438:	8f 89       	ldd	r24, Y+23	; 0x17
     43a:	98 8d       	ldd	r25, Y+24	; 0x18
     43c:	ac 96       	adiw	r28, 0x2c	; 44
     43e:	e2 e1       	ldi	r30, 0x12	; 18
     440:	0c 94 d0 32 	jmp	0x65a0	; 0x65a0 <__epilogue_restores__>

00000444 <__lshrdi3>:
     444:	0f 93       	push	r16
     446:	df 93       	push	r29
     448:	cf 93       	push	r28
     44a:	cd b7       	in	r28, 0x3d	; 61
     44c:	de b7       	in	r29, 0x3e	; 62
     44e:	60 97       	sbiw	r28, 0x10	; 16
     450:	0f b6       	in	r0, 0x3f	; 63
     452:	f8 94       	cli
     454:	de bf       	out	0x3e, r29	; 62
     456:	0f be       	out	0x3f, r0	; 63
     458:	cd bf       	out	0x3d, r28	; 61
     45a:	00 23       	and	r16, r16
     45c:	09 f4       	brne	.+2      	; 0x460 <__lshrdi3+0x1c>
     45e:	59 c0       	rjmp	.+178    	; 0x512 <__lshrdi3+0xce>
     460:	29 83       	std	Y+1, r18	; 0x01
     462:	3a 83       	std	Y+2, r19	; 0x02
     464:	4b 83       	std	Y+3, r20	; 0x03
     466:	5c 83       	std	Y+4, r21	; 0x04
     468:	6d 83       	std	Y+5, r22	; 0x05
     46a:	7e 83       	std	Y+6, r23	; 0x06
     46c:	8f 83       	std	Y+7, r24	; 0x07
     46e:	98 87       	std	Y+8, r25	; 0x08
     470:	e0 e2       	ldi	r30, 0x20	; 32
     472:	e0 1b       	sub	r30, r16
     474:	2d 81       	ldd	r18, Y+5	; 0x05
     476:	3e 81       	ldd	r19, Y+6	; 0x06
     478:	4f 81       	ldd	r20, Y+7	; 0x07
     47a:	58 85       	ldd	r21, Y+8	; 0x08
     47c:	1e 16       	cp	r1, r30
     47e:	bc f0       	brlt	.+46     	; 0x4ae <__lshrdi3+0x6a>
     480:	1d 86       	std	Y+13, r1	; 0x0d
     482:	1e 86       	std	Y+14, r1	; 0x0e
     484:	1f 86       	std	Y+15, r1	; 0x0f
     486:	18 8a       	std	Y+16, r1	; 0x10
     488:	8e 2f       	mov	r24, r30
     48a:	99 27       	eor	r25, r25
     48c:	87 fd       	sbrc	r24, 7
     48e:	90 95       	com	r25
     490:	90 95       	com	r25
     492:	81 95       	neg	r24
     494:	9f 4f       	sbci	r25, 0xFF	; 255
     496:	04 c0       	rjmp	.+8      	; 0x4a0 <__lshrdi3+0x5c>
     498:	56 95       	lsr	r21
     49a:	47 95       	ror	r20
     49c:	37 95       	ror	r19
     49e:	27 95       	ror	r18
     4a0:	8a 95       	dec	r24
     4a2:	d2 f7       	brpl	.-12     	; 0x498 <__lshrdi3+0x54>
     4a4:	29 87       	std	Y+9, r18	; 0x09
     4a6:	3a 87       	std	Y+10, r19	; 0x0a
     4a8:	4b 87       	std	Y+11, r20	; 0x0b
     4aa:	5c 87       	std	Y+12, r21	; 0x0c
     4ac:	2a c0       	rjmp	.+84     	; 0x502 <__lshrdi3+0xbe>
     4ae:	ca 01       	movw	r24, r20
     4b0:	b9 01       	movw	r22, r18
     4b2:	00 2e       	mov	r0, r16
     4b4:	04 c0       	rjmp	.+8      	; 0x4be <__lshrdi3+0x7a>
     4b6:	96 95       	lsr	r25
     4b8:	87 95       	ror	r24
     4ba:	77 95       	ror	r23
     4bc:	67 95       	ror	r22
     4be:	0a 94       	dec	r0
     4c0:	d2 f7       	brpl	.-12     	; 0x4b6 <__lshrdi3+0x72>
     4c2:	6d 87       	std	Y+13, r22	; 0x0d
     4c4:	7e 87       	std	Y+14, r23	; 0x0e
     4c6:	8f 87       	std	Y+15, r24	; 0x0f
     4c8:	98 8b       	std	Y+16, r25	; 0x10
     4ca:	da 01       	movw	r26, r20
     4cc:	c9 01       	movw	r24, r18
     4ce:	04 c0       	rjmp	.+8      	; 0x4d8 <__lshrdi3+0x94>
     4d0:	88 0f       	add	r24, r24
     4d2:	99 1f       	adc	r25, r25
     4d4:	aa 1f       	adc	r26, r26
     4d6:	bb 1f       	adc	r27, r27
     4d8:	ea 95       	dec	r30
     4da:	d2 f7       	brpl	.-12     	; 0x4d0 <__lshrdi3+0x8c>
     4dc:	29 81       	ldd	r18, Y+1	; 0x01
     4de:	3a 81       	ldd	r19, Y+2	; 0x02
     4e0:	4b 81       	ldd	r20, Y+3	; 0x03
     4e2:	5c 81       	ldd	r21, Y+4	; 0x04
     4e4:	04 c0       	rjmp	.+8      	; 0x4ee <__lshrdi3+0xaa>
     4e6:	56 95       	lsr	r21
     4e8:	47 95       	ror	r20
     4ea:	37 95       	ror	r19
     4ec:	27 95       	ror	r18
     4ee:	0a 95       	dec	r16
     4f0:	d2 f7       	brpl	.-12     	; 0x4e6 <__lshrdi3+0xa2>
     4f2:	82 2b       	or	r24, r18
     4f4:	93 2b       	or	r25, r19
     4f6:	a4 2b       	or	r26, r20
     4f8:	b5 2b       	or	r27, r21
     4fa:	89 87       	std	Y+9, r24	; 0x09
     4fc:	9a 87       	std	Y+10, r25	; 0x0a
     4fe:	ab 87       	std	Y+11, r26	; 0x0b
     500:	bc 87       	std	Y+12, r27	; 0x0c
     502:	29 85       	ldd	r18, Y+9	; 0x09
     504:	3a 85       	ldd	r19, Y+10	; 0x0a
     506:	4b 85       	ldd	r20, Y+11	; 0x0b
     508:	5c 85       	ldd	r21, Y+12	; 0x0c
     50a:	6d 85       	ldd	r22, Y+13	; 0x0d
     50c:	7e 85       	ldd	r23, Y+14	; 0x0e
     50e:	8f 85       	ldd	r24, Y+15	; 0x0f
     510:	98 89       	ldd	r25, Y+16	; 0x10
     512:	60 96       	adiw	r28, 0x10	; 16
     514:	0f b6       	in	r0, 0x3f	; 63
     516:	f8 94       	cli
     518:	de bf       	out	0x3e, r29	; 62
     51a:	0f be       	out	0x3f, r0	; 63
     51c:	cd bf       	out	0x3d, r28	; 61
     51e:	cf 91       	pop	r28
     520:	df 91       	pop	r29
     522:	0f 91       	pop	r16
     524:	08 95       	ret

00000526 <__ashldi3>:
     526:	0f 93       	push	r16
     528:	df 93       	push	r29
     52a:	cf 93       	push	r28
     52c:	cd b7       	in	r28, 0x3d	; 61
     52e:	de b7       	in	r29, 0x3e	; 62
     530:	60 97       	sbiw	r28, 0x10	; 16
     532:	0f b6       	in	r0, 0x3f	; 63
     534:	f8 94       	cli
     536:	de bf       	out	0x3e, r29	; 62
     538:	0f be       	out	0x3f, r0	; 63
     53a:	cd bf       	out	0x3d, r28	; 61
     53c:	00 23       	and	r16, r16
     53e:	09 f4       	brne	.+2      	; 0x542 <__ashldi3+0x1c>
     540:	59 c0       	rjmp	.+178    	; 0x5f4 <__ashldi3+0xce>
     542:	29 83       	std	Y+1, r18	; 0x01
     544:	3a 83       	std	Y+2, r19	; 0x02
     546:	4b 83       	std	Y+3, r20	; 0x03
     548:	5c 83       	std	Y+4, r21	; 0x04
     54a:	6d 83       	std	Y+5, r22	; 0x05
     54c:	7e 83       	std	Y+6, r23	; 0x06
     54e:	8f 83       	std	Y+7, r24	; 0x07
     550:	98 87       	std	Y+8, r25	; 0x08
     552:	e0 e2       	ldi	r30, 0x20	; 32
     554:	e0 1b       	sub	r30, r16
     556:	29 81       	ldd	r18, Y+1	; 0x01
     558:	3a 81       	ldd	r19, Y+2	; 0x02
     55a:	4b 81       	ldd	r20, Y+3	; 0x03
     55c:	5c 81       	ldd	r21, Y+4	; 0x04
     55e:	1e 16       	cp	r1, r30
     560:	bc f0       	brlt	.+46     	; 0x590 <__ashldi3+0x6a>
     562:	19 86       	std	Y+9, r1	; 0x09
     564:	1a 86       	std	Y+10, r1	; 0x0a
     566:	1b 86       	std	Y+11, r1	; 0x0b
     568:	1c 86       	std	Y+12, r1	; 0x0c
     56a:	8e 2f       	mov	r24, r30
     56c:	99 27       	eor	r25, r25
     56e:	87 fd       	sbrc	r24, 7
     570:	90 95       	com	r25
     572:	90 95       	com	r25
     574:	81 95       	neg	r24
     576:	9f 4f       	sbci	r25, 0xFF	; 255
     578:	04 c0       	rjmp	.+8      	; 0x582 <__ashldi3+0x5c>
     57a:	22 0f       	add	r18, r18
     57c:	33 1f       	adc	r19, r19
     57e:	44 1f       	adc	r20, r20
     580:	55 1f       	adc	r21, r21
     582:	8a 95       	dec	r24
     584:	d2 f7       	brpl	.-12     	; 0x57a <__ashldi3+0x54>
     586:	2d 87       	std	Y+13, r18	; 0x0d
     588:	3e 87       	std	Y+14, r19	; 0x0e
     58a:	4f 87       	std	Y+15, r20	; 0x0f
     58c:	58 8b       	std	Y+16, r21	; 0x10
     58e:	2a c0       	rjmp	.+84     	; 0x5e4 <__ashldi3+0xbe>
     590:	ca 01       	movw	r24, r20
     592:	b9 01       	movw	r22, r18
     594:	00 2e       	mov	r0, r16
     596:	04 c0       	rjmp	.+8      	; 0x5a0 <__ashldi3+0x7a>
     598:	66 0f       	add	r22, r22
     59a:	77 1f       	adc	r23, r23
     59c:	88 1f       	adc	r24, r24
     59e:	99 1f       	adc	r25, r25
     5a0:	0a 94       	dec	r0
     5a2:	d2 f7       	brpl	.-12     	; 0x598 <__ashldi3+0x72>
     5a4:	69 87       	std	Y+9, r22	; 0x09
     5a6:	7a 87       	std	Y+10, r23	; 0x0a
     5a8:	8b 87       	std	Y+11, r24	; 0x0b
     5aa:	9c 87       	std	Y+12, r25	; 0x0c
     5ac:	da 01       	movw	r26, r20
     5ae:	c9 01       	movw	r24, r18
     5b0:	04 c0       	rjmp	.+8      	; 0x5ba <__ashldi3+0x94>
     5b2:	b6 95       	lsr	r27
     5b4:	a7 95       	ror	r26
     5b6:	97 95       	ror	r25
     5b8:	87 95       	ror	r24
     5ba:	ea 95       	dec	r30
     5bc:	d2 f7       	brpl	.-12     	; 0x5b2 <__ashldi3+0x8c>
     5be:	2d 81       	ldd	r18, Y+5	; 0x05
     5c0:	3e 81       	ldd	r19, Y+6	; 0x06
     5c2:	4f 81       	ldd	r20, Y+7	; 0x07
     5c4:	58 85       	ldd	r21, Y+8	; 0x08
     5c6:	04 c0       	rjmp	.+8      	; 0x5d0 <__ashldi3+0xaa>
     5c8:	22 0f       	add	r18, r18
     5ca:	33 1f       	adc	r19, r19
     5cc:	44 1f       	adc	r20, r20
     5ce:	55 1f       	adc	r21, r21
     5d0:	0a 95       	dec	r16
     5d2:	d2 f7       	brpl	.-12     	; 0x5c8 <__ashldi3+0xa2>
     5d4:	82 2b       	or	r24, r18
     5d6:	93 2b       	or	r25, r19
     5d8:	a4 2b       	or	r26, r20
     5da:	b5 2b       	or	r27, r21
     5dc:	8d 87       	std	Y+13, r24	; 0x0d
     5de:	9e 87       	std	Y+14, r25	; 0x0e
     5e0:	af 87       	std	Y+15, r26	; 0x0f
     5e2:	b8 8b       	std	Y+16, r27	; 0x10
     5e4:	29 85       	ldd	r18, Y+9	; 0x09
     5e6:	3a 85       	ldd	r19, Y+10	; 0x0a
     5e8:	4b 85       	ldd	r20, Y+11	; 0x0b
     5ea:	5c 85       	ldd	r21, Y+12	; 0x0c
     5ec:	6d 85       	ldd	r22, Y+13	; 0x0d
     5ee:	7e 85       	ldd	r23, Y+14	; 0x0e
     5f0:	8f 85       	ldd	r24, Y+15	; 0x0f
     5f2:	98 89       	ldd	r25, Y+16	; 0x10
     5f4:	60 96       	adiw	r28, 0x10	; 16
     5f6:	0f b6       	in	r0, 0x3f	; 63
     5f8:	f8 94       	cli
     5fa:	de bf       	out	0x3e, r29	; 62
     5fc:	0f be       	out	0x3f, r0	; 63
     5fe:	cd bf       	out	0x3d, r28	; 61
     600:	cf 91       	pop	r28
     602:	df 91       	pop	r29
     604:	0f 91       	pop	r16
     606:	08 95       	ret

00000608 <StreamCallback_AbortOnMassStoreReset>:
 *  if a Mass Storage Reset request has been issued to the control endpoint.
 */
uint8_t StreamCallback_AbortOnMassStoreReset(void)
{	
	/* Abort if a Mass Storage reset command was received */
	if (IsMassStoreReset)
     608:	80 91 8a 01 	lds	r24, 0x018A
	  return STREAMCALLBACK_Abort;
	
	/* Continue with the current stream operation */
	return STREAMCALLBACK_Continue;
}
     60c:	08 95       	ret

0000060e <data_logger_main>:
  }
}

void data_logger_main(void) {
  
  UMeter_Init();
     60e:	b2 d4       	rcall	.+2404   	; 0xf74 <UMeter_Init>
  adc_init();
     610:	0e 94 a1 2b 	call	0x5742	; 0x5742 <adc_init>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     614:	8f ef       	ldi	r24, 0xFF	; 255
     616:	93 ed       	ldi	r25, 0xD3	; 211
     618:	a0 e3       	ldi	r26, 0x30	; 48
     61a:	81 50       	subi	r24, 0x01	; 1
     61c:	90 40       	sbci	r25, 0x00	; 0
     61e:	a0 40       	sbci	r26, 0x00	; 0
     620:	e1 f7       	brne	.-8      	; 0x61a <data_logger_main+0xc>
     622:	00 c0       	rjmp	.+0      	; 0x624 <data_logger_main+0x16>
     624:	00 00       	nop

  for (;;)
  {
    _delay_ms(1000);
    UMeter_Task();
     626:	d1 d4       	rcall	.+2466   	; 0xfca <UMeter_Task>
     628:	f5 cf       	rjmp	.-22     	; 0x614 <data_logger_main+0x6>

0000062a <SetupHardware>:

/** Configures the board hardware and chip peripherals for the demo's functionality. */
void SetupHardware(void)
{
	/* Disable watchdog if enabled by bootloader/fuses */
	MCUSR &= ~(1 << WDRF);
     62a:	84 b7       	in	r24, 0x34	; 52
     62c:	87 7f       	andi	r24, 0xF7	; 247
     62e:	84 bf       	out	0x34, r24	; 52
	wdt_disable();
     630:	88 e1       	ldi	r24, 0x18	; 24
     632:	0f b6       	in	r0, 0x3f	; 63
     634:	f8 94       	cli
     636:	80 93 60 00 	sts	0x0060, r24
     63a:	10 92 60 00 	sts	0x0060, r1
     63e:	0f be       	out	0x3f, r0	; 63
The type of x is clock_div_t.
*/
void clock_prescale_set(clock_div_t __x)
{
    uint8_t __tmp = _BV(CLKPCE);
    __asm__ __volatile__ (
     640:	20 e0       	ldi	r18, 0x00	; 0
     642:	90 e8       	ldi	r25, 0x80	; 128
     644:	0f b6       	in	r0, 0x3f	; 63
     646:	f8 94       	cli
     648:	90 93 61 00 	sts	0x0061, r25
     64c:	20 93 61 00 	sts	0x0061, r18
     650:	0f be       	out	0x3f, r0	; 63
			 *  \param[in] BaudRate     Serial baud rate, in bits per second
			 *  \param[in] DoubleSpeed  Enables double speed mode when set, halving the sample time to double the baud rate
			 */
			static inline void Serial_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				UCSR1A = (DoubleSpeed ? (1 << U2X1) : 0);
     652:	10 92 c8 00 	sts	0x00C8, r1
				UCSR1B = ((1 << TXEN1)  | (1 << RXEN1));
     656:	80 93 c9 00 	sts	0x00C9, r24
				UCSR1C = ((1 << UCSZ11) | (1 << UCSZ10));
     65a:	86 e0       	ldi	r24, 0x06	; 6
     65c:	80 93 ca 00 	sts	0x00CA, r24
				
				DDRD  |= (1 << 3);	
     660:	53 9a       	sbi	0x0a, 3	; 10
				PORTD |= (1 << 2);
     662:	5a 9a       	sbi	0x0b, 2	; 11
				
				UBRR1  = (DoubleSpeed ? SERIAL_2X_UBBRVAL(BaudRate) : SERIAL_UBBRVAL(BaudRate));
     664:	87 e6       	ldi	r24, 0x67	; 103
     666:	90 e0       	ldi	r25, 0x00	; 0
     668:	90 93 cd 00 	sts	0x00CD, r25
     66c:	80 93 cc 00 	sts	0x00CC, r24
			 */
			static inline void SerialStream_Init(const uint32_t BaudRate, const bool DoubleSpeed)
			{
				Serial_Init(BaudRate, DoubleSpeed);
				
				stdout = &USARTStream;
     670:	8b e7       	ldi	r24, 0x7B	; 123
     672:	91 e0       	ldi	r25, 0x01	; 1
     674:	90 93 e9 04 	sts	0x04E9, r25
     678:	80 93 e8 04 	sts	0x04E8, r24
	clock_prescale_set(clock_div_1);

	/* Hardware Initialization */
	//LEDs_Init();
	SerialStream_Init(9600, false);
	SDCardManager_Init();
     67c:	0b d4       	rcall	.+2070   	; 0xe94 <SDCardManager_Init>
	USB_Init();
     67e:	0c 94 38 2f 	jmp	0x5e70	; 0x5e70 <USB_Init>

00000682 <EVENT_USB_Device_Connect>:
	
	/* Indicate USB enumerating */
	LEDs_SetAllLEDs(LEDMASK_USB_ENUMERATING);
	
	/* Reset the MSReset flag upon connection */
	IsMassStoreReset = false;
     682:	10 92 8a 01 	sts	0x018A, r1
}
     686:	08 95       	ret

00000688 <EVENT_USB_Device_Disconnect>:
 */
void EVENT_USB_Device_Disconnect(void)
{
	/* Indicate USB not ready */
	LEDs_SetAllLEDs(LEDMASK_USB_NOTREADY);
}
     688:	08 95       	ret

0000068a <EVENT_USB_Device_ConfigurationChanged>:
	
	/* Indicate USB connected and ready */
	LEDs_SetAllLEDs(LEDMASK_USB_READY);

	/* Setup Mass Storage In and Out Endpoints */
	if (!(Endpoint_ConfigureEndpoint(MASS_STORAGE_IN_EPNUM, EP_TYPE_BULK,
     68a:	83 e0       	ldi	r24, 0x03	; 3
     68c:	61 e8       	ldi	r22, 0x81	; 129
     68e:	46 e3       	ldi	r20, 0x36	; 54
     690:	0e 94 75 2d 	call	0x5aea	; 0x5aea <Endpoint_ConfigureEndpoint_Prv>
	                                 ENDPOINT_BANK_DOUBLE)))
	{
		LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
	}
	
	if (!(Endpoint_ConfigureEndpoint(MASS_STORAGE_OUT_EPNUM, EP_TYPE_BULK,
     694:	84 e0       	ldi	r24, 0x04	; 4
     696:	60 e8       	ldi	r22, 0x80	; 128
     698:	46 e3       	ldi	r20, 0x36	; 54
     69a:	0c 94 75 2d 	jmp	0x5aea	; 0x5aea <Endpoint_ConfigureEndpoint_Prv>

0000069e <EVENT_USB_Device_UnhandledControlRequest>:
 *  requests) so that they can be handled appropriately for the application.
 */
void EVENT_USB_Device_UnhandledControlRequest(void)
{
	/* Process UFI specific control requests */
	switch (USB_ControlRequest.bRequest)
     69e:	80 91 df 04 	lds	r24, 0x04DF
     6a2:	8e 3f       	cpi	r24, 0xFE	; 254
     6a4:	81 f0       	breq	.+32     	; 0x6c6 <EVENT_USB_Device_UnhandledControlRequest+0x28>
     6a6:	8f 3f       	cpi	r24, 0xFF	; 255
     6a8:	21 f5       	brne	.+72     	; 0x6f2 <EVENT_USB_Device_UnhandledControlRequest+0x54>
	{
		case REQ_MassStorageReset:
			if (USB_ControlRequest.bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_CLASS | REQREC_INTERFACE))
     6aa:	80 91 de 04 	lds	r24, 0x04DE
     6ae:	81 32       	cpi	r24, 0x21	; 33
     6b0:	01 f5       	brne	.+64     	; 0x6f2 <EVENT_USB_Device_UnhandledControlRequest+0x54>
			{
				Endpoint_ClearSETUP();
     6b2:	80 91 e8 00 	lds	r24, 0x00E8
     6b6:	87 7f       	andi	r24, 0xF7	; 247
     6b8:	80 93 e8 00 	sts	0x00E8, r24

				/* Indicate that the current transfer should be aborted */
				IsMassStoreReset = true;
     6bc:	81 e0       	ldi	r24, 0x01	; 1
     6be:	80 93 8a 01 	sts	0x018A, r24

				Endpoint_ClearStatusStage();
     6c2:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <Endpoint_ClearStatusStage>
			}

			break;
		case REQ_GetMaxLUN:
			if (USB_ControlRequest.bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_CLASS | REQREC_INTERFACE))
     6c6:	80 91 de 04 	lds	r24, 0x04DE
     6ca:	81 3a       	cpi	r24, 0xA1	; 161
     6cc:	91 f4       	brne	.+36     	; 0x6f2 <EVENT_USB_Device_UnhandledControlRequest+0x54>
			{
				Endpoint_ClearSETUP();
     6ce:	80 91 e8 00 	lds	r24, 0x00E8
     6d2:	87 7f       	andi	r24, 0xF7	; 247
     6d4:	80 93 e8 00 	sts	0x00E8, r24
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     6d8:	10 92 f1 00 	sts	0x00F1, r1

				/* Indicate to the host the number of supported LUNs (virtual disks) on the device */
				Endpoint_Write_Byte(TOTAL_LUNS - 1);
				
				Endpoint_ClearIN();
     6dc:	80 91 e8 00 	lds	r24, 0x00E8
     6e0:	98 2f       	mov	r25, r24
     6e2:	9e 7f       	andi	r25, 0xFE	; 254
     6e4:	90 93 e8 00 	sts	0x00E8, r25
     6e8:	8f 77       	andi	r24, 0x7F	; 127
     6ea:	80 93 e8 00 	sts	0x00E8, r24
				
				Endpoint_ClearStatusStage();
     6ee:	0c 94 9f 2d 	jmp	0x5b3e	; 0x5b3e <Endpoint_ClearStatusStage>
     6f2:	08 95       	ret

000006f4 <MassStorage_Task>:
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
{
	/* Device must be connected and configured for the task to run */
	if (USB_DeviceState != DEVICE_STATE_Configured)
     6f4:	80 91 dd 04 	lds	r24, 0x04DD
     6f8:	84 30       	cpi	r24, 0x04	; 4
     6fa:	09 f0       	breq	.+2      	; 0x6fe <MassStorage_Task+0xa>
     6fc:	e8 c0       	rjmp	.+464    	; 0x8ce <MassStorage_Task+0x1da>
	  return;
	  
	/* Select the Data Out Endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);
     6fe:	80 93 e9 00 	sts	0x00E9, r24
	
	/* Check to see if a command from the host has been issued */
	if (Endpoint_IsReadWriteAllowed())
     702:	90 91 e8 00 	lds	r25, 0x00E8
     706:	95 ff       	sbrs	r25, 5
     708:	b8 c0       	rjmp	.+368    	; 0x87a <MassStorage_Task+0x186>
 *  \return Boolean true if a valid command block has been read in from the endpoint, false otherwise
 */
static bool ReadInCommandBlock(void)
{
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);
     70a:	80 93 e9 00 	sts	0x00E9, r24

	/* Read in command block header */
	Endpoint_Read_Stream_LE(&CommandBlock, (sizeof(CommandBlock) - sizeof(CommandBlock.SCSICommandData)),
     70e:	8a eb       	ldi	r24, 0xBA	; 186
     710:	94 e0       	ldi	r25, 0x04	; 4
     712:	6f e0       	ldi	r22, 0x0F	; 15
     714:	70 e0       	ldi	r23, 0x00	; 0
     716:	44 e0       	ldi	r20, 0x04	; 4
     718:	53 e0       	ldi	r21, 0x03	; 3
     71a:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <Endpoint_Read_Stream_LE>
	                        StreamCallback_AbortOnMassStoreReset);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     71e:	80 91 8a 01 	lds	r24, 0x018A
     722:	88 23       	and	r24, r24
     724:	09 f0       	breq	.+2      	; 0x728 <MassStorage_Task+0x34>
     726:	a9 c0       	rjmp	.+338    	; 0x87a <MassStorage_Task+0x186>
	  return false;

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != CBW_SIGNATURE) ||
     728:	80 91 ba 04 	lds	r24, 0x04BA
     72c:	90 91 bb 04 	lds	r25, 0x04BB
     730:	a0 91 bc 04 	lds	r26, 0x04BC
     734:	b0 91 bd 04 	lds	r27, 0x04BD
     738:	85 35       	cpi	r24, 0x55	; 85
     73a:	23 e5       	ldi	r18, 0x53	; 83
     73c:	92 07       	cpc	r25, r18
     73e:	22 e4       	ldi	r18, 0x42	; 66
     740:	a2 07       	cpc	r26, r18
     742:	23 e4       	ldi	r18, 0x43	; 67
     744:	b2 07       	cpc	r27, r18
     746:	89 f4       	brne	.+34     	; 0x76a <MassStorage_Task+0x76>
     748:	80 91 c7 04 	lds	r24, 0x04C7
     74c:	88 23       	and	r24, r24
     74e:	69 f4       	brne	.+26     	; 0x76a <MassStorage_Task+0x76>
	    (CommandBlock.LUN               >= TOTAL_LUNS)    ||
		(CommandBlock.Flags              & 0x1F)          ||
     750:	80 91 c6 04 	lds	r24, 0x04C6
     754:	90 e0       	ldi	r25, 0x00	; 0
     756:	8f 71       	andi	r24, 0x1F	; 31
     758:	90 70       	andi	r25, 0x00	; 0
	if (IsMassStoreReset)
	  return false;

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != CBW_SIGNATURE) ||
	    (CommandBlock.LUN               >= TOTAL_LUNS)    ||
     75a:	00 97       	sbiw	r24, 0x00	; 0
     75c:	31 f4       	brne	.+12     	; 0x76a <MassStorage_Task+0x76>
		(CommandBlock.Flags              & 0x1F)          ||
		(CommandBlock.SCSICommandLength == 0)             ||
     75e:	60 91 c8 04 	lds	r22, 0x04C8
	  return false;

	/* Verify the command block - abort if invalid */
	if ((CommandBlock.Signature         != CBW_SIGNATURE) ||
	    (CommandBlock.LUN               >= TOTAL_LUNS)    ||
		(CommandBlock.Flags              & 0x1F)          ||
     762:	66 23       	and	r22, r22
     764:	11 f0       	breq	.+4      	; 0x76a <MassStorage_Task+0x76>
		(CommandBlock.SCSICommandLength == 0)             ||
     766:	61 31       	cpi	r22, 0x11	; 17
     768:	70 f0       	brcs	.+28     	; 0x786 <MassStorage_Task+0x92>
		(CommandBlock.SCSICommandLength >  MAX_SCSI_COMMAND_LENGTH))
	{
		/* Stall both data pipes until reset by host */
		Endpoint_StallTransaction();
     76a:	80 91 eb 00 	lds	r24, 0x00EB
     76e:	80 62       	ori	r24, 0x20	; 32
     770:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);
     774:	83 e0       	ldi	r24, 0x03	; 3
     776:	80 93 e9 00 	sts	0x00E9, r24
		Endpoint_StallTransaction();
     77a:	80 91 eb 00 	lds	r24, 0x00EB
     77e:	80 62       	ori	r24, 0x20	; 32
     780:	80 93 eb 00 	sts	0x00EB, r24
     784:	7a c0       	rjmp	.+244    	; 0x87a <MassStorage_Task+0x186>
		
		return false;
	}

	/* Read in command block command data */
	Endpoint_Read_Stream_LE(&CommandBlock.SCSICommandData,
     786:	89 ec       	ldi	r24, 0xC9	; 201
     788:	94 e0       	ldi	r25, 0x04	; 4
     78a:	70 e0       	ldi	r23, 0x00	; 0
     78c:	44 e0       	ldi	r20, 0x04	; 4
     78e:	53 e0       	ldi	r21, 0x03	; 3
     790:	0e 94 3a 2e 	call	0x5c74	; 0x5c74 <Endpoint_Read_Stream_LE>
	                        CommandBlock.SCSICommandLength,
	                        StreamCallback_AbortOnMassStoreReset);
	  
	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     794:	80 91 8a 01 	lds	r24, 0x018A
     798:	88 23       	and	r24, r24
     79a:	09 f0       	breq	.+2      	; 0x79e <MassStorage_Task+0xaa>
     79c:	6e c0       	rjmp	.+220    	; 0x87a <MassStorage_Task+0x186>
	  return false;

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearOUT();
     79e:	80 91 e8 00 	lds	r24, 0x00E8
     7a2:	98 2f       	mov	r25, r24
     7a4:	9b 7f       	andi	r25, 0xFB	; 251
     7a6:	90 93 e8 00 	sts	0x00E8, r25
     7aa:	8f 77       	andi	r24, 0x7F	; 127
     7ac:	80 93 e8 00 	sts	0x00E8, r24

		/* Process sent command block from the host */
		if (ReadInCommandBlock())
		{
			/* Check direction of command, select Data IN endpoint if data is from the device */
			if (CommandBlock.Flags & COMMAND_DIRECTION_DATA_IN)
     7b0:	80 91 c6 04 	lds	r24, 0x04C6
     7b4:	87 ff       	sbrs	r24, 7
     7b6:	03 c0       	rjmp	.+6      	; 0x7be <MassStorage_Task+0xca>
			  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);
     7b8:	83 e0       	ldi	r24, 0x03	; 3
     7ba:	80 93 e9 00 	sts	0x00E9, r24

			/* Decode the received SCSI command, set returned status code */
			CommandStatus.Status = SCSI_DecodeSCSICommand() ? Command_Pass : Command_Fail;		
     7be:	26 d2       	rcall	.+1100   	; 0xc0c <SCSI_DecodeSCSICommand>
}

/** Task to manage the Mass Storage interface, reading in Command Block Wrappers from the host, processing the SCSI commands they
 *  contain, and returning Command Status Wrappers back to the host to indicate the success or failure of the last issued command.
 */
void MassStorage_Task(void)
     7c0:	91 e0       	ldi	r25, 0x01	; 1
     7c2:	98 27       	eor	r25, r24
			/* Check direction of command, select Data IN endpoint if data is from the device */
			if (CommandBlock.Flags & COMMAND_DIRECTION_DATA_IN)
			  Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

			/* Decode the received SCSI command, set returned status code */
			CommandStatus.Status = SCSI_DecodeSCSICommand() ? Command_Pass : Command_Fail;		
     7c4:	90 93 0c 01 	sts	0x010C, r25

			/* Load in the CBW tag into the CSW to link them together */
			CommandStatus.Tag = CommandBlock.Tag;
     7c8:	20 91 be 04 	lds	r18, 0x04BE
     7cc:	30 91 bf 04 	lds	r19, 0x04BF
     7d0:	40 91 c0 04 	lds	r20, 0x04C0
     7d4:	50 91 c1 04 	lds	r21, 0x04C1
     7d8:	20 93 04 01 	sts	0x0104, r18
     7dc:	30 93 05 01 	sts	0x0105, r19
     7e0:	40 93 06 01 	sts	0x0106, r20
     7e4:	50 93 07 01 	sts	0x0107, r21

			/* Load in the data residue counter into the CSW */
			CommandStatus.DataTransferResidue = CommandBlock.DataTransferLength;
     7e8:	20 91 c2 04 	lds	r18, 0x04C2
     7ec:	30 91 c3 04 	lds	r19, 0x04C3
     7f0:	40 91 c4 04 	lds	r20, 0x04C4
     7f4:	50 91 c5 04 	lds	r21, 0x04C5
     7f8:	20 93 08 01 	sts	0x0108, r18
     7fc:	30 93 09 01 	sts	0x0109, r19
     800:	40 93 0a 01 	sts	0x010A, r20
     804:	50 93 0b 01 	sts	0x010B, r21
			
			/* Stall the selected data pipe if command failed (if data is still to be transferred) */
			if ((CommandStatus.Status == Command_Fail) && (CommandStatus.DataTransferResidue))
     808:	91 30       	cpi	r25, 0x01	; 1
     80a:	51 f4       	brne	.+20     	; 0x820 <MassStorage_Task+0x12c>
     80c:	21 15       	cp	r18, r1
     80e:	31 05       	cpc	r19, r1
     810:	41 05       	cpc	r20, r1
     812:	51 05       	cpc	r21, r1
     814:	29 f0       	breq	.+10     	; 0x820 <MassStorage_Task+0x12c>
			  Endpoint_StallTransaction();
     816:	80 91 eb 00 	lds	r24, 0x00EB
     81a:	80 62       	ori	r24, 0x20	; 32
     81c:	80 93 eb 00 	sts	0x00EB, r24
 *  stalled data endpoints as needed.
 */
static void ReturnCommandStatus(void)
{
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);
     820:	84 e0       	ldi	r24, 0x04	; 4
     822:	80 93 e9 00 	sts	0x00E9, r24
     826:	04 c0       	rjmp	.+8      	; 0x830 <MassStorage_Task+0x13c>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     828:	80 91 8a 01 	lds	r24, 0x018A
     82c:	88 23       	and	r24, r24
     82e:	29 f5       	brne	.+74     	; 0x87a <MassStorage_Task+0x186>
{
	/* Select the Data Out endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     830:	80 91 eb 00 	lds	r24, 0x00EB
     834:	85 fd       	sbrc	r24, 5
     836:	f8 cf       	rjmp	.-16     	; 0x828 <MassStorage_Task+0x134>
		if (IsMassStoreReset)
		  return;
	}

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);
     838:	83 e0       	ldi	r24, 0x03	; 3
     83a:	80 93 e9 00 	sts	0x00E9, r24
     83e:	04 c0       	rjmp	.+8      	; 0x848 <MassStorage_Task+0x154>

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
	{
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
     840:	80 91 8a 01 	lds	r24, 0x018A
     844:	88 23       	and	r24, r24
     846:	c9 f4       	brne	.+50     	; 0x87a <MassStorage_Task+0x186>

	/* Select the Data In endpoint */
	Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);

	/* While data pipe is stalled, wait until the host issues a control request to clear the stall */
	while (Endpoint_IsStalled())
     848:	80 91 eb 00 	lds	r24, 0x00EB
     84c:	85 fd       	sbrc	r24, 5
     84e:	f8 cf       	rjmp	.-16     	; 0x840 <MassStorage_Task+0x14c>
		if (IsMassStoreReset)
		  return;
	}
	
	/* Write the CSW to the endpoint */
	Endpoint_Write_Stream_LE(&CommandStatus, sizeof(CommandStatus),
     850:	80 e0       	ldi	r24, 0x00	; 0
     852:	91 e0       	ldi	r25, 0x01	; 1
     854:	6d e0       	ldi	r22, 0x0D	; 13
     856:	70 e0       	ldi	r23, 0x00	; 0
     858:	44 e0       	ldi	r20, 0x04	; 4
     85a:	53 e0       	ldi	r21, 0x03	; 3
     85c:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <Endpoint_Write_Stream_LE>
	                          StreamCallback_AbortOnMassStoreReset);
	
	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     860:	80 91 8a 01 	lds	r24, 0x018A
     864:	88 23       	and	r24, r24
     866:	49 f4       	brne	.+18     	; 0x87a <MassStorage_Task+0x186>
	  return;

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();
     868:	80 91 e8 00 	lds	r24, 0x00E8
     86c:	98 2f       	mov	r25, r24
     86e:	9e 7f       	andi	r25, 0xFE	; 254
     870:	90 93 e8 00 	sts	0x00E8, r25
     874:	8f 77       	andi	r24, 0x7F	; 127
     876:	80 93 e8 00 	sts	0x00E8, r24
			LEDs_SetAllLEDs(LEDMASK_USB_ERROR);
		}
	}

	/* Check if a Mass Storage Reset occurred */
	if (IsMassStoreReset)
     87a:	80 91 8a 01 	lds	r24, 0x018A
     87e:	88 23       	and	r24, r24
     880:	31 f1       	breq	.+76     	; 0x8ce <MassStorage_Task+0x1da>
	{
		/* Reset the data endpoint banks */
		Endpoint_ResetFIFO(MASS_STORAGE_OUT_EPNUM);
     882:	80 e1       	ldi	r24, 0x10	; 16
     884:	80 93 ea 00 	sts	0x00EA, r24
     888:	10 92 ea 00 	sts	0x00EA, r1
		Endpoint_ResetFIFO(MASS_STORAGE_IN_EPNUM);
     88c:	88 e0       	ldi	r24, 0x08	; 8
     88e:	80 93 ea 00 	sts	0x00EA, r24
     892:	10 92 ea 00 	sts	0x00EA, r1
		
		Endpoint_SelectEndpoint(MASS_STORAGE_OUT_EPNUM);
     896:	84 e0       	ldi	r24, 0x04	; 4
     898:	80 93 e9 00 	sts	0x00E9, r24
		Endpoint_ClearStall();
     89c:	80 91 eb 00 	lds	r24, 0x00EB
     8a0:	80 61       	ori	r24, 0x10	; 16
     8a2:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
     8a6:	80 91 eb 00 	lds	r24, 0x00EB
     8aa:	88 60       	ori	r24, 0x08	; 8
     8ac:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_SelectEndpoint(MASS_STORAGE_IN_EPNUM);
     8b0:	83 e0       	ldi	r24, 0x03	; 3
     8b2:	80 93 e9 00 	sts	0x00E9, r24
		Endpoint_ClearStall();
     8b6:	80 91 eb 00 	lds	r24, 0x00EB
     8ba:	80 61       	ori	r24, 0x10	; 16
     8bc:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ResetDataToggle();
     8c0:	80 91 eb 00 	lds	r24, 0x00EB
     8c4:	88 60       	ori	r24, 0x08	; 8
     8c6:	80 93 eb 00 	sts	0x00EB, r24

		/* Clear the abort transfer flag */
		IsMassStoreReset = false;
     8ca:	10 92 8a 01 	sts	0x018A, r1
     8ce:	08 95       	ret

000008d0 <mass_storage_main>:
}

void mass_storage_main(void) {
  for (;;)
  {
    MassStorage_Task();
     8d0:	11 df       	rcall	.-478    	; 0x6f4 <MassStorage_Task>
    USB_USBTask();
     8d2:	0e 94 4a 30 	call	0x6094	; 0x6094 <USB_USBTask>
     8d6:	fc cf       	rjmp	.-8      	; 0x8d0 <mass_storage_main>

000008d8 <main>:
void mass_storage_main(void);
void data_logger_main(void);

int main(void)
{
  SetupHardware();
     8d8:	a8 de       	rcall	.-688    	; 0x62a <SetupHardware>
  DDRC &= ~(1 << PC6);		// PD6 is input
     8da:	3e 98       	cbi	0x07, 6	; 7
  PORTC |= (1 << PC6);		// PD6 pull up resistor enabled
     8dc:	46 9a       	sbi	0x08, 6	; 8

  asm("nop");
     8de:	00 00       	nop
  asm("nop");
     8e0:	00 00       	nop
  asm("nop");
     8e2:	00 00       	nop
  
  if (PINC & (1 << PC6)) {
     8e4:	36 9b       	sbis	0x06, 6	; 6
     8e6:	0d c0       	rjmp	.+26     	; 0x902 <main+0x2a>
  //if(bit_is_clear(PINC, PC6)) {
    printf_P(PSTR("Entering Mass Storage Mode\r\n"));
     8e8:	00 d0       	rcall	.+0      	; 0x8ea <main+0x12>
     8ea:	88 ec       	ldi	r24, 0xC8	; 200
     8ec:	90 e0       	ldi	r25, 0x00	; 0
     8ee:	ed b7       	in	r30, 0x3d	; 61
     8f0:	fe b7       	in	r31, 0x3e	; 62
     8f2:	92 83       	std	Z+2, r25	; 0x02
     8f4:	81 83       	std	Z+1, r24	; 0x01
     8f6:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
    mass_storage_main();
     8fa:	0f 90       	pop	r0
     8fc:	0f 90       	pop	r0
     8fe:	e8 df       	rcall	.-48     	; 0x8d0 <mass_storage_main>
     900:	0c c0       	rjmp	.+24     	; 0x91a <main+0x42>
  }
  else {
    printf_P(PSTR("Entering Data Logger Mode\r\n"));
     902:	00 d0       	rcall	.+0      	; 0x904 <main+0x2c>
     904:	8c ea       	ldi	r24, 0xAC	; 172
     906:	90 e0       	ldi	r25, 0x00	; 0
     908:	ed b7       	in	r30, 0x3d	; 61
     90a:	fe b7       	in	r31, 0x3e	; 62
     90c:	92 83       	std	Z+2, r25	; 0x02
     90e:	81 83       	std	Z+1, r24	; 0x01
     910:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
    data_logger_main();
     914:	0f 90       	pop	r0
     916:	0f 90       	pop	r0
     918:	7a de       	rcall	.-780    	; 0x60e <data_logger_main>
  }
}
     91a:	80 e0       	ldi	r24, 0x00	; 0
     91c:	90 e0       	ldi	r25, 0x00	; 0
     91e:	08 95       	ret

00000920 <CALLBACK_USB_GetDescriptor>:
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
     920:	92 30       	cpi	r25, 0x02	; 2
     922:	29 f0       	breq	.+10     	; 0x92e <CALLBACK_USB_GetDescriptor+0xe>
     924:	93 30       	cpi	r25, 0x03	; 3
     926:	41 f0       	breq	.+16     	; 0x938 <CALLBACK_USB_GetDescriptor+0x18>
     928:	91 30       	cpi	r25, 0x01	; 1
     92a:	e9 f4       	brne	.+58     	; 0x966 <CALLBACK_USB_GetDescriptor+0x46>
     92c:	17 c0       	rjmp	.+46     	; 0x95c <CALLBACK_USB_GetDescriptor+0x3c>
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
			Size    = sizeof(USB_Descriptor_Configuration_t);
     92e:	20 e2       	ldi	r18, 0x20	; 32
     930:	30 e0       	ldi	r19, 0x00	; 0
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
			break;
		case DTYPE_Configuration: 
			Address = (void*)&ConfigurationDescriptor;
     932:	e7 ef       	ldi	r30, 0xF7	; 247
     934:	f0 e0       	ldi	r31, 0x00	; 0
			Size    = sizeof(USB_Descriptor_Configuration_t);
			break;
     936:	1b c0       	rjmp	.+54     	; 0x96e <CALLBACK_USB_GetDescriptor+0x4e>
		case DTYPE_String: 
			switch (DescriptorNumber)
     938:	81 30       	cpi	r24, 0x01	; 1
     93a:	41 f0       	breq	.+16     	; 0x94c <CALLBACK_USB_GetDescriptor+0x2c>
     93c:	81 30       	cpi	r24, 0x01	; 1
     93e:	18 f0       	brcs	.+6      	; 0x946 <CALLBACK_USB_GetDescriptor+0x26>
     940:	82 30       	cpi	r24, 0x02	; 2
     942:	89 f4       	brne	.+34     	; 0x966 <CALLBACK_USB_GetDescriptor+0x46>
     944:	06 c0       	rjmp	.+12     	; 0x952 <CALLBACK_USB_GetDescriptor+0x32>
			{
				case 0x00: 
					Address = (void*)&LanguageString;
					Size    = pgm_read_byte(&LanguageString.Header.Size);
     946:	e7 e1       	ldi	r30, 0x17	; 23
     948:	f1 e0       	ldi	r31, 0x01	; 1
     94a:	05 c0       	rjmp	.+10     	; 0x956 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x01: 
					Address = (void*)&ManufacturerString;
					Size    = pgm_read_byte(&ManufacturerString.Header.Size);
     94c:	eb e1       	ldi	r30, 0x1B	; 27
     94e:	f1 e0       	ldi	r31, 0x01	; 1
     950:	02 c0       	rjmp	.+4      	; 0x956 <CALLBACK_USB_GetDescriptor+0x36>
					break;
				case 0x02: 
					Address = (void*)&ProductString;
					Size    = pgm_read_byte(&ProductString.Header.Size);
     952:	e5 e3       	ldi	r30, 0x35	; 53
     954:	f1 e0       	ldi	r31, 0x01	; 1
     956:	24 91       	lpm	r18, Z+
     958:	30 e0       	ldi	r19, 0x00	; 0
					break;
     95a:	09 c0       	rjmp	.+18     	; 0x96e <CALLBACK_USB_GetDescriptor+0x4e>

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
			Size    = sizeof(USB_Descriptor_Device_t);
     95c:	22 e1       	ldi	r18, 0x12	; 18
     95e:	30 e0       	ldi	r19, 0x00	; 0
	uint16_t Size    = NO_DESCRIPTOR;

	switch (DescriptorType)
	{
		case DTYPE_Device: 
			Address = (void*)&DeviceDescriptor;
     960:	e5 ee       	ldi	r30, 0xE5	; 229
     962:	f0 e0       	ldi	r31, 0x00	; 0
     964:	04 c0       	rjmp	.+8      	; 0x96e <CALLBACK_USB_GetDescriptor+0x4e>
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
	uint16_t Size    = NO_DESCRIPTOR;
     966:	20 e0       	ldi	r18, 0x00	; 0
     968:	30 e0       	ldi	r19, 0x00	; 0
uint16_t CALLBACK_USB_GetDescriptor(const uint16_t wValue, const uint8_t wIndex, void** const DescriptorAddress)
{
	const uint8_t  DescriptorType   = (wValue >> 8);
	const uint8_t  DescriptorNumber = (wValue & 0xFF);

	void*    Address = NULL;
     96a:	e0 e0       	ldi	r30, 0x00	; 0
     96c:	f0 e0       	ldi	r31, 0x00	; 0
			}
			
			break;
	}
	
	*DescriptorAddress = Address;
     96e:	da 01       	movw	r26, r20
     970:	11 96       	adiw	r26, 0x01	; 1
     972:	fc 93       	st	X, r31
     974:	ee 93       	st	-X, r30
	return Size;
}
     976:	c9 01       	movw	r24, r18
     978:	08 95       	ret

0000097a <SCSI_Command_Inquiry>:

/** Command processing for an issued SCSI INQUIRY command. This command returns information about the device's features
 *  and capabilities to the host.
 */
static void SCSI_Command_Inquiry(void)
{
     97a:	af 92       	push	r10
     97c:	bf 92       	push	r11
     97e:	cf 92       	push	r12
     980:	df 92       	push	r13
     982:	ef 92       	push	r14
     984:	ff 92       	push	r15
     986:	0f 93       	push	r16
     988:	1f 93       	push	r17
     98a:	df 93       	push	r29
     98c:	cf 93       	push	r28
     98e:	cd b7       	in	r28, 0x3d	; 61
     990:	de b7       	in	r29, 0x3e	; 62
	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
}
     992:	cd b6       	in	r12, 0x3d	; 61
     994:	de b6       	in	r13, 0x3e	; 62

/** Command processing for an issued SCSI INQUIRY command. This command returns information about the device's features
 *  and capabilities to the host.
 */
static void SCSI_Command_Inquiry(void)
{
     996:	ad b6       	in	r10, 0x3d	; 61
     998:	be b6       	in	r11, 0x3e	; 62
	uint16_t AllocationLength  = (((uint16_t)CommandBlock.SCSICommandData[3] << 8) |
     99a:	20 91 cc 04 	lds	r18, 0x04CC
	                                         CommandBlock.SCSICommandData[4]);
     99e:	00 91 cd 04 	lds	r16, 0x04CD
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
	                                                                       sizeof(InquiryData);

	/* Only the standard INQUIRY data is supported, check if any optional INQUIRY bits set */
	if ((CommandBlock.SCSICommandData[1] & ((1 << 0) | (1 << 1))) ||
     9a2:	80 91 ca 04 	lds	r24, 0x04CA
     9a6:	90 e0       	ldi	r25, 0x00	; 0
     9a8:	83 70       	andi	r24, 0x03	; 3
     9aa:	90 70       	andi	r25, 0x00	; 0
     9ac:	00 97       	sbiw	r24, 0x00	; 0
     9ae:	21 f4       	brne	.+8      	; 0x9b8 <SCSI_Command_Inquiry+0x3e>
     9b0:	80 91 cb 04 	lds	r24, 0x04CB
     9b4:	88 23       	and	r24, r24
     9b6:	61 f0       	breq	.+24     	; 0x9d0 <SCSI_Command_Inquiry+0x56>
	     CommandBlock.SCSICommandData[2])
	{
		/* Optional but unsupported bits set - update the SENSE key and fail the request */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     9b8:	80 91 33 01 	lds	r24, 0x0133
     9bc:	80 7f       	andi	r24, 0xF0	; 240
     9be:	85 60       	ori	r24, 0x05	; 5
     9c0:	80 93 33 01 	sts	0x0133, r24
     9c4:	84 e2       	ldi	r24, 0x24	; 36
     9c6:	80 93 3d 01 	sts	0x013D, r24
     9ca:	10 92 3e 01 	sts	0x013E, r1
     9ce:	43 c0       	rjmp	.+134    	; 0xa56 <SCSI_Command_Inquiry+0xdc>
/** Command processing for an issued SCSI INQUIRY command. This command returns information about the device's features
 *  and capabilities to the host.
 */
static void SCSI_Command_Inquiry(void)
{
	uint16_t AllocationLength  = (((uint16_t)CommandBlock.SCSICommandData[3] << 8) |
     9d0:	92 2f       	mov	r25, r18
     9d2:	80 e0       	ldi	r24, 0x00	; 0
     9d4:	10 e0       	ldi	r17, 0x00	; 0
     9d6:	08 2b       	or	r16, r24
     9d8:	19 2b       	or	r17, r25
	                                         CommandBlock.SCSICommandData[4]);
	uint16_t BytesTransferred  = (AllocationLength < sizeof(InquiryData))? AllocationLength :
     9da:	78 01       	movw	r14, r16
     9dc:	05 32       	cpi	r16, 0x25	; 37
     9de:	11 05       	cpc	r17, r1
     9e0:	18 f0       	brcs	.+6      	; 0x9e8 <SCSI_Command_Inquiry+0x6e>
     9e2:	84 e2       	ldi	r24, 0x24	; 36
     9e4:	e8 2e       	mov	r14, r24
     9e6:	f1 2c       	mov	r15, r1

		return;
	}

	/* Write the INQUIRY data to the endpoint */
	Endpoint_Write_Stream_LE(&InquiryData, BytesTransferred, StreamCallback_AbortOnMassStoreReset);
     9e8:	8d e0       	ldi	r24, 0x0D	; 13
     9ea:	91 e0       	ldi	r25, 0x01	; 1
     9ec:	b7 01       	movw	r22, r14
     9ee:	44 e0       	ldi	r20, 0x04	; 4
     9f0:	53 e0       	ldi	r21, 0x03	; 3
     9f2:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <Endpoint_Write_Stream_LE>

	uint8_t PadBytes[AllocationLength - BytesTransferred];
     9f6:	b8 01       	movw	r22, r16
     9f8:	6e 19       	sub	r22, r14
     9fa:	7f 09       	sbc	r23, r15
     9fc:	8d b7       	in	r24, 0x3d	; 61
     9fe:	9e b7       	in	r25, 0x3e	; 62
     a00:	86 1b       	sub	r24, r22
     a02:	97 0b       	sbc	r25, r23
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	9e bf       	out	0x3e, r25	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	8d bf       	out	0x3d, r24	; 61
	
	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, (AllocationLength - BytesTransferred), StreamCallback_AbortOnMassStoreReset);
     a0e:	01 96       	adiw	r24, 0x01	; 1
     a10:	44 e0       	ldi	r20, 0x04	; 4
     a12:	53 e0       	ldi	r21, 0x03	; 3
     a14:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <Endpoint_Write_Stream_LE>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();
     a18:	80 91 e8 00 	lds	r24, 0x00E8
     a1c:	98 2f       	mov	r25, r24
     a1e:	9e 7f       	andi	r25, 0xFE	; 254
     a20:	90 93 e8 00 	sts	0x00E8, r25
     a24:	8f 77       	andi	r24, 0x7F	; 127
     a26:	80 93 e8 00 	sts	0x00E8, r24

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     a2a:	00 e0       	ldi	r16, 0x00	; 0
     a2c:	10 e0       	ldi	r17, 0x00	; 0
     a2e:	80 91 c2 04 	lds	r24, 0x04C2
     a32:	90 91 c3 04 	lds	r25, 0x04C3
     a36:	a0 91 c4 04 	lds	r26, 0x04C4
     a3a:	b0 91 c5 04 	lds	r27, 0x04C5
     a3e:	8e 19       	sub	r24, r14
     a40:	9f 09       	sbc	r25, r15
     a42:	a0 0b       	sbc	r26, r16
     a44:	b1 0b       	sbc	r27, r17
     a46:	80 93 c2 04 	sts	0x04C2, r24
     a4a:	90 93 c3 04 	sts	0x04C3, r25
     a4e:	a0 93 c4 04 	sts	0x04C4, r26
     a52:	b0 93 c5 04 	sts	0x04C5, r27
     a56:	8a 2d       	mov	r24, r10
     a58:	9b 2d       	mov	r25, r11
     a5a:	0f b6       	in	r0, 0x3f	; 63
     a5c:	f8 94       	cli
     a5e:	9e bf       	out	0x3e, r25	; 62
     a60:	0f be       	out	0x3f, r0	; 63
     a62:	8d bf       	out	0x3d, r24	; 61
}
     a64:	0f b6       	in	r0, 0x3f	; 63
     a66:	f8 94       	cli
     a68:	de be       	out	0x3e, r13	; 62
     a6a:	0f be       	out	0x3f, r0	; 63
     a6c:	cd be       	out	0x3d, r12	; 61
     a6e:	cf 91       	pop	r28
     a70:	df 91       	pop	r29
     a72:	1f 91       	pop	r17
     a74:	0f 91       	pop	r16
     a76:	ff 90       	pop	r15
     a78:	ef 90       	pop	r14
     a7a:	df 90       	pop	r13
     a7c:	cf 90       	pop	r12
     a7e:	bf 90       	pop	r11
     a80:	af 90       	pop	r10
     a82:	08 95       	ret

00000a84 <SCSI_Command_Request_Sense>:

/** Command processing for an issued SCSI REQUEST SENSE command. This command returns information about the last issued command,
 *  including the error code and additional error information so that the host can determine why a command failed to complete.
 */
static void SCSI_Command_Request_Sense(void)
{
     a84:	ef 92       	push	r14
     a86:	ff 92       	push	r15
     a88:	0f 93       	push	r16
     a8a:	1f 93       	push	r17
     a8c:	df 93       	push	r29
     a8e:	cf 93       	push	r28
     a90:	cd b7       	in	r28, 0x3d	; 61
     a92:	de b7       	in	r29, 0x3e	; 62
	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
}
     a94:	0d b7       	in	r16, 0x3d	; 61
     a96:	1e b7       	in	r17, 0x3e	; 62
/** Command processing for an issued SCSI REQUEST SENSE command. This command returns information about the last issued command,
 *  including the error code and additional error information so that the host can determine why a command failed to complete.
 */
static void SCSI_Command_Request_Sense(void)
{
	uint8_t  AllocationLength = CommandBlock.SCSICommandData[4];
     a98:	e0 90 cd 04 	lds	r14, 0x04CD
	uint8_t  BytesTransferred = (AllocationLength < sizeof(SenseData))? AllocationLength : sizeof(SenseData);
     a9c:	fe 2c       	mov	r15, r14
     a9e:	8e 2d       	mov	r24, r14
     aa0:	83 31       	cpi	r24, 0x13	; 19
     aa2:	10 f0       	brcs	.+4      	; 0xaa8 <SCSI_Command_Request_Sense+0x24>
     aa4:	92 e1       	ldi	r25, 0x12	; 18
     aa6:	f9 2e       	mov	r15, r25
	
	/* Send the SENSE data - this indicates to the host the status of the last command */
	Endpoint_Write_Stream_LE(&SenseData, BytesTransferred, StreamCallback_AbortOnMassStoreReset);
     aa8:	81 e3       	ldi	r24, 0x31	; 49
     aaa:	91 e0       	ldi	r25, 0x01	; 1
     aac:	6f 2d       	mov	r22, r15
     aae:	70 e0       	ldi	r23, 0x00	; 0
     ab0:	44 e0       	ldi	r20, 0x04	; 4
     ab2:	53 e0       	ldi	r21, 0x03	; 3
     ab4:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <Endpoint_Write_Stream_LE>
	
	uint8_t PadBytes[AllocationLength - BytesTransferred];
     ab8:	6e 2d       	mov	r22, r14
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	6f 19       	sub	r22, r15
     abe:	71 09       	sbc	r23, r1
     ac0:	8d b7       	in	r24, 0x3d	; 61
     ac2:	9e b7       	in	r25, 0x3e	; 62
     ac4:	86 1b       	sub	r24, r22
     ac6:	97 0b       	sbc	r25, r23
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	9e bf       	out	0x3e, r25	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	8d bf       	out	0x3d, r24	; 61
	
	/* Pad out remaining bytes with 0x00 */
	Endpoint_Write_Stream_LE(&PadBytes, (AllocationLength - BytesTransferred), StreamCallback_AbortOnMassStoreReset);
     ad2:	01 96       	adiw	r24, 0x01	; 1
     ad4:	44 e0       	ldi	r20, 0x04	; 4
     ad6:	53 e0       	ldi	r21, 0x03	; 3
     ad8:	0e 94 ef 2d 	call	0x5bde	; 0x5bde <Endpoint_Write_Stream_LE>

	/* Finalize the stream transfer to send the last packet */
	Endpoint_ClearIN();
     adc:	80 91 e8 00 	lds	r24, 0x00E8
     ae0:	98 2f       	mov	r25, r24
     ae2:	9e 7f       	andi	r25, 0xFE	; 254
     ae4:	90 93 e8 00 	sts	0x00E8, r25
     ae8:	8f 77       	andi	r24, 0x7F	; 127
     aea:	80 93 e8 00 	sts	0x00E8, r24

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= BytesTransferred;
     aee:	80 91 c2 04 	lds	r24, 0x04C2
     af2:	90 91 c3 04 	lds	r25, 0x04C3
     af6:	a0 91 c4 04 	lds	r26, 0x04C4
     afa:	b0 91 c5 04 	lds	r27, 0x04C5
     afe:	8f 19       	sub	r24, r15
     b00:	91 09       	sbc	r25, r1
     b02:	a1 09       	sbc	r26, r1
     b04:	b1 09       	sbc	r27, r1
     b06:	80 93 c2 04 	sts	0x04C2, r24
     b0a:	90 93 c3 04 	sts	0x04C3, r25
     b0e:	a0 93 c4 04 	sts	0x04C4, r26
     b12:	b0 93 c5 04 	sts	0x04C5, r27
}
     b16:	0f b6       	in	r0, 0x3f	; 63
     b18:	f8 94       	cli
     b1a:	1e bf       	out	0x3e, r17	; 62
     b1c:	0f be       	out	0x3f, r0	; 63
     b1e:	0d bf       	out	0x3d, r16	; 61
     b20:	cf 91       	pop	r28
     b22:	df 91       	pop	r29
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ff 90       	pop	r15
     b2a:	ef 90       	pop	r14
     b2c:	08 95       	ret

00000b2e <SCSI_Command_ReadWrite_10>:
 *  reading and writing of the data.
 *
 *  \param[in] IsDataRead  Indicates if the command is a READ (10) command or WRITE (10) command (DATA_READ or DATA_WRITE)
 */
static void SCSI_Command_ReadWrite_10(const bool IsDataRead)
{
     b2e:	df 92       	push	r13
     b30:	ef 92       	push	r14
     b32:	ff 92       	push	r15
     b34:	0f 93       	push	r16
     b36:	1f 93       	push	r17
     b38:	df 93       	push	r29
     b3a:	cf 93       	push	r28
     b3c:	00 d0       	rcall	.+0      	; 0xb3e <SCSI_Command_ReadWrite_10+0x10>
     b3e:	00 d0       	rcall	.+0      	; 0xb40 <SCSI_Command_ReadWrite_10+0x12>
     b40:	00 d0       	rcall	.+0      	; 0xb42 <SCSI_Command_ReadWrite_10+0x14>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	d8 2e       	mov	r13, r24
	uint32_t BlockAddress;
	uint16_t TotalBlocks;
	
	/* Load in the 32-bit block address (SCSI uses big-endian, so have to do it byte-by-byte) */
	((uint8_t*)&BlockAddress)[3] = CommandBlock.SCSICommandData[2];
     b48:	fe 01       	movw	r30, r28
     b4a:	33 96       	adiw	r30, 0x03	; 3
     b4c:	80 91 cb 04 	lds	r24, 0x04CB
     b50:	83 83       	std	Z+3, r24	; 0x03
	((uint8_t*)&BlockAddress)[2] = CommandBlock.SCSICommandData[3];
     b52:	80 91 cc 04 	lds	r24, 0x04CC
     b56:	82 83       	std	Z+2, r24	; 0x02
	((uint8_t*)&BlockAddress)[1] = CommandBlock.SCSICommandData[4];
     b58:	80 91 cd 04 	lds	r24, 0x04CD
     b5c:	81 83       	std	Z+1, r24	; 0x01
	((uint8_t*)&BlockAddress)[0] = CommandBlock.SCSICommandData[5];
     b5e:	80 91 ce 04 	lds	r24, 0x04CE
     b62:	8b 83       	std	Y+3, r24	; 0x03

	/* Load in the 16-bit total blocks (SCSI uses big-endian, so have to do it byte-by-byte) */
	((uint8_t*)&TotalBlocks)[1]  = CommandBlock.SCSICommandData[7];
     b64:	80 91 d0 04 	lds	r24, 0x04D0
     b68:	8a 83       	std	Y+2, r24	; 0x02
	((uint8_t*)&TotalBlocks)[0]  = CommandBlock.SCSICommandData[8];
     b6a:	80 91 d1 04 	lds	r24, 0x04D1
     b6e:	89 83       	std	Y+1, r24	; 0x01
	
	/* Check if the block address is outside the maximum allowable value for the LUN */
	if (BlockAddress >= LUN_MEDIA_BLOCKS)
     b70:	eb 80       	ldd	r14, Y+3	; 0x03
     b72:	fc 80       	ldd	r15, Y+4	; 0x04
     b74:	0d 81       	ldd	r16, Y+5	; 0x05
     b76:	1e 81       	ldd	r17, Y+6	; 0x06
     b78:	10 d3       	rcall	.+1568   	; 0x119a <SDCardManager_GetNbBlocks>
     b7a:	e6 16       	cp	r14, r22
     b7c:	f7 06       	cpc	r15, r23
     b7e:	08 07       	cpc	r16, r24
     b80:	19 07       	cpc	r17, r25
     b82:	60 f0       	brcs	.+24     	; 0xb9c <SCSI_Command_ReadWrite_10+0x6e>
	{
		/* Block address is invalid, update SENSE key and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     b84:	80 91 33 01 	lds	r24, 0x0133
     b88:	80 7f       	andi	r24, 0xF0	; 240
     b8a:	85 60       	ori	r24, 0x05	; 5
     b8c:	80 93 33 01 	sts	0x0133, r24
     b90:	81 e2       	ldi	r24, 0x21	; 33
     b92:	80 93 3d 01 	sts	0x013D, r24
     b96:	10 92 3e 01 	sts	0x013E, r1
		               SCSI_ASENSE_LOGICAL_BLOCK_ADDRESS_OUT_OF_RANGE,
		               SCSI_ASENSEQ_NO_QUALIFIER);

		return;
     b9a:	2a c0       	rjmp	.+84     	; 0xbf0 <SCSI_Command_ReadWrite_10+0xc2>
     b9c:	49 81       	ldd	r20, Y+1	; 0x01
     b9e:	5a 81       	ldd	r21, Y+2	; 0x02
	/* Adjust the given block address to the real media address based on the selected LUN */
	BlockAddress += ((uint32_t)CommandBlock.LUN * LUN_MEDIA_BLOCKS);
	#endif
	
	/* Determine if the packet is a READ (10) or WRITE (10) command, call appropriate function */
	if (IsDataRead == DATA_READ)
     ba0:	dd 20       	and	r13, r13
     ba2:	21 f0       	breq	.+8      	; 0xbac <SCSI_Command_ReadWrite_10+0x7e>
	  SDCardManager_ReadBlocks(BlockAddress, TotalBlocks);
     ba4:	c8 01       	movw	r24, r16
     ba6:	b7 01       	movw	r22, r14
     ba8:	c2 d3       	rcall	.+1924   	; 0x132e <SDCardManager_ReadBlocks>
     baa:	03 c0       	rjmp	.+6      	; 0xbb2 <SCSI_Command_ReadWrite_10+0x84>
	else
	  SDCardManager_WriteBlocks(BlockAddress, TotalBlocks);
     bac:	c8 01       	movw	r24, r16
     bae:	b7 01       	movw	r22, r14
     bb0:	3b d3       	rcall	.+1654   	; 0x1228 <SDCardManager_WriteBlocks>

	/* Update the bytes transferred counter and succeed the command */
	CommandBlock.DataTransferLength -= ((uint32_t)TotalBlocks * VIRTUAL_MEMORY_BLOCK_SIZE);
     bb2:	29 81       	ldd	r18, Y+1	; 0x01
     bb4:	3a 81       	ldd	r19, Y+2	; 0x02
     bb6:	40 e0       	ldi	r20, 0x00	; 0
     bb8:	50 e0       	ldi	r21, 0x00	; 0
     bba:	69 e0       	ldi	r22, 0x09	; 9
     bbc:	22 0f       	add	r18, r18
     bbe:	33 1f       	adc	r19, r19
     bc0:	44 1f       	adc	r20, r20
     bc2:	55 1f       	adc	r21, r21
     bc4:	6a 95       	dec	r22
     bc6:	d1 f7       	brne	.-12     	; 0xbbc <SCSI_Command_ReadWrite_10+0x8e>
     bc8:	80 91 c2 04 	lds	r24, 0x04C2
     bcc:	90 91 c3 04 	lds	r25, 0x04C3
     bd0:	a0 91 c4 04 	lds	r26, 0x04C4
     bd4:	b0 91 c5 04 	lds	r27, 0x04C5
     bd8:	82 1b       	sub	r24, r18
     bda:	93 0b       	sbc	r25, r19
     bdc:	a4 0b       	sbc	r26, r20
     bde:	b5 0b       	sbc	r27, r21
     be0:	80 93 c2 04 	sts	0x04C2, r24
     be4:	90 93 c3 04 	sts	0x04C3, r25
     be8:	a0 93 c4 04 	sts	0x04C4, r26
     bec:	b0 93 c5 04 	sts	0x04C5, r27
}
     bf0:	26 96       	adiw	r28, 0x06	; 6
     bf2:	0f b6       	in	r0, 0x3f	; 63
     bf4:	f8 94       	cli
     bf6:	de bf       	out	0x3e, r29	; 62
     bf8:	0f be       	out	0x3f, r0	; 63
     bfa:	cd bf       	out	0x3d, r28	; 61
     bfc:	cf 91       	pop	r28
     bfe:	df 91       	pop	r29
     c00:	1f 91       	pop	r17
     c02:	0f 91       	pop	r16
     c04:	ff 90       	pop	r15
     c06:	ef 90       	pop	r14
     c08:	df 90       	pop	r13
     c0a:	08 95       	ret

00000c0c <SCSI_DecodeSCSICommand>:
bool SCSI_DecodeSCSICommand(void)
{
	//printf("SCSI_DecodeSCSICommand %i\r\n", CommandBlock.SCSICommandData[0]);
	
	/* Set initial sense data, before the requested command is processed */
	SCSI_SET_SENSE(SCSI_SENSE_KEY_GOOD,
     c0c:	90 91 33 01 	lds	r25, 0x0133
     c10:	90 7f       	andi	r25, 0xF0	; 240
     c12:	90 93 33 01 	sts	0x0133, r25
     c16:	10 92 3d 01 	sts	0x013D, r1
     c1a:	10 92 3e 01 	sts	0x013E, r1
	               SCSI_ASENSE_NO_ADDITIONAL_INFORMATION,
	               SCSI_ASENSEQ_NO_QUALIFIER);

	/* Run the appropriate SCSI command hander function based on the passed command */
	switch (CommandBlock.SCSICommandData[0])
     c1e:	80 91 c9 04 	lds	r24, 0x04C9
     c22:	8e 31       	cpi	r24, 0x1E	; 30
     c24:	09 f4       	brne	.+2      	; 0xc28 <SCSI_DecodeSCSICommand+0x1c>
     c26:	83 c0       	rjmp	.+262    	; 0xd2e <SCSI_DecodeSCSICommand+0x122>
     c28:	8f 31       	cpi	r24, 0x1F	; 31
     c2a:	70 f4       	brcc	.+28     	; 0xc48 <SCSI_DecodeSCSICommand+0x3c>
     c2c:	83 30       	cpi	r24, 0x03	; 3
     c2e:	f1 f0       	breq	.+60     	; 0xc6c <SCSI_DecodeSCSICommand+0x60>
     c30:	84 30       	cpi	r24, 0x04	; 4
     c32:	20 f4       	brcc	.+8      	; 0xc3c <SCSI_DecodeSCSICommand+0x30>
     c34:	88 23       	and	r24, r24
     c36:	09 f4       	brne	.+2      	; 0xc3a <SCSI_DecodeSCSICommand+0x2e>
     c38:	7a c0       	rjmp	.+244    	; 0xd2e <SCSI_DecodeSCSICommand+0x122>
     c3a:	82 c0       	rjmp	.+260    	; 0xd40 <SCSI_DecodeSCSICommand+0x134>
     c3c:	82 31       	cpi	r24, 0x12	; 18
     c3e:	a1 f0       	breq	.+40     	; 0xc68 <SCSI_DecodeSCSICommand+0x5c>
     c40:	8d 31       	cpi	r24, 0x1D	; 29
     c42:	09 f0       	breq	.+2      	; 0xc46 <SCSI_DecodeSCSICommand+0x3a>
     c44:	7d c0       	rjmp	.+250    	; 0xd40 <SCSI_DecodeSCSICommand+0x134>
     c46:	57 c0       	rjmp	.+174    	; 0xcf6 <SCSI_DecodeSCSICommand+0xea>
     c48:	88 32       	cpi	r24, 0x28	; 40
     c4a:	09 f4       	brne	.+2      	; 0xc4e <SCSI_DecodeSCSICommand+0x42>
     c4c:	6d c0       	rjmp	.+218    	; 0xd28 <SCSI_DecodeSCSICommand+0x11c>
     c4e:	89 32       	cpi	r24, 0x29	; 41
     c50:	20 f4       	brcc	.+8      	; 0xc5a <SCSI_DecodeSCSICommand+0x4e>
     c52:	85 32       	cpi	r24, 0x25	; 37
     c54:	09 f0       	breq	.+2      	; 0xc58 <SCSI_DecodeSCSICommand+0x4c>
     c56:	74 c0       	rjmp	.+232    	; 0xd40 <SCSI_DecodeSCSICommand+0x134>
     c58:	0b c0       	rjmp	.+22     	; 0xc70 <SCSI_DecodeSCSICommand+0x64>
     c5a:	8a 32       	cpi	r24, 0x2A	; 42
     c5c:	09 f4       	brne	.+2      	; 0xc60 <SCSI_DecodeSCSICommand+0x54>
     c5e:	62 c0       	rjmp	.+196    	; 0xd24 <SCSI_DecodeSCSICommand+0x118>
     c60:	8f 32       	cpi	r24, 0x2F	; 47
     c62:	09 f0       	breq	.+2      	; 0xc66 <SCSI_DecodeSCSICommand+0x5a>
     c64:	6d c0       	rjmp	.+218    	; 0xd40 <SCSI_DecodeSCSICommand+0x134>
     c66:	63 c0       	rjmp	.+198    	; 0xd2e <SCSI_DecodeSCSICommand+0x122>
	{
		case SCSI_CMD_INQUIRY:
			//printf("INQUIRY\r\n");
			SCSI_Command_Inquiry();			
     c68:	88 de       	rcall	.-752    	; 0x97a <SCSI_Command_Inquiry>
			break;
     c6a:	73 c0       	rjmp	.+230    	; 0xd52 <SCSI_DecodeSCSICommand+0x146>
		case SCSI_CMD_REQUEST_SENSE:
			//printf("REQUEST_SENSE\r\n");
			SCSI_Command_Request_Sense();
     c6c:	0b df       	rcall	.-490    	; 0xa84 <SCSI_Command_Request_Sense>
			break;
     c6e:	71 c0       	rjmp	.+226    	; 0xd52 <SCSI_DecodeSCSICommand+0x146>
static void SCSI_Command_Read_Capacity_10(void)
{
	uint32_t NbBlocks;
	
	/* Get the number of blocks in the SD device */
	NbBlocks = SDCardManager_GetNbBlocks();
     c70:	94 d2       	rcall	.+1320   	; 0x119a <SDCardManager_GetNbBlocks>
	
	/* Send the total number of logical blocks in the current LUN */
	Endpoint_Write_DWord_BE(NbBlocks - 1);
     c72:	61 50       	subi	r22, 0x01	; 1
     c74:	70 40       	sbci	r23, 0x00	; 0
     c76:	80 40       	sbci	r24, 0x00	; 0
     c78:	90 40       	sbci	r25, 0x00	; 0
			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord)
			{
				UEDATX = (DWord >> 24);
     c7a:	29 2f       	mov	r18, r25
     c7c:	33 27       	eor	r19, r19
     c7e:	44 27       	eor	r20, r20
     c80:	55 27       	eor	r21, r21
     c82:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (DWord >> 16);
     c86:	9c 01       	movw	r18, r24
     c88:	44 27       	eor	r20, r20
     c8a:	55 27       	eor	r21, r21
     c8c:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (DWord >> 8);
     c90:	27 2f       	mov	r18, r23
     c92:	38 2f       	mov	r19, r24
     c94:	49 2f       	mov	r20, r25
     c96:	55 27       	eor	r21, r21
     c98:	20 93 f1 00 	sts	0x00F1, r18
				UEDATX = (DWord &  0xFF);
     c9c:	60 93 f1 00 	sts	0x00F1, r22
			 *  \param[in] DWord  Next double word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_DWord_BE(const uint32_t DWord)
			{
				UEDATX = (DWord >> 24);
     ca0:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (DWord >> 16);
     ca4:	10 92 f1 00 	sts	0x00F1, r1
				UEDATX = (DWord >> 8);
     ca8:	82 e0       	ldi	r24, 0x02	; 2
     caa:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (DWord &  0xFF);
     cae:	10 92 f1 00 	sts	0x00F1, r1

	/* Send the logical block size of the device (must be 512 bytes) */
	Endpoint_Write_DWord_BE(VIRTUAL_MEMORY_BLOCK_SIZE);

	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     cb2:	80 91 8a 01 	lds	r24, 0x018A
     cb6:	88 23       	and	r24, r24
     cb8:	09 f0       	breq	.+2      	; 0xcbc <SCSI_DecodeSCSICommand+0xb0>
     cba:	4b c0       	rjmp	.+150    	; 0xd52 <SCSI_DecodeSCSICommand+0x146>
	  return;

	/* Send the endpoint data packet to the host */
	Endpoint_ClearIN();
     cbc:	80 91 e8 00 	lds	r24, 0x00E8
     cc0:	98 2f       	mov	r25, r24
     cc2:	9e 7f       	andi	r25, 0xFE	; 254
     cc4:	90 93 e8 00 	sts	0x00E8, r25
     cc8:	8f 77       	andi	r24, 0x7F	; 127
     cca:	80 93 e8 00 	sts	0x00E8, r24

	/* Succeed the command and update the bytes transferred counter */
	CommandBlock.DataTransferLength -= 8;
     cce:	80 91 c2 04 	lds	r24, 0x04C2
     cd2:	90 91 c3 04 	lds	r25, 0x04C3
     cd6:	a0 91 c4 04 	lds	r26, 0x04C4
     cda:	b0 91 c5 04 	lds	r27, 0x04C5
     cde:	08 97       	sbiw	r24, 0x08	; 8
     ce0:	a1 09       	sbc	r26, r1
     ce2:	b1 09       	sbc	r27, r1
     ce4:	80 93 c2 04 	sts	0x04C2, r24
     ce8:	90 93 c3 04 	sts	0x04C3, r25
     cec:	a0 93 c4 04 	sts	0x04C4, r26
     cf0:	b0 93 c5 04 	sts	0x04C5, r27
     cf4:	2e c0       	rjmp	.+92     	; 0xd52 <SCSI_DecodeSCSICommand+0x146>
 *  supported.
 */
static void SCSI_Command_Send_Diagnostic(void)
{
	/* Check to see if the SELF TEST bit is not set */
	if (!(CommandBlock.SCSICommandData[1] & (1 << 2)))
     cf6:	80 91 ca 04 	lds	r24, 0x04CA
     cfa:	82 fd       	sbrc	r24, 2
     cfc:	05 c0       	rjmp	.+10     	; 0xd08 <SCSI_DecodeSCSICommand+0xfc>
	{
		/* Only self-test supported - update SENSE key and fail the command */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     cfe:	95 60       	ori	r25, 0x05	; 5
     d00:	90 93 33 01 	sts	0x0133, r25
     d04:	84 e2       	ldi	r24, 0x24	; 36
     d06:	23 c0       	rjmp	.+70     	; 0xd4e <SCSI_DecodeSCSICommand+0x142>

		return;
	}
	
	/* Check to see if all attached Dataflash ICs are functional */
	if (!(SDCardManager_CheckDataflashOperation()))
     d08:	96 d3       	rcall	.+1836   	; 0x1436 <SDCardManager_CheckDataflashOperation>
     d0a:	88 23       	and	r24, r24
     d0c:	81 f4       	brne	.+32     	; 0xd2e <SCSI_DecodeSCSICommand+0x122>
	{
		/* Update SENSE key with a hardware error condition and return command fail */
		SCSI_SET_SENSE(SCSI_SENSE_KEY_HARDWARE_ERROR,
     d0e:	80 91 33 01 	lds	r24, 0x0133
     d12:	80 7f       	andi	r24, 0xF0	; 240
     d14:	84 60       	ori	r24, 0x04	; 4
     d16:	80 93 33 01 	sts	0x0133, r24
     d1a:	10 92 3d 01 	sts	0x013D, r1
     d1e:	10 92 3e 01 	sts	0x013E, r1
     d22:	17 c0       	rjmp	.+46     	; 0xd52 <SCSI_DecodeSCSICommand+0x146>
			//printf("SEND_DIAGNOSTIC\r\n");
			SCSI_Command_Send_Diagnostic();
			break;
		case SCSI_CMD_WRITE_10:
			//printf("WRITE_10\r\n");
			SCSI_Command_ReadWrite_10(DATA_WRITE);
     d24:	80 e0       	ldi	r24, 0x00	; 0
     d26:	01 c0       	rjmp	.+2      	; 0xd2a <SCSI_DecodeSCSICommand+0x11e>
			break;
		case SCSI_CMD_READ_10:
			//printf("READ_10\r\n");
			SCSI_Command_ReadWrite_10(DATA_READ);
     d28:	81 e0       	ldi	r24, 0x01	; 1
     d2a:	01 df       	rcall	.-510    	; 0xb2e <SCSI_Command_ReadWrite_10>
			break;
     d2c:	12 c0       	rjmp	.+36     	; 0xd52 <SCSI_DecodeSCSICommand+0x146>
		case SCSI_CMD_TEST_UNIT_READY:
		case SCSI_CMD_PREVENT_ALLOW_MEDIUM_REMOVAL:
		case SCSI_CMD_VERIFY_10:
			/* These commands should just succeed, no handling required */
			CommandBlock.DataTransferLength = 0;
     d2e:	10 92 c2 04 	sts	0x04C2, r1
     d32:	10 92 c3 04 	sts	0x04C3, r1
     d36:	10 92 c4 04 	sts	0x04C4, r1
     d3a:	10 92 c5 04 	sts	0x04C5, r1
			break;
     d3e:	09 c0       	rjmp	.+18     	; 0xd52 <SCSI_DecodeSCSICommand+0x146>
		default:
			/* Update the SENSE key to reflect the invalid command */
			SCSI_SET_SENSE(SCSI_SENSE_KEY_ILLEGAL_REQUEST,
     d40:	80 91 33 01 	lds	r24, 0x0133
     d44:	80 7f       	andi	r24, 0xF0	; 240
     d46:	85 60       	ori	r24, 0x05	; 5
     d48:	80 93 33 01 	sts	0x0133, r24
     d4c:	80 e2       	ldi	r24, 0x20	; 32
     d4e:	80 93 3d 01 	sts	0x013D, r24
		                   SCSI_ASENSE_INVALID_COMMAND,
		                   SCSI_ASENSEQ_NO_QUALIFIER);
			break;
	}
	
	return (SenseData.SenseKey == SCSI_SENSE_KEY_GOOD);
     d52:	90 91 33 01 	lds	r25, 0x0133
     d56:	9f 70       	andi	r25, 0x0F	; 15
     d58:	81 e0       	ldi	r24, 0x01	; 1
     d5a:	09 f0       	breq	.+2      	; 0xd5e <SCSI_DecodeSCSICommand+0x152>
     d5c:	80 e0       	ldi	r24, 0x00	; 0
}
     d5e:	08 95       	ret

00000d60 <SDCardManager_ReadBlockHandler>:
 *  \param[in] BlockAddress  Data block starting address for the read sequence
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */

uint8_t SDCardManager_ReadBlockHandler(uint8_t* buffer, offset_t offset, void* p)
{
     d60:	cf 93       	push	r28
     d62:	df 93       	push	r29
     d64:	ec 01       	movw	r28, r24
	uint8_t i;

	/* Check if the endpoint is currently full */
	if (!(Endpoint_IsReadWriteAllowed()))
     d66:	80 91 e8 00 	lds	r24, 0x00E8
     d6a:	85 fd       	sbrc	r24, 5
     d6c:	0d c0       	rjmp	.+26     	; 0xd88 <SDCardManager_ReadBlockHandler+0x28>
	{
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
     d6e:	80 91 e8 00 	lds	r24, 0x00E8
     d72:	98 2f       	mov	r25, r24
     d74:	9e 7f       	andi	r25, 0xFE	; 254
     d76:	90 93 e8 00 	sts	0x00E8, r25
     d7a:	8f 77       	andi	r24, 0x7F	; 127
     d7c:	80 93 e8 00 	sts	0x00E8, r24
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
     d80:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <Endpoint_WaitUntilReady>
     d84:	88 23       	and	r24, r24
     d86:	a9 f5       	brne	.+106    	; 0xdf2 <SDCardManager_ReadBlockHandler+0x92>
		  return 0;
	}
		
	Endpoint_Write_Byte(buffer[0]);
     d88:	88 81       	ld	r24, Y
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
     d8a:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[1]);
     d8e:	89 81       	ldd	r24, Y+1	; 0x01
     d90:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[2]);
     d94:	8a 81       	ldd	r24, Y+2	; 0x02
     d96:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[3]);
     d9a:	8b 81       	ldd	r24, Y+3	; 0x03
     d9c:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[4]);
     da0:	8c 81       	ldd	r24, Y+4	; 0x04
     da2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[5]);
     da6:	8d 81       	ldd	r24, Y+5	; 0x05
     da8:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[6]);
     dac:	8e 81       	ldd	r24, Y+6	; 0x06
     dae:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[7]);
     db2:	8f 81       	ldd	r24, Y+7	; 0x07
     db4:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[8]);
     db8:	88 85       	ldd	r24, Y+8	; 0x08
     dba:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[9]);
     dbe:	89 85       	ldd	r24, Y+9	; 0x09
     dc0:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[10]);
     dc4:	8a 85       	ldd	r24, Y+10	; 0x0a
     dc6:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[11]);
     dca:	8b 85       	ldd	r24, Y+11	; 0x0b
     dcc:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[12]);
     dd0:	8c 85       	ldd	r24, Y+12	; 0x0c
     dd2:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[13]);
     dd6:	8d 85       	ldd	r24, Y+13	; 0x0d
     dd8:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[14]);
     ddc:	8e 85       	ldd	r24, Y+14	; 0x0e
     dde:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_Write_Byte(buffer[15]);
     de2:	8f 85       	ldd	r24, Y+15	; 0x0f
     de4:	80 93 f1 00 	sts	0x00F1, r24
	
	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
     de8:	80 91 8a 01 	lds	r24, 0x018A
 *
 *  \param[in] BlockAddress  Data block starting address for the read sequence
 *  \param[in] TotalBlocks   Number of blocks of data to read
 */

uint8_t SDCardManager_ReadBlockHandler(uint8_t* buffer, offset_t offset, void* p)
     dec:	91 e0       	ldi	r25, 0x01	; 1
     dee:	89 27       	eor	r24, r25
     df0:	01 c0       	rjmp	.+2      	; 0xdf4 <SDCardManager_ReadBlockHandler+0x94>
		/* Clear the endpoint bank to send its contents to the host */
		Endpoint_ClearIN();
		
		/* Wait until the endpoint is ready for more data */
		if (Endpoint_WaitUntilReady())
		  return 0;
     df2:	80 e0       	ldi	r24, 0x00	; 0
	/* Check if the current command is being aborted by the host */
	if (IsMassStoreReset)
	  return 0;
	
	return 1;
}
     df4:	df 91       	pop	r29
     df6:	cf 91       	pop	r28
     df8:	08 95       	ret

00000dfa <SDCardManager_WriteBlockHandler>:
 *
 *  \param[in] BlockAddress  Data block starting address for the write sequence
 *  \param[in] TotalBlocks   Number of blocks of data to write
 */
uintptr_t SDCardManager_WriteBlockHandler(uint8_t* buffer, offset_t offset, void* p)
{
     dfa:	cf 93       	push	r28
     dfc:	df 93       	push	r29
     dfe:	ec 01       	movw	r28, r24
	/* Check if the endpoint is currently empty */
	if (!(Endpoint_IsReadWriteAllowed()))
     e00:	80 91 e8 00 	lds	r24, 0x00E8
     e04:	85 fd       	sbrc	r24, 5
     e06:	0d c0       	rjmp	.+26     	; 0xe22 <SDCardManager_WriteBlockHandler+0x28>
	{
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
     e08:	80 91 e8 00 	lds	r24, 0x00E8
     e0c:	98 2f       	mov	r25, r24
     e0e:	9b 7f       	andi	r25, 0xFB	; 251
     e10:	90 93 e8 00 	sts	0x00E8, r25
     e14:	8f 77       	andi	r24, 0x7F	; 127
     e16:	80 93 e8 00 	sts	0x00E8, r24
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
     e1a:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <Endpoint_WaitUntilReady>
     e1e:	88 23       	and	r24, r24
     e20:	99 f5       	brne	.+102    	; 0xe88 <SDCardManager_WriteBlockHandler+0x8e>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
     e22:	80 91 f1 00 	lds	r24, 0x00F1
		  return 0;
	}
	
	/* Write one 16-byte chunk of data to the dataflash */
	buffer[0] = Endpoint_Read_Byte();
     e26:	88 83       	st	Y, r24
     e28:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[1] = Endpoint_Read_Byte();
     e2c:	89 83       	std	Y+1, r24	; 0x01
     e2e:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[2] = Endpoint_Read_Byte();
     e32:	8a 83       	std	Y+2, r24	; 0x02
     e34:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[3] = Endpoint_Read_Byte();
     e38:	8b 83       	std	Y+3, r24	; 0x03
     e3a:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[4] = Endpoint_Read_Byte();
     e3e:	8c 83       	std	Y+4, r24	; 0x04
     e40:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[5] = Endpoint_Read_Byte();
     e44:	8d 83       	std	Y+5, r24	; 0x05
     e46:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[6] = Endpoint_Read_Byte();
     e4a:	8e 83       	std	Y+6, r24	; 0x06
     e4c:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[7] = Endpoint_Read_Byte();
     e50:	8f 83       	std	Y+7, r24	; 0x07
     e52:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[8] = Endpoint_Read_Byte();
     e56:	88 87       	std	Y+8, r24	; 0x08
     e58:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[9] = Endpoint_Read_Byte();
     e5c:	89 87       	std	Y+9, r24	; 0x09
     e5e:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[10] = Endpoint_Read_Byte();
     e62:	8a 87       	std	Y+10, r24	; 0x0a
     e64:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[11] = Endpoint_Read_Byte();
     e68:	8b 87       	std	Y+11, r24	; 0x0b
     e6a:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[12] = Endpoint_Read_Byte();
     e6e:	8c 87       	std	Y+12, r24	; 0x0c
     e70:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[13] = Endpoint_Read_Byte();
     e74:	8d 87       	std	Y+13, r24	; 0x0d
     e76:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[14] = Endpoint_Read_Byte();
     e7a:	8e 87       	std	Y+14, r24	; 0x0e
     e7c:	80 91 f1 00 	lds	r24, 0x00F1
	buffer[15] = Endpoint_Read_Byte();
     e80:	8f 87       	std	Y+15, r24	; 0x0f
	
	return 16;
     e82:	20 e1       	ldi	r18, 0x10	; 16
     e84:	30 e0       	ldi	r19, 0x00	; 0
     e86:	02 c0       	rjmp	.+4      	; 0xe8c <SDCardManager_WriteBlockHandler+0x92>
		/* Clear the current endpoint bank */
		Endpoint_ClearOUT();
		
		/* Wait until the host has sent another packet */
		if (Endpoint_WaitUntilReady())
		  return 0;
     e88:	20 e0       	ldi	r18, 0x00	; 0
     e8a:	30 e0       	ldi	r19, 0x00	; 0
	buffer[13] = Endpoint_Read_Byte();
	buffer[14] = Endpoint_Read_Byte();
	buffer[15] = Endpoint_Read_Byte();
	
	return 16;
}
     e8c:	c9 01       	movw	r24, r18
     e8e:	df 91       	pop	r29
     e90:	cf 91       	pop	r28
     e92:	08 95       	ret

00000e94 <SDCardManager_Init>:

static uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry);
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 

void SDCardManager_Init(void)
{
     e94:	0f 93       	push	r16
     e96:	1f 93       	push	r17
     e98:	df 93       	push	r29
     e9a:	cf 93       	push	r28
     e9c:	cd b7       	in	r28, 0x3d	; 61
     e9e:	de b7       	in	r29, 0x3e	; 62
     ea0:	e1 97       	sbiw	r28, 0x31	; 49
     ea2:	0f b6       	in	r0, 0x3f	; 63
     ea4:	f8 94       	cli
     ea6:	de bf       	out	0x3e, r29	; 62
     ea8:	0f be       	out	0x3f, r0	; 63
     eaa:	cd bf       	out	0x3d, r28	; 61
	while(!sd_raw_init())
		printf_P(PSTR("MMC/SD initialization failed\r\n"));
     eac:	07 e5       	ldi	r16, 0x57	; 87
     eae:	12 e0       	ldi	r17, 0x02	; 2
static uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry);
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 

void SDCardManager_Init(void)
{
	while(!sd_raw_init())
     eb0:	09 c0       	rjmp	.+18     	; 0xec4 <SDCardManager_Init+0x30>
		printf_P(PSTR("MMC/SD initialization failed\r\n"));
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <SDCardManager_Init+0x20>
     eb4:	ed b7       	in	r30, 0x3d	; 61
     eb6:	fe b7       	in	r31, 0x3e	; 62
     eb8:	12 83       	std	Z+2, r17	; 0x02
     eba:	01 83       	std	Z+1, r16	; 0x01
     ebc:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
     ec0:	0f 90       	pop	r0
     ec2:	0f 90       	pop	r0
static uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry);
static struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name); 

void SDCardManager_Init(void)
{
	while(!sd_raw_init())
     ec4:	90 d5       	rcall	.+2848   	; 0x19e6 <sd_raw_init>
     ec6:	88 23       	and	r24, r24
     ec8:	a1 f3       	breq	.-24     	; 0xeb2 <SDCardManager_Init+0x1e>
		printf_P(PSTR("MMC/SD initialization failed\r\n"));

	/* open first partition */
        struct partition_struct* partition = partition_open(sd_raw_read,
     eca:	85 e9       	ldi	r24, 0x95	; 149
     ecc:	9a e0       	ldi	r25, 0x0A	; 10
     ece:	6c e2       	ldi	r22, 0x2C	; 44
     ed0:	7c e0       	ldi	r23, 0x0C	; 12
     ed2:	43 ec       	ldi	r20, 0xC3	; 195
     ed4:	5d e0       	ldi	r21, 0x0D	; 13
     ed6:	28 e7       	ldi	r18, 0x78	; 120
     ed8:	3f e0       	ldi	r19, 0x0F	; 15
     eda:	00 e0       	ldi	r16, 0x00	; 0
     edc:	0e 94 5f 11 	call	0x22be	; 0x22be <partition_open>
                                                            0,
#endif
                                                            0
                                                           );

        if(!partition)
     ee0:	00 97       	sbiw	r24, 0x00	; 0
     ee2:	89 f4       	brne	.+34     	; 0xf06 <SDCardManager_Init+0x72>
        {
            /* If the partition did not open, assume the storage device
             * is a "superfloppy", i.e. has no MBR.
             */
            partition = partition_open(sd_raw_read,
     ee4:	85 e9       	ldi	r24, 0x95	; 149
     ee6:	9a e0       	ldi	r25, 0x0A	; 10
     ee8:	6c e2       	ldi	r22, 0x2C	; 44
     eea:	7c e0       	ldi	r23, 0x0C	; 12
     eec:	43 ec       	ldi	r20, 0xC3	; 195
     eee:	5d e0       	ldi	r21, 0x0D	; 13
     ef0:	28 e7       	ldi	r18, 0x78	; 120
     ef2:	3f e0       	ldi	r19, 0x0F	; 15
     ef4:	0f ef       	ldi	r16, 0xFF	; 255
     ef6:	0e 94 5f 11 	call	0x22be	; 0x22be <partition_open>
                                       0,
                                       0,
#endif
                                       -1
                                      );
            if(!partition)
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	21 f4       	brne	.+8      	; 0xf06 <SDCardManager_Init+0x72>
            {
#if DEBUG
                printf_P(PSTR("opening partition failed\r\n"));
     efe:	00 d0       	rcall	.+0      	; 0xf00 <SDCardManager_Init+0x6c>
     f00:	8c e3       	ldi	r24, 0x3C	; 60
     f02:	92 e0       	ldi	r25, 0x02	; 2
     f04:	24 c0       	rjmp	.+72     	; 0xf4e <SDCardManager_Init+0xba>
                return;
            }
        }

        /* open file system */
        fs = fat_open(partition);
     f06:	0e 94 37 1f 	call	0x3e6e	; 0x3e6e <fat_open>
     f0a:	90 93 bd 01 	sts	0x01BD, r25
     f0e:	80 93 bc 01 	sts	0x01BC, r24
        if(!fs)
     f12:	00 97       	sbiw	r24, 0x00	; 0
     f14:	21 f4       	brne	.+8      	; 0xf1e <SDCardManager_Init+0x8a>
        {
#if DEBUG
            printf_P(PSTR("opening filesystem failed\r\n"));
     f16:	00 d0       	rcall	.+0      	; 0xf18 <SDCardManager_Init+0x84>
     f18:	80 e2       	ldi	r24, 0x20	; 32
     f1a:	92 e0       	ldi	r25, 0x02	; 2
     f1c:	18 c0       	rjmp	.+48     	; 0xf4e <SDCardManager_Init+0xba>
            return;
        }

        /* open root directory */
        struct fat_dir_entry_struct directory;
        fat_get_dir_entry_of_path(fs, "/", &directory);
     f1e:	63 e4       	ldi	r22, 0x43	; 67
     f20:	71 e0       	ldi	r23, 0x01	; 1
     f22:	8e 01       	movw	r16, r28
     f24:	0f 5f       	subi	r16, 0xFF	; 255
     f26:	1f 4f       	sbci	r17, 0xFF	; 255
     f28:	a8 01       	movw	r20, r16
     f2a:	0e 94 a4 2a 	call	0x5548	; 0x5548 <fat_get_dir_entry_of_path>

        dd = fat_open_dir(fs, &directory);
     f2e:	80 91 bc 01 	lds	r24, 0x01BC
     f32:	90 91 bd 01 	lds	r25, 0x01BD
     f36:	b8 01       	movw	r22, r16
     f38:	0e 94 53 29 	call	0x52a6	; 0x52a6 <fat_open_dir>
     f3c:	90 93 bf 01 	sts	0x01BF, r25
     f40:	80 93 be 01 	sts	0x01BE, r24
        if(!dd)
     f44:	00 97       	sbiw	r24, 0x00	; 0
     f46:	59 f4       	brne	.+22     	; 0xf5e <SDCardManager_Init+0xca>
        {
#if DEBUG
            printf_P(PSTR("opening root directory failed\r\n"));
     f48:	00 d0       	rcall	.+0      	; 0xf4a <SDCardManager_Init+0xb6>
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	92 e0       	ldi	r25, 0x02	; 2
     f4e:	ed b7       	in	r30, 0x3d	; 61
     f50:	fe b7       	in	r31, 0x3e	; 62
     f52:	92 83       	std	Z+2, r25	; 0x02
     f54:	81 83       	std	Z+1, r24	; 0x01
     f56:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
#endif
            return;
     f5a:	0f 90       	pop	r0
     f5c:	0f 90       	pop	r0
        }

}
     f5e:	e1 96       	adiw	r28, 0x31	; 49
     f60:	0f b6       	in	r0, 0x3f	; 63
     f62:	f8 94       	cli
     f64:	de bf       	out	0x3e, r29	; 62
     f66:	0f be       	out	0x3f, r0	; 63
     f68:	cd bf       	out	0x3d, r28	; 61
     f6a:	cf 91       	pop	r28
     f6c:	df 91       	pop	r29
     f6e:	1f 91       	pop	r17
     f70:	0f 91       	pop	r16
     f72:	08 95       	ret

00000f74 <UMeter_Init>:


void UMeter_Init(void)
{
     f74:	df 93       	push	r29
     f76:	cf 93       	push	r28
     f78:	cd b7       	in	r28, 0x3d	; 61
     f7a:	de b7       	in	r29, 0x3e	; 62
     f7c:	e1 97       	sbiw	r28, 0x31	; 49
     f7e:	0f b6       	in	r0, 0x3f	; 63
     f80:	f8 94       	cli
     f82:	de bf       	out	0x3e, r29	; 62
     f84:	0f be       	out	0x3f, r0	; 63
     f86:	cd bf       	out	0x3d, r28	; 61
  // create file
  struct fat_dir_entry_struct file_entry;
  if(!fat_create_file(dd, "umeter.txt", &file_entry))
     f88:	80 91 be 01 	lds	r24, 0x01BE
     f8c:	90 91 bf 01 	lds	r25, 0x01BF
     f90:	65 e4       	ldi	r22, 0x45	; 69
     f92:	71 e0       	ldi	r23, 0x01	; 1
     f94:	ae 01       	movw	r20, r28
     f96:	4f 5f       	subi	r20, 0xFF	; 255
     f98:	5f 4f       	sbci	r21, 0xFF	; 255
     f9a:	0e 94 3d 2b 	call	0x567a	; 0x567a <fat_create_file>
     f9e:	88 23       	and	r24, r24
     fa0:	59 f4       	brne	.+22     	; 0xfb8 <UMeter_Init+0x44>
  {
      printf_P(PSTR("error creating file\r\n"));
     fa2:	00 d0       	rcall	.+0      	; 0xfa4 <UMeter_Init+0x30>
     fa4:	8a ee       	ldi	r24, 0xEA	; 234
     fa6:	91 e0       	ldi	r25, 0x01	; 1
     fa8:	ed b7       	in	r30, 0x3d	; 61
     faa:	fe b7       	in	r31, 0x3e	; 62
     fac:	92 83       	std	Z+2, r25	; 0x02
     fae:	81 83       	std	Z+1, r24	; 0x01
     fb0:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
     fb4:	0f 90       	pop	r0
     fb6:	0f 90       	pop	r0
  }

}
     fb8:	e1 96       	adiw	r28, 0x31	; 49
     fba:	0f b6       	in	r0, 0x3f	; 63
     fbc:	f8 94       	cli
     fbe:	de bf       	out	0x3e, r29	; 62
     fc0:	0f be       	out	0x3f, r0	; 63
     fc2:	cd bf       	out	0x3d, r28	; 61
     fc4:	cf 91       	pop	r28
     fc6:	df 91       	pop	r29
     fc8:	08 95       	ret

00000fca <UMeter_Task>:


void UMeter_Task(void)
{
     fca:	8f 92       	push	r8
     fcc:	9f 92       	push	r9
     fce:	af 92       	push	r10
     fd0:	bf 92       	push	r11
     fd2:	cf 92       	push	r12
     fd4:	df 92       	push	r13
     fd6:	ef 92       	push	r14
     fd8:	ff 92       	push	r15
     fda:	0f 93       	push	r16
     fdc:	1f 93       	push	r17
     fde:	df 93       	push	r29
     fe0:	cf 93       	push	r28
     fe2:	cd b7       	in	r28, 0x3d	; 61
     fe4:	de b7       	in	r29, 0x3e	; 62
     fe6:	e9 97       	sbiw	r28, 0x39	; 57
     fe8:	0f b6       	in	r0, 0x3f	; 63
     fea:	f8 94       	cli
     fec:	de bf       	out	0x3e, r29	; 62
     fee:	0f be       	out	0x3f, r0	; 63
     ff0:	cd bf       	out	0x3d, r28	; 61
  //static int x=1;
  unsigned int n, j, adc;
  float volts;
  unsigned char buff[8];

  printf_P(PSTR("writing...\r\n"));
     ff2:	00 d0       	rcall	.+0      	; 0xff4 <UMeter_Task+0x2a>
     ff4:	8d ed       	ldi	r24, 0xDD	; 221
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	ed b7       	in	r30, 0x3d	; 61
     ffa:	fe b7       	in	r31, 0x3e	; 62
     ffc:	92 83       	std	Z+2, r25	; 0x02
     ffe:	81 83       	std	Z+1, r24	; 0x01
    1000:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
  
  // search file in current directory and open it
  struct fat_file_struct* fd = open_file_in_dir(fs, dd, "umeter.txt");
    1004:	c0 90 bc 01 	lds	r12, 0x01BC
    1008:	d0 90 bd 01 	lds	r13, 0x01BD
    100c:	e0 90 be 01 	lds	r14, 0x01BE
    1010:	f0 90 bf 01 	lds	r15, 0x01BF
    1014:	0f 90       	pop	r0
    1016:	0f 90       	pop	r0
}

struct fat_file_struct* open_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name)
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
    1018:	8e 01       	movw	r16, r28
    101a:	07 5f       	subi	r16, 0xF7	; 247
    101c:	1f 4f       	sbci	r17, 0xFF	; 255
    101e:	12 c0       	rjmp	.+36     	; 0x1044 <UMeter_Task+0x7a>

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    {
        if(strcmp(dir_entry->long_name, name) == 0)
    1020:	c8 01       	movw	r24, r16
    1022:	65 e4       	ldi	r22, 0x45	; 69
    1024:	71 e0       	ldi	r23, 0x01	; 1
    1026:	0e 94 06 33 	call	0x660c	; 0x660c <strcmp>
    102a:	00 97       	sbiw	r24, 0x00	; 0
    102c:	59 f4       	brne	.+22     	; 0x1044 <UMeter_Task+0x7a>
        {
            fat_reset_dir(dd);
    102e:	c7 01       	movw	r24, r14
    1030:	0e 94 2c 2b 	call	0x5658	; 0x5658 <fat_reset_dir>
{
    struct fat_dir_entry_struct file_entry;
    if(!find_file_in_dir(fs, dd, name, &file_entry))
        return 0;

    return fat_open_file(fs, &file_entry);
    1034:	c6 01       	movw	r24, r12
    1036:	b8 01       	movw	r22, r16
    1038:	0e 94 18 23 	call	0x4630	; 0x4630 <fat_open_file>
    103c:	7c 01       	movw	r14, r24

  printf_P(PSTR("writing...\r\n"));
  
  // search file in current directory and open it
  struct fat_file_struct* fd = open_file_in_dir(fs, dd, "umeter.txt");
  if(!fd)
    103e:	00 97       	sbiw	r24, 0x00	; 0
    1040:	99 f4       	brne	.+38     	; 0x1068 <UMeter_Task+0x9e>
    1042:	06 c0       	rjmp	.+12     	; 0x1050 <UMeter_Task+0x86>
  fat_close_file(fd);
}

uint8_t find_file_in_dir(struct fat_fs_struct* fs, struct fat_dir_struct* dd, const char* name, struct fat_dir_entry_struct* dir_entry)
{
    while(fat_read_dir(dd, dir_entry))
    1044:	c7 01       	movw	r24, r14
    1046:	b8 01       	movw	r22, r16
    1048:	0e 94 9a 29 	call	0x5334	; 0x5334 <fat_read_dir>
    104c:	88 23       	and	r24, r24
    104e:	41 f7       	brne	.-48     	; 0x1020 <UMeter_Task+0x56>
  
  // search file in current directory and open it
  struct fat_file_struct* fd = open_file_in_dir(fs, dd, "umeter.txt");
  if(!fd)
  {
      printf_P(PSTR("error opening file\r\n"));
    1050:	00 d0       	rcall	.+0      	; 0x1052 <UMeter_Task+0x88>
    1052:	88 ec       	ldi	r24, 0xC8	; 200
    1054:	91 e0       	ldi	r25, 0x01	; 1
    1056:	ed b7       	in	r30, 0x3d	; 61
    1058:	fe b7       	in	r31, 0x3e	; 62
    105a:	92 83       	std	Z+2, r25	; 0x02
    105c:	81 83       	std	Z+1, r24	; 0x01
    105e:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
      return;
    1062:	0f 90       	pop	r0
    1064:	0f 90       	pop	r0
    1066:	86 c0       	rjmp	.+268    	; 0x1174 <UMeter_Task+0x1aa>
  }

  // seek to EOF to append
  while(fat_read_file(fd, buff, sizeof(buff)) == sizeof(buff));
    1068:	8e 01       	movw	r16, r28
    106a:	0f 5f       	subi	r16, 0xFF	; 255
    106c:	1f 4f       	sbci	r17, 0xFF	; 255
    106e:	c7 01       	movw	r24, r14
    1070:	b8 01       	movw	r22, r16
    1072:	48 e0       	ldi	r20, 0x08	; 8
    1074:	50 e0       	ldi	r21, 0x00	; 0
    1076:	0e 94 62 23 	call	0x46c4	; 0x46c4 <fat_read_file>
    107a:	88 30       	cpi	r24, 0x08	; 8
    107c:	91 05       	cpc	r25, r1
    107e:	b9 f3       	breq	.-18     	; 0x106e <UMeter_Task+0xa4>

  //int n = sprintf(buff, "line %d\n", x++);

  // read sensor values
  printf("sensors = ");
    1080:	00 d0       	rcall	.+0      	; 0x1082 <UMeter_Task+0xb8>
    1082:	80 e5       	ldi	r24, 0x50	; 80
    1084:	91 e0       	ldi	r25, 0x01	; 1
    1086:	ed b7       	in	r30, 0x3d	; 61
    1088:	fe b7       	in	r31, 0x3e	; 62
    108a:	92 83       	std	Z+2, r25	; 0x02
    108c:	81 83       	std	Z+1, r24	; 0x01
    108e:	0e 94 37 33 	call	0x666e	; 0x666e <printf>
    1092:	0f 90       	pop	r0
    1094:	0f 90       	pop	r0
  for(j=1; j < 5; j++)
    1096:	91 e0       	ldi	r25, 0x01	; 1
    1098:	c9 2e       	mov	r12, r25
    109a:	d1 2c       	mov	r13, r1
  {
    select_sensor(j);
    adc = adc_conversion();
    volts = adc*2.56/1023*2; // v_in = ADC_value * Vref / 2^10-1 * volt div. scaler
    n = float2str(volts, buff);
    109c:	5e 01       	movw	r10, r28
    109e:	08 94       	sec
    10a0:	a1 1c       	adc	r10, r1
    10a2:	b1 1c       	adc	r11, r1
    printf("%sV  ", buff);
    10a4:	8b e5       	ldi	r24, 0x5B	; 91
    10a6:	88 2e       	mov	r8, r24
    10a8:	81 e0       	ldi	r24, 0x01	; 1
    10aa:	98 2e       	mov	r9, r24

  // read sensor values
  printf("sensors = ");
  for(j=1; j < 5; j++)
  {
    select_sensor(j);
    10ac:	c6 01       	movw	r24, r12
    10ae:	0e 94 dc 2b 	call	0x57b8	; 0x57b8 <select_sensor>
    adc = adc_conversion();
    10b2:	0e 94 be 2b 	call	0x577c	; 0x577c <adc_conversion>
    volts = adc*2.56/1023*2; // v_in = ADC_value * Vref / 2^10-1 * volt div. scaler
    10b6:	bc 01       	movw	r22, r24
    10b8:	80 e0       	ldi	r24, 0x00	; 0
    10ba:	90 e0       	ldi	r25, 0x00	; 0
    10bc:	0e 94 5b 31 	call	0x62b6	; 0x62b6 <__floatunsisf>
    10c0:	2a e0       	ldi	r18, 0x0A	; 10
    10c2:	37 ed       	ldi	r19, 0xD7	; 215
    10c4:	43 e2       	ldi	r20, 0x23	; 35
    10c6:	50 e4       	ldi	r21, 0x40	; 64
    10c8:	0e 94 e9 31 	call	0x63d2	; 0x63d2 <__mulsf3>
    10cc:	20 e0       	ldi	r18, 0x00	; 0
    10ce:	30 ec       	ldi	r19, 0xC0	; 192
    10d0:	4f e7       	ldi	r20, 0x7F	; 127
    10d2:	54 e4       	ldi	r21, 0x44	; 68
    10d4:	0e 94 c2 30 	call	0x6184	; 0x6184 <__divsf3>
    10d8:	9b 01       	movw	r18, r22
    10da:	ac 01       	movw	r20, r24
    10dc:	0e 94 5e 30 	call	0x60bc	; 0x60bc <__addsf3>
    n = float2str(volts, buff);
    10e0:	a5 01       	movw	r20, r10
    10e2:	0e 94 f6 2b 	call	0x57ec	; 0x57ec <float2str>
    10e6:	8c 01       	movw	r16, r24
    printf("%sV  ", buff);
    10e8:	00 d0       	rcall	.+0      	; 0x10ea <UMeter_Task+0x120>
    10ea:	00 d0       	rcall	.+0      	; 0x10ec <UMeter_Task+0x122>
    10ec:	ed b7       	in	r30, 0x3d	; 61
    10ee:	fe b7       	in	r31, 0x3e	; 62
    10f0:	92 82       	std	Z+2, r9	; 0x02
    10f2:	81 82       	std	Z+1, r8	; 0x01
    10f4:	b4 82       	std	Z+4, r11	; 0x04
    10f6:	a3 82       	std	Z+3, r10	; 0x03
    10f8:	0e 94 37 33 	call	0x666e	; 0x666e <printf>

    // write buff to file
    if(fat_write_file(fd, buff, n) != n)
    10fc:	0f 90       	pop	r0
    10fe:	0f 90       	pop	r0
    1100:	0f 90       	pop	r0
    1102:	0f 90       	pop	r0
    1104:	c7 01       	movw	r24, r14
    1106:	b5 01       	movw	r22, r10
    1108:	a8 01       	movw	r20, r16
    110a:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <fat_write_file>
    110e:	80 17       	cp	r24, r16
    1110:	91 07       	cpc	r25, r17
    1112:	61 f0       	breq	.+24     	; 0x112c <UMeter_Task+0x162>
    {
	printf_P(PSTR("error writing to file\r\n"));
    1114:	00 d0       	rcall	.+0      	; 0x1116 <UMeter_Task+0x14c>
    1116:	80 eb       	ldi	r24, 0xB0	; 176
    1118:	91 e0       	ldi	r25, 0x01	; 1
    111a:	ed b7       	in	r30, 0x3d	; 61
    111c:	fe b7       	in	r31, 0x3e	; 62
    111e:	92 83       	std	Z+2, r25	; 0x02
    1120:	81 83       	std	Z+1, r24	; 0x01
    1122:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
	break;
    1126:	0f 90       	pop	r0
    1128:	0f 90       	pop	r0
    112a:	08 c0       	rjmp	.+16     	; 0x113c <UMeter_Task+0x172>

  //int n = sprintf(buff, "line %d\n", x++);

  // read sensor values
  printf("sensors = ");
  for(j=1; j < 5; j++)
    112c:	08 94       	sec
    112e:	c1 1c       	adc	r12, r1
    1130:	d1 1c       	adc	r13, r1
    1132:	f5 e0       	ldi	r31, 0x05	; 5
    1134:	cf 16       	cp	r12, r31
    1136:	d1 04       	cpc	r13, r1
    1138:	09 f0       	breq	.+2      	; 0x113c <UMeter_Task+0x172>
    113a:	b8 cf       	rjmp	.-144    	; 0x10ac <UMeter_Task+0xe2>
    {
	printf_P(PSTR("error writing to file\r\n"));
	break;
    }
  }
  printf("\r\n");
    113c:	81 e6       	ldi	r24, 0x61	; 97
    113e:	91 e0       	ldi	r25, 0x01	; 1
    1140:	0e 94 69 33 	call	0x66d2	; 0x66d2 <puts>
  
  // write newline
  if(fat_write_file(fd, "\n", 1) != 1)
    1144:	c7 01       	movw	r24, r14
    1146:	63 e6       	ldi	r22, 0x63	; 99
    1148:	71 e0       	ldi	r23, 0x01	; 1
    114a:	41 e0       	ldi	r20, 0x01	; 1
    114c:	50 e0       	ldi	r21, 0x00	; 0
    114e:	0e 94 2b 26 	call	0x4c56	; 0x4c56 <fat_write_file>
    1152:	81 30       	cpi	r24, 0x01	; 1
    1154:	91 05       	cpc	r25, r1
    1156:	59 f0       	breq	.+22     	; 0x116e <UMeter_Task+0x1a4>
  {
      printf_P(PSTR("error writing to file\r\n"));
    1158:	00 d0       	rcall	.+0      	; 0x115a <UMeter_Task+0x190>
    115a:	88 e9       	ldi	r24, 0x98	; 152
    115c:	91 e0       	ldi	r25, 0x01	; 1
    115e:	ed b7       	in	r30, 0x3d	; 61
    1160:	fe b7       	in	r31, 0x3e	; 62
    1162:	92 83       	std	Z+2, r25	; 0x02
    1164:	81 83       	std	Z+1, r24	; 0x01
    1166:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
    116a:	0f 90       	pop	r0
    116c:	0f 90       	pop	r0
  }

  fat_close_file(fd);
    116e:	c7 01       	movw	r24, r14
    1170:	0e 94 5c 23 	call	0x46b8	; 0x46b8 <fat_close_file>
}
    1174:	e9 96       	adiw	r28, 0x39	; 57
    1176:	0f b6       	in	r0, 0x3f	; 63
    1178:	f8 94       	cli
    117a:	de bf       	out	0x3e, r29	; 62
    117c:	0f be       	out	0x3f, r0	; 63
    117e:	cd bf       	out	0x3d, r28	; 61
    1180:	cf 91       	pop	r28
    1182:	df 91       	pop	r29
    1184:	1f 91       	pop	r17
    1186:	0f 91       	pop	r16
    1188:	ff 90       	pop	r15
    118a:	ef 90       	pop	r14
    118c:	df 90       	pop	r13
    118e:	cf 90       	pop	r12
    1190:	bf 90       	pop	r11
    1192:	af 90       	pop	r10
    1194:	9f 90       	pop	r9
    1196:	8f 90       	pop	r8
    1198:	08 95       	ret

0000119a <SDCardManager_GetNbBlocks>:

    return fat_open_file(fs, &file_entry);
}

uint32_t SDCardManager_GetNbBlocks(void)
{
    119a:	ef 92       	push	r14
    119c:	ff 92       	push	r15
    119e:	0f 93       	push	r16
    11a0:	1f 93       	push	r17
	uint32_t TotalBlocks = 0;
	
	if (CachedTotalBlocks != 0)
    11a2:	e0 90 9b 01 	lds	r14, 0x019B
    11a6:	f0 90 9c 01 	lds	r15, 0x019C
    11aa:	00 91 9d 01 	lds	r16, 0x019D
    11ae:	10 91 9e 01 	lds	r17, 0x019E
    11b2:	e1 14       	cp	r14, r1
    11b4:	f1 04       	cpc	r15, r1
    11b6:	01 05       	cpc	r16, r1
    11b8:	11 05       	cpc	r17, r1
    11ba:	79 f5       	brne	.+94     	; 0x121a <SDCardManager_GetNbBlocks+0x80>
		return CachedTotalBlocks;
		
	if(!sd_raw_get_info(&disk_info))
    11bc:	8f e9       	ldi	r24, 0x9F	; 159
    11be:	91 e0       	ldi	r25, 0x01	; 1
    11c0:	54 d7       	rcall	.+3752   	; 0x206a <sd_raw_get_info>
    11c2:	88 23       	and	r24, r24
    11c4:	61 f4       	brne	.+24     	; 0x11de <SDCardManager_GetNbBlocks+0x44>
	{
		printf_P(PSTR("Error reading SD card info\r\n"));
    11c6:	00 d0       	rcall	.+0      	; 0x11c8 <SDCardManager_GetNbBlocks+0x2e>
    11c8:	8b e7       	ldi	r24, 0x7B	; 123
    11ca:	91 e0       	ldi	r25, 0x01	; 1
    11cc:	ed b7       	in	r30, 0x3d	; 61
    11ce:	fe b7       	in	r31, 0x3e	; 62
    11d0:	92 83       	std	Z+2, r25	; 0x02
    11d2:	81 83       	std	Z+1, r24	; 0x01
    11d4:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
		return 0;
    11d8:	0f 90       	pop	r0
    11da:	0f 90       	pop	r0
    11dc:	1e c0       	rjmp	.+60     	; 0x121a <SDCardManager_GetNbBlocks+0x80>
	}

	CachedTotalBlocks = disk_info.capacity / 512;
    11de:	20 91 b0 01 	lds	r18, 0x01B0
    11e2:	30 91 b1 01 	lds	r19, 0x01B1
    11e6:	40 91 b2 01 	lds	r20, 0x01B2
    11ea:	50 91 b3 01 	lds	r21, 0x01B3
    11ee:	60 91 b4 01 	lds	r22, 0x01B4
    11f2:	70 91 b5 01 	lds	r23, 0x01B5
    11f6:	80 91 b6 01 	lds	r24, 0x01B6
    11fa:	90 91 b7 01 	lds	r25, 0x01B7
    11fe:	09 e0       	ldi	r16, 0x09	; 9
    1200:	21 d9       	rcall	.-3518   	; 0x444 <__lshrdi3>
    1202:	e2 2e       	mov	r14, r18
    1204:	f3 2e       	mov	r15, r19
    1206:	04 2f       	mov	r16, r20
    1208:	15 2f       	mov	r17, r21
    120a:	e0 92 9b 01 	sts	0x019B, r14
    120e:	f0 92 9c 01 	sts	0x019C, r15
    1212:	00 93 9d 01 	sts	0x019D, r16
    1216:	10 93 9e 01 	sts	0x019E, r17
	//printf_P(PSTR("SD blocks: %li\r\n"), TotalBlocks);
	
	return CachedTotalBlocks;
}
    121a:	b7 01       	movw	r22, r14
    121c:	c8 01       	movw	r24, r16
    121e:	1f 91       	pop	r17
    1220:	0f 91       	pop	r16
    1222:	ff 90       	pop	r15
    1224:	ef 90       	pop	r14
    1226:	08 95       	ret

00001228 <SDCardManager_WriteBlocks>:
	
	return 16;
}

void SDCardManager_WriteBlocks(uint32_t BlockAddress, uint16_t TotalBlocks)
{
    1228:	6f 92       	push	r6
    122a:	7f 92       	push	r7
    122c:	8f 92       	push	r8
    122e:	9f 92       	push	r9
    1230:	af 92       	push	r10
    1232:	bf 92       	push	r11
    1234:	cf 92       	push	r12
    1236:	df 92       	push	r13
    1238:	ef 92       	push	r14
    123a:	ff 92       	push	r15
    123c:	0f 93       	push	r16
    123e:	1f 93       	push	r17
    1240:	cf 93       	push	r28
    1242:	df 93       	push	r29
    1244:	5b 01       	movw	r10, r22
    1246:	6c 01       	movw	r12, r24
    1248:	ea 01       	movw	r28, r20
	bool     UsingSecondBuffer   = false;

	printf_P(PSTR("W %li %i\r\n"), BlockAddress, TotalBlocks);
    124a:	2d b7       	in	r18, 0x3d	; 61
    124c:	3e b7       	in	r19, 0x3e	; 62
    124e:	28 50       	subi	r18, 0x08	; 8
    1250:	30 40       	sbci	r19, 0x00	; 0
    1252:	0f b6       	in	r0, 0x3f	; 63
    1254:	f8 94       	cli
    1256:	3e bf       	out	0x3e, r19	; 62
    1258:	0f be       	out	0x3f, r0	; 63
    125a:	2d bf       	out	0x3d, r18	; 61
    125c:	ed b7       	in	r30, 0x3d	; 61
    125e:	fe b7       	in	r31, 0x3e	; 62
    1260:	31 96       	adiw	r30, 0x01	; 1
    1262:	80 e7       	ldi	r24, 0x70	; 112
    1264:	91 e0       	ldi	r25, 0x01	; 1
    1266:	ad b7       	in	r26, 0x3d	; 61
    1268:	be b7       	in	r27, 0x3e	; 62
    126a:	12 96       	adiw	r26, 0x02	; 2
    126c:	9c 93       	st	X, r25
    126e:	8e 93       	st	-X, r24
    1270:	11 97       	sbiw	r26, 0x01	; 1
    1272:	a2 82       	std	Z+2, r10	; 0x02
    1274:	b3 82       	std	Z+3, r11	; 0x03
    1276:	c4 82       	std	Z+4, r12	; 0x04
    1278:	d5 82       	std	Z+5, r13	; 0x05
    127a:	57 83       	std	Z+7, r21	; 0x07
    127c:	46 83       	std	Z+6, r20	; 0x06
    127e:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
	//printf("\r"); // blink FTDI LED
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    1282:	2d b7       	in	r18, 0x3d	; 61
    1284:	3e b7       	in	r19, 0x3e	; 62
    1286:	28 5f       	subi	r18, 0xF8	; 248
    1288:	3f 4f       	sbci	r19, 0xFF	; 255
    128a:	0f b6       	in	r0, 0x3f	; 63
    128c:	f8 94       	cli
    128e:	3e bf       	out	0x3e, r19	; 62
    1290:	0f be       	out	0x3f, r0	; 63
    1292:	2d bf       	out	0x3d, r18	; 61
    1294:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <Endpoint_WaitUntilReady>
    1298:	88 23       	and	r24, r24
    129a:	d1 f5       	brne	.+116    	; 0x1310 <SDCardManager_WriteBlocks+0xe8>
    129c:	35 01       	movw	r6, r10
    129e:	46 01       	movw	r8, r12
    12a0:	a9 e0       	ldi	r26, 0x09	; 9
    12a2:	66 0c       	add	r6, r6
    12a4:	77 1c       	adc	r7, r7
    12a6:	88 1c       	adc	r8, r8
    12a8:	99 1c       	adc	r9, r9
    12aa:	aa 95       	dec	r26
    12ac:	d1 f7       	brne	.-12     	; 0x12a2 <SDCardManager_WriteBlocks+0x7a>
    12ae:	21 c0       	rjmp	.+66     	; 0x12f2 <SDCardManager_WriteBlocks+0xca>
	  return;
	
	while (TotalBlocks)
	{
		sd_raw_write_interval(BlockAddress *  VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, VIRTUAL_MEMORY_BLOCK_SIZE, &SDCardManager_WriteBlockHandler, NULL);
    12b0:	64 01       	movw	r12, r8
    12b2:	53 01       	movw	r10, r6
    12b4:	93 01       	movw	r18, r6
    12b6:	a6 01       	movw	r20, r12
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	70 e0       	ldi	r23, 0x00	; 0
    12bc:	80 e0       	ldi	r24, 0x00	; 0
    12be:	90 e0       	ldi	r25, 0x00	; 0
    12c0:	0b e8       	ldi	r16, 0x8B	; 139
    12c2:	11 e0       	ldi	r17, 0x01	; 1
    12c4:	e1 2c       	mov	r14, r1
    12c6:	f2 e0       	ldi	r31, 0x02	; 2
    12c8:	ff 2e       	mov	r15, r31
    12ca:	ed ef       	ldi	r30, 0xFD	; 253
    12cc:	ce 2e       	mov	r12, r30
    12ce:	e6 e0       	ldi	r30, 0x06	; 6
    12d0:	de 2e       	mov	r13, r30
    12d2:	aa 24       	eor	r10, r10
    12d4:	bb 24       	eor	r11, r11
    12d6:	0c d6       	rcall	.+3096   	; 0x1ef0 <sd_raw_write_interval>
		
		/* Check if the current command is being aborted by the host */
		if (IsMassStoreReset)
    12d8:	80 91 8a 01 	lds	r24, 0x018A
    12dc:	20 e0       	ldi	r18, 0x00	; 0
    12de:	32 e0       	ldi	r19, 0x02	; 2
    12e0:	40 e0       	ldi	r20, 0x00	; 0
    12e2:	50 e0       	ldi	r21, 0x00	; 0
    12e4:	62 0e       	add	r6, r18
    12e6:	73 1e       	adc	r7, r19
    12e8:	84 1e       	adc	r8, r20
    12ea:	95 1e       	adc	r9, r21
    12ec:	88 23       	and	r24, r24
    12ee:	81 f4       	brne	.+32     	; 0x1310 <SDCardManager_WriteBlocks+0xe8>
		  return;
			
		/* Decrement the blocks remaining counter and reset the sub block counter */
		BlockAddress++;
		TotalBlocks--;
    12f0:	21 97       	sbiw	r28, 0x01	; 1
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    12f2:	20 97       	sbiw	r28, 0x00	; 0
    12f4:	e9 f6       	brne	.-70     	; 0x12b0 <SDCardManager_WriteBlocks+0x88>
		BlockAddress++;
		TotalBlocks--;
	}

	/* If the endpoint is empty, clear it ready for the next packet from the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    12f6:	80 91 e8 00 	lds	r24, 0x00E8
    12fa:	85 fd       	sbrc	r24, 5
    12fc:	09 c0       	rjmp	.+18     	; 0x1310 <SDCardManager_WriteBlocks+0xe8>
	  Endpoint_ClearOUT();
    12fe:	80 91 e8 00 	lds	r24, 0x00E8
    1302:	98 2f       	mov	r25, r24
    1304:	9b 7f       	andi	r25, 0xFB	; 251
    1306:	90 93 e8 00 	sts	0x00E8, r25
    130a:	8f 77       	andi	r24, 0x7F	; 127
    130c:	80 93 e8 00 	sts	0x00E8, r24
}
    1310:	df 91       	pop	r29
    1312:	cf 91       	pop	r28
    1314:	1f 91       	pop	r17
    1316:	0f 91       	pop	r16
    1318:	ff 90       	pop	r15
    131a:	ef 90       	pop	r14
    131c:	df 90       	pop	r13
    131e:	cf 90       	pop	r12
    1320:	bf 90       	pop	r11
    1322:	af 90       	pop	r10
    1324:	9f 90       	pop	r9
    1326:	8f 90       	pop	r8
    1328:	7f 90       	pop	r7
    132a:	6f 90       	pop	r6
    132c:	08 95       	ret

0000132e <SDCardManager_ReadBlocks>:
	
	return 1;
}

void SDCardManager_ReadBlocks(uint32_t BlockAddress, uint16_t TotalBlocks)
{
    132e:	4f 92       	push	r4
    1330:	5f 92       	push	r5
    1332:	6f 92       	push	r6
    1334:	7f 92       	push	r7
    1336:	8f 92       	push	r8
    1338:	9f 92       	push	r9
    133a:	af 92       	push	r10
    133c:	bf 92       	push	r11
    133e:	cf 92       	push	r12
    1340:	df 92       	push	r13
    1342:	ef 92       	push	r14
    1344:	ff 92       	push	r15
    1346:	0f 93       	push	r16
    1348:	1f 93       	push	r17
    134a:	cf 93       	push	r28
    134c:	df 93       	push	r29
    134e:	5b 01       	movw	r10, r22
    1350:	6c 01       	movw	r12, r24
    1352:	ea 01       	movw	r28, r20
	uint16_t CurrPage          = BlockAddress;
	uint16_t CurrPageByte      = 0;

	printf_P(PSTR("R %li %i\r\n"), BlockAddress, TotalBlocks);
    1354:	8d b7       	in	r24, 0x3d	; 61
    1356:	9e b7       	in	r25, 0x3e	; 62
    1358:	08 97       	sbiw	r24, 0x08	; 8
    135a:	0f b6       	in	r0, 0x3f	; 63
    135c:	f8 94       	cli
    135e:	9e bf       	out	0x3e, r25	; 62
    1360:	0f be       	out	0x3f, r0	; 63
    1362:	8d bf       	out	0x3d, r24	; 61
    1364:	ed b7       	in	r30, 0x3d	; 61
    1366:	fe b7       	in	r31, 0x3e	; 62
    1368:	31 96       	adiw	r30, 0x01	; 1
    136a:	85 e6       	ldi	r24, 0x65	; 101
    136c:	91 e0       	ldi	r25, 0x01	; 1
    136e:	ad b7       	in	r26, 0x3d	; 61
    1370:	be b7       	in	r27, 0x3e	; 62
    1372:	12 96       	adiw	r26, 0x02	; 2
    1374:	9c 93       	st	X, r25
    1376:	8e 93       	st	-X, r24
    1378:	11 97       	sbiw	r26, 0x01	; 1
    137a:	a2 82       	std	Z+2, r10	; 0x02
    137c:	b3 82       	std	Z+3, r11	; 0x03
    137e:	c4 82       	std	Z+4, r12	; 0x04
    1380:	d5 82       	std	Z+5, r13	; 0x05
    1382:	57 83       	std	Z+7, r21	; 0x07
    1384:	46 83       	std	Z+6, r20	; 0x06
    1386:	0e 94 49 33 	call	0x6692	; 0x6692 <printf_P>
	//printf("\r"); // blink FTDI LED
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
    138a:	8d b7       	in	r24, 0x3d	; 61
    138c:	9e b7       	in	r25, 0x3e	; 62
    138e:	08 96       	adiw	r24, 0x08	; 8
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	9e bf       	out	0x3e, r25	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	8d bf       	out	0x3d, r24	; 61
    139a:	0e 94 c4 2d 	call	0x5b88	; 0x5b88 <Endpoint_WaitUntilReady>
    139e:	88 23       	and	r24, r24
    13a0:	c9 f5       	brne	.+114    	; 0x1414 <SDCardManager_ReadBlocks+0xe6>
    13a2:	25 01       	movw	r4, r10
    13a4:	36 01       	movw	r6, r12
    13a6:	a9 e0       	ldi	r26, 0x09	; 9
    13a8:	44 0c       	add	r4, r4
    13aa:	55 1c       	adc	r5, r5
    13ac:	66 1c       	adc	r6, r6
    13ae:	77 1c       	adc	r7, r7
    13b0:	aa 95       	dec	r26
    13b2:	d1 f7       	brne	.-12     	; 0x13a8 <SDCardManager_ReadBlocks+0x7a>
    13b4:	20 c0       	rjmp	.+64     	; 0x13f6 <SDCardManager_ReadBlocks+0xc8>
	  return;
	
	while (TotalBlocks)
	{
		/* Read a data block from the SD card */
		sd_raw_read_interval(BlockAddress * VIRTUAL_MEMORY_BLOCK_SIZE, Buffer, 16, 512, &SDCardManager_ReadBlockHandler, NULL);
    13b6:	63 01       	movw	r12, r6
    13b8:	52 01       	movw	r10, r4
    13ba:	92 01       	movw	r18, r4
    13bc:	a6 01       	movw	r20, r12
    13be:	60 e0       	ldi	r22, 0x00	; 0
    13c0:	70 e0       	ldi	r23, 0x00	; 0
    13c2:	80 e0       	ldi	r24, 0x00	; 0
    13c4:	90 e0       	ldi	r25, 0x00	; 0
    13c6:	0b e8       	ldi	r16, 0x8B	; 139
    13c8:	11 e0       	ldi	r17, 0x01	; 1
    13ca:	f0 e1       	ldi	r31, 0x10	; 16
    13cc:	ef 2e       	mov	r14, r31
    13ce:	f1 2c       	mov	r15, r1
    13d0:	c1 2c       	mov	r12, r1
    13d2:	e2 e0       	ldi	r30, 0x02	; 2
    13d4:	de 2e       	mov	r13, r30
    13d6:	b0 eb       	ldi	r27, 0xB0	; 176
    13d8:	ab 2e       	mov	r10, r27
    13da:	b6 e0       	ldi	r27, 0x06	; 6
    13dc:	bb 2e       	mov	r11, r27
    13de:	88 24       	eor	r8, r8
    13e0:	99 24       	eor	r9, r9
    13e2:	3a d2       	rcall	.+1140   	; 0x1858 <sd_raw_read_interval>
		
		/* Decrement the blocks remaining counter */
		BlockAddress++;
		TotalBlocks--;
    13e4:	21 97       	sbiw	r28, 0x01	; 1
    13e6:	80 e0       	ldi	r24, 0x00	; 0
    13e8:	92 e0       	ldi	r25, 0x02	; 2
    13ea:	a0 e0       	ldi	r26, 0x00	; 0
    13ec:	b0 e0       	ldi	r27, 0x00	; 0
    13ee:	48 0e       	add	r4, r24
    13f0:	59 1e       	adc	r5, r25
    13f2:	6a 1e       	adc	r6, r26
    13f4:	7b 1e       	adc	r7, r27
	
	/* Wait until endpoint is ready before continuing */
	if (Endpoint_WaitUntilReady())
	  return;
	
	while (TotalBlocks)
    13f6:	20 97       	sbiw	r28, 0x00	; 0
    13f8:	f1 f6       	brne	.-68     	; 0x13b6 <SDCardManager_ReadBlocks+0x88>
		BlockAddress++;
		TotalBlocks--;
	}
	
	/* If the endpoint is full, send its contents to the host */
	if (!(Endpoint_IsReadWriteAllowed()))
    13fa:	80 91 e8 00 	lds	r24, 0x00E8
    13fe:	85 fd       	sbrc	r24, 5
    1400:	09 c0       	rjmp	.+18     	; 0x1414 <SDCardManager_ReadBlocks+0xe6>
	  Endpoint_ClearIN();
    1402:	80 91 e8 00 	lds	r24, 0x00E8
    1406:	98 2f       	mov	r25, r24
    1408:	9e 7f       	andi	r25, 0xFE	; 254
    140a:	90 93 e8 00 	sts	0x00E8, r25
    140e:	8f 77       	andi	r24, 0x7F	; 127
    1410:	80 93 e8 00 	sts	0x00E8, r24
}
    1414:	df 91       	pop	r29
    1416:	cf 91       	pop	r28
    1418:	1f 91       	pop	r17
    141a:	0f 91       	pop	r16
    141c:	ff 90       	pop	r15
    141e:	ef 90       	pop	r14
    1420:	df 90       	pop	r13
    1422:	cf 90       	pop	r12
    1424:	bf 90       	pop	r11
    1426:	af 90       	pop	r10
    1428:	9f 90       	pop	r9
    142a:	8f 90       	pop	r8
    142c:	7f 90       	pop	r7
    142e:	6f 90       	pop	r6
    1430:	5f 90       	pop	r5
    1432:	4f 90       	pop	r4
    1434:	08 95       	ret

00001436 <SDCardManager_CheckDataflashOperation>:
 *  \return Boolean true if all media chips are working, false otherwise
 */
bool SDCardManager_CheckDataflashOperation(void)
{	
	return true;
}
    1436:	81 e0       	ldi	r24, 0x01	; 1
    1438:	08 95       	ret

0000143a <sd_raw_send_byte>:
 * \param[in] b The byte to sent.
 * \see sd_raw_rec_byte
 */
void sd_raw_send_byte(uint8_t b)
{
    SPDR = b;
    143a:	8e bd       	out	0x2e, r24	; 46
    /* wait for byte to be shifted out */
    while(!(SPSR & (1 << SPIF)));
    143c:	0d b4       	in	r0, 0x2d	; 45
    143e:	07 fe       	sbrs	r0, 7
    1440:	fd cf       	rjmp	.-6      	; 0x143c <sd_raw_send_byte+0x2>
    SPSR &= ~(1 << SPIF);
    1442:	8d b5       	in	r24, 0x2d	; 45
    1444:	8f 77       	andi	r24, 0x7F	; 127
    1446:	8d bd       	out	0x2d, r24	; 45
}
    1448:	08 95       	ret

0000144a <sd_raw_rec_byte>:
 * \see sd_raw_send_byte
 */
uint8_t sd_raw_rec_byte(void)
{
    /* send dummy data for receiving some */
    SPDR = 0xff;
    144a:	8f ef       	ldi	r24, 0xFF	; 255
    144c:	8e bd       	out	0x2e, r24	; 46
    while(!(SPSR & (1 << SPIF)));
    144e:	0d b4       	in	r0, 0x2d	; 45
    1450:	07 fe       	sbrs	r0, 7
    1452:	fd cf       	rjmp	.-6      	; 0x144e <sd_raw_rec_byte+0x4>
    SPSR &= ~(1 << SPIF);
    1454:	8d b5       	in	r24, 0x2d	; 45
    1456:	8f 77       	andi	r24, 0x7F	; 127
    1458:	8d bd       	out	0x2d, r24	; 45

    return SPDR;
    145a:	8e b5       	in	r24, 0x2e	; 46
}
    145c:	08 95       	ret

0000145e <sd_raw_send_command>:
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    145e:	1f 93       	push	r17
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <sd_raw_send_command+0x8>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <sd_raw_send_command+0xa>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	18 2f       	mov	r17, r24
    uint8_t response;

    /* wait some clock cycles */
    sd_raw_rec_byte();
    146e:	4c 83       	std	Y+4, r20	; 0x04
    1470:	5b 83       	std	Y+3, r21	; 0x03
    1472:	6a 83       	std	Y+2, r22	; 0x02
    1474:	79 83       	std	Y+1, r23	; 0x01
    1476:	e9 df       	rcall	.-46     	; 0x144a <sd_raw_rec_byte>

    /* send command via SPI */
    sd_raw_send_byte(0x40 | command);
    1478:	81 2f       	mov	r24, r17
    147a:	80 64       	ori	r24, 0x40	; 64
    147c:	de df       	rcall	.-68     	; 0x143a <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 24) & 0xff);
    147e:	79 81       	ldd	r23, Y+1	; 0x01
    1480:	87 2f       	mov	r24, r23
    1482:	db df       	rcall	.-74     	; 0x143a <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 16) & 0xff);
    1484:	6a 81       	ldd	r22, Y+2	; 0x02
    1486:	86 2f       	mov	r24, r22
    1488:	d8 df       	rcall	.-80     	; 0x143a <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 8) & 0xff);
    148a:	5b 81       	ldd	r21, Y+3	; 0x03
    148c:	85 2f       	mov	r24, r21
    148e:	d5 df       	rcall	.-86     	; 0x143a <sd_raw_send_byte>
    sd_raw_send_byte((arg >> 0) & 0xff);
    1490:	4c 81       	ldd	r20, Y+4	; 0x04
    1492:	84 2f       	mov	r24, r20
    1494:	d2 df       	rcall	.-92     	; 0x143a <sd_raw_send_byte>
    switch(command)
    1496:	11 23       	and	r17, r17
    1498:	19 f0       	breq	.+6      	; 0x14a0 <sd_raw_send_command+0x42>
    149a:	18 30       	cpi	r17, 0x08	; 8
    149c:	39 f4       	brne	.+14     	; 0x14ac <sd_raw_send_command+0x4e>
    149e:	04 c0       	rjmp	.+8      	; 0x14a8 <sd_raw_send_command+0x4a>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
    14a0:	85 e9       	ldi	r24, 0x95	; 149
    14a2:	cb df       	rcall	.-106    	; 0x143a <sd_raw_send_byte>
 * \param[in] command The command to send.
 * \param[in] arg The argument for command.
 * \returns The command answer.
 */
uint8_t sd_raw_send_command(uint8_t command, uint32_t arg)
{
    14a4:	1a e0       	ldi	r17, 0x0A	; 10
    14a6:	04 c0       	rjmp	.+8      	; 0x14b0 <sd_raw_send_command+0x52>
    {
        case CMD_GO_IDLE_STATE:
           sd_raw_send_byte(0x95);
           break;
        case CMD_SEND_IF_COND:
           sd_raw_send_byte(0x87);
    14a8:	87 e8       	ldi	r24, 0x87	; 135
    14aa:	fb cf       	rjmp	.-10     	; 0x14a2 <sd_raw_send_command+0x44>
           break;
        default:
           sd_raw_send_byte(0xff);
    14ac:	8f ef       	ldi	r24, 0xFF	; 255
    14ae:	f9 cf       	rjmp	.-14     	; 0x14a2 <sd_raw_send_command+0x44>
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    {
        response = sd_raw_rec_byte();
    14b0:	cc df       	rcall	.-104    	; 0x144a <sd_raw_rec_byte>
        if(response != 0xff)
    14b2:	8f 3f       	cpi	r24, 0xFF	; 255
    14b4:	11 f4       	brne	.+4      	; 0x14ba <sd_raw_send_command+0x5c>
    14b6:	11 50       	subi	r17, 0x01	; 1
           sd_raw_send_byte(0xff);
           break;
    }
    
    /* receive response */
    for(uint8_t i = 0; i < 10; ++i)
    14b8:	d9 f7       	brne	.-10     	; 0x14b0 <sd_raw_send_command+0x52>
        if(response != 0xff)
            break;
    }

    return response;
}
    14ba:	0f 90       	pop	r0
    14bc:	0f 90       	pop	r0
    14be:	0f 90       	pop	r0
    14c0:	0f 90       	pop	r0
    14c2:	cf 91       	pop	r28
    14c4:	df 91       	pop	r29
    14c6:	1f 91       	pop	r17
    14c8:	08 95       	ret

000014ca <sd_raw_available>:
 * \returns 1 if the card is available, 0 if it is not.
 */
uint8_t sd_raw_available()
{
    return get_pin_available() == 0x00;
}
    14ca:	81 e0       	ldi	r24, 0x01	; 1
    14cc:	08 95       	ret

000014ce <sd_raw_locked>:
 * \returns 1 if the card is locked, 0 if it is not.
 */
uint8_t sd_raw_locked()
{
    return get_pin_locked() == 0x00;
}
    14ce:	80 e0       	ldi	r24, 0x00	; 0
    14d0:	08 95       	ret

000014d2 <sd_raw_sync>:
 *
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write
 */
uint8_t sd_raw_sync()
{
    14d2:	ef 92       	push	r14
    14d4:	ff 92       	push	r15
    14d6:	0f 93       	push	r16
    14d8:	1f 93       	push	r17
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
    14da:	80 91 c1 01 	lds	r24, 0x01C1
    14de:	88 23       	and	r24, r24
    14e0:	e1 f4       	brne	.+56     	; 0x151a <sd_raw_sync+0x48>
        return 1;
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
    14e2:	20 91 c2 01 	lds	r18, 0x01C2
    14e6:	30 91 c3 01 	lds	r19, 0x01C3
    14ea:	40 91 c4 01 	lds	r20, 0x01C4
    14ee:	50 91 c5 01 	lds	r21, 0x01C5
    14f2:	60 91 c6 01 	lds	r22, 0x01C6
    14f6:	70 91 c7 01 	lds	r23, 0x01C7
    14fa:	80 91 c8 01 	lds	r24, 0x01C8
    14fe:	90 91 c9 01 	lds	r25, 0x01C9
    1502:	0a ec       	ldi	r16, 0xCA	; 202
    1504:	11 e0       	ldi	r17, 0x01	; 1
    1506:	e1 2c       	mov	r14, r1
    1508:	e2 e0       	ldi	r30, 0x02	; 2
    150a:	fe 2e       	mov	r15, r30
    150c:	3c d3       	rcall	.+1656   	; 0x1b86 <sd_raw_write>
    150e:	88 23       	and	r24, r24
    1510:	31 f0       	breq	.+12     	; 0x151e <sd_raw_sync+0x4c>
        return 0;
    raw_block_written = 1;
    1512:	81 e0       	ldi	r24, 0x01	; 1
    1514:	80 93 c1 01 	sts	0x01C1, r24
#endif
    return 1;
    1518:	03 c0       	rjmp	.+6      	; 0x1520 <sd_raw_sync+0x4e>
 */
uint8_t sd_raw_sync()
{
#if SD_RAW_WRITE_BUFFERING
    if(raw_block_written)
        return 1;
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	01 c0       	rjmp	.+2      	; 0x1520 <sd_raw_sync+0x4e>
    if(!sd_raw_write(raw_block_address, raw_block, sizeof(raw_block)))
        return 0;
    151e:	80 e0       	ldi	r24, 0x00	; 0
    raw_block_written = 1;
#endif
    return 1;
}
    1520:	1f 91       	pop	r17
    1522:	0f 91       	pop	r16
    1524:	ff 90       	pop	r15
    1526:	ef 90       	pop	r14
    1528:	08 95       	ret

0000152a <sd_raw_read>:
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    152a:	2f 92       	push	r2
    152c:	3f 92       	push	r3
    152e:	4f 92       	push	r4
    1530:	5f 92       	push	r5
    1532:	6f 92       	push	r6
    1534:	7f 92       	push	r7
    1536:	8f 92       	push	r8
    1538:	9f 92       	push	r9
    153a:	af 92       	push	r10
    153c:	bf 92       	push	r11
    153e:	cf 92       	push	r12
    1540:	df 92       	push	r13
    1542:	ef 92       	push	r14
    1544:	ff 92       	push	r15
    1546:	0f 93       	push	r16
    1548:	1f 93       	push	r17
    154a:	df 93       	push	r29
    154c:	cf 93       	push	r28
    154e:	cd b7       	in	r28, 0x3d	; 61
    1550:	de b7       	in	r29, 0x3e	; 62
    1552:	2d 97       	sbiw	r28, 0x0d	; 13
    1554:	0f b6       	in	r0, 0x3f	; 63
    1556:	f8 94       	cli
    1558:	de bf       	out	0x3e, r29	; 62
    155a:	0f be       	out	0x3f, r0	; 63
    155c:	cd bf       	out	0x3d, r28	; 61
    155e:	29 83       	std	Y+1, r18	; 0x01
    1560:	3a 83       	std	Y+2, r19	; 0x02
    1562:	4b 83       	std	Y+3, r20	; 0x03
    1564:	5c 83       	std	Y+4, r21	; 0x04
    1566:	6d 83       	std	Y+5, r22	; 0x05
    1568:	7e 83       	std	Y+6, r23	; 0x06
    156a:	8f 83       	std	Y+7, r24	; 0x07
    156c:	98 87       	std	Y+8, r25	; 0x08
    156e:	68 01       	movw	r12, r16
    1570:	27 01       	movw	r4, r14
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    1572:	52 c1       	rjmp	.+676    	; 0x1818 <sd_raw_read+0x2ee>
    {
        /* determine byte count to read at once */
        block_offset = offset & 0x01ff;
    1574:	29 80       	ldd	r2, Y+1	; 0x01
    1576:	3a 80       	ldd	r3, Y+2	; 0x02
    1578:	af ef       	ldi	r26, 0xFF	; 255
    157a:	ea 2e       	mov	r14, r26
    157c:	a1 e0       	ldi	r26, 0x01	; 1
    157e:	fa 2e       	mov	r15, r26
    1580:	2e 20       	and	r2, r14
    1582:	3f 20       	and	r3, r15
        block_address = offset - block_offset;
    1584:	91 01       	movw	r18, r2
    1586:	69 80       	ldd	r6, Y+1	; 0x01
    1588:	62 18       	sub	r6, r2
    158a:	e1 e0       	ldi	r30, 0x01	; 1
    158c:	f9 80       	ldd	r15, Y+1	; 0x01
    158e:	f6 14       	cp	r15, r6
    1590:	08 f0       	brcs	.+2      	; 0x1594 <sd_raw_read+0x6a>
    1592:	e0 e0       	ldi	r30, 0x00	; 0
    1594:	9a 81       	ldd	r25, Y+2	; 0x02
    1596:	93 1b       	sub	r25, r19
    1598:	81 e0       	ldi	r24, 0x01	; 1
    159a:	2a 81       	ldd	r18, Y+2	; 0x02
    159c:	29 17       	cp	r18, r25
    159e:	08 f0       	brcs	.+2      	; 0x15a2 <sd_raw_read+0x78>
    15a0:	80 e0       	ldi	r24, 0x00	; 0
    15a2:	19 2f       	mov	r17, r25
    15a4:	1e 1b       	sub	r17, r30
    15a6:	21 e0       	ldi	r18, 0x01	; 1
    15a8:	91 17       	cp	r25, r17
    15aa:	08 f0       	brcs	.+2      	; 0x15ae <sd_raw_read+0x84>
    15ac:	20 e0       	ldi	r18, 0x00	; 0
    15ae:	82 2b       	or	r24, r18
    15b0:	9b 81       	ldd	r25, Y+3	; 0x03
    15b2:	b9 2e       	mov	r11, r25
    15b4:	b8 1a       	sub	r11, r24
    15b6:	81 e0       	ldi	r24, 0x01	; 1
    15b8:	9b 15       	cp	r25, r11
    15ba:	08 f0       	brcs	.+2      	; 0x15be <sd_raw_read+0x94>
    15bc:	80 e0       	ldi	r24, 0x00	; 0
    15be:	9c 81       	ldd	r25, Y+4	; 0x04
    15c0:	a9 2e       	mov	r10, r25
    15c2:	a8 1a       	sub	r10, r24
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	9a 15       	cp	r25, r10
    15c8:	08 f0       	brcs	.+2      	; 0x15cc <sd_raw_read+0xa2>
    15ca:	80 e0       	ldi	r24, 0x00	; 0
    15cc:	9d 81       	ldd	r25, Y+5	; 0x05
    15ce:	99 2e       	mov	r9, r25
    15d0:	98 1a       	sub	r9, r24
    15d2:	81 e0       	ldi	r24, 0x01	; 1
    15d4:	99 15       	cp	r25, r9
    15d6:	08 f0       	brcs	.+2      	; 0x15da <sd_raw_read+0xb0>
    15d8:	80 e0       	ldi	r24, 0x00	; 0
    15da:	9e 81       	ldd	r25, Y+6	; 0x06
    15dc:	89 2e       	mov	r8, r25
    15de:	88 1a       	sub	r8, r24
    15e0:	81 e0       	ldi	r24, 0x01	; 1
    15e2:	98 15       	cp	r25, r8
    15e4:	08 f0       	brcs	.+2      	; 0x15e8 <sd_raw_read+0xbe>
    15e6:	80 e0       	ldi	r24, 0x00	; 0
    15e8:	9f 81       	ldd	r25, Y+7	; 0x07
    15ea:	79 2e       	mov	r7, r25
    15ec:	78 1a       	sub	r7, r24
    15ee:	81 e0       	ldi	r24, 0x01	; 1
    15f0:	97 15       	cp	r25, r7
    15f2:	08 f0       	brcs	.+2      	; 0x15f6 <sd_raw_read+0xcc>
    15f4:	80 e0       	ldi	r24, 0x00	; 0
    15f6:	38 85       	ldd	r19, Y+8	; 0x08
    15f8:	38 1b       	sub	r19, r24
    15fa:	39 87       	std	Y+9, r19	; 0x09
        read_length = 512 - block_offset; /* read up to block border */
    15fc:	80 e0       	ldi	r24, 0x00	; 0
    15fe:	92 e0       	ldi	r25, 0x02	; 2
    1600:	82 19       	sub	r24, r2
    1602:	93 09       	sbc	r25, r3
    1604:	9b 87       	std	Y+11, r25	; 0x0b
    1606:	8a 87       	std	Y+10, r24	; 0x0a
    1608:	48 16       	cp	r4, r24
    160a:	59 06       	cpc	r5, r25
    160c:	10 f4       	brcc	.+4      	; 0x1612 <sd_raw_read+0xe8>
    160e:	5b 86       	std	Y+11, r5	; 0x0b
    1610:	4a 86       	std	Y+10, r4	; 0x0a
        if(read_length > length)
            read_length = length;
        
#if !SD_RAW_SAVE_RAM
        /* check if the requested data is cached */
        if(block_address != raw_block_address)
    1612:	80 91 c2 01 	lds	r24, 0x01C2
    1616:	86 15       	cp	r24, r6
    1618:	f1 f4       	brne	.+60     	; 0x1656 <sd_raw_read+0x12c>
    161a:	80 91 c3 01 	lds	r24, 0x01C3
    161e:	81 17       	cp	r24, r17
    1620:	d1 f4       	brne	.+52     	; 0x1656 <sd_raw_read+0x12c>
    1622:	80 91 c4 01 	lds	r24, 0x01C4
    1626:	8b 15       	cp	r24, r11
    1628:	b1 f4       	brne	.+44     	; 0x1656 <sd_raw_read+0x12c>
    162a:	80 91 c5 01 	lds	r24, 0x01C5
    162e:	8a 15       	cp	r24, r10
    1630:	91 f4       	brne	.+36     	; 0x1656 <sd_raw_read+0x12c>
    1632:	80 91 c6 01 	lds	r24, 0x01C6
    1636:	89 15       	cp	r24, r9
    1638:	71 f4       	brne	.+28     	; 0x1656 <sd_raw_read+0x12c>
    163a:	80 91 c7 01 	lds	r24, 0x01C7
    163e:	88 15       	cp	r24, r8
    1640:	51 f4       	brne	.+20     	; 0x1656 <sd_raw_read+0x12c>
    1642:	80 91 c8 01 	lds	r24, 0x01C8
    1646:	87 15       	cp	r24, r7
    1648:	31 f4       	brne	.+12     	; 0x1656 <sd_raw_read+0x12c>
    164a:	80 91 c9 01 	lds	r24, 0x01C9
    164e:	99 85       	ldd	r25, Y+9	; 0x09
    1650:	89 17       	cp	r24, r25
    1652:	09 f4       	brne	.+2      	; 0x1656 <sd_raw_read+0x12c>
    1654:	63 c0       	rjmp	.+198    	; 0x171c <sd_raw_read+0x1f2>
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1656:	3d df       	rcall	.-390    	; 0x14d2 <sd_raw_sync>
    1658:	88 23       	and	r24, r24
    165a:	09 f4       	brne	.+2      	; 0x165e <sd_raw_read+0x134>
    165c:	e3 c0       	rjmp	.+454    	; 0x1824 <sd_raw_read+0x2fa>
                return 0;
#endif

            /* address card */
            select_card();
    165e:	28 98       	cbi	0x05, 0	; 5

            /* send single block request */
#if SD_RAW_SDHC
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    1660:	80 91 c0 01 	lds	r24, 0x01C0
    1664:	82 ff       	sbrs	r24, 2
    1666:	0f c0       	rjmp	.+30     	; 0x1686 <sd_raw_read+0x15c>
    1668:	26 2d       	mov	r18, r6
    166a:	31 2f       	mov	r19, r17
    166c:	4b 2d       	mov	r20, r11
    166e:	5a 2d       	mov	r21, r10
    1670:	69 2d       	mov	r22, r9
    1672:	78 2d       	mov	r23, r8
    1674:	87 2d       	mov	r24, r7
    1676:	99 85       	ldd	r25, Y+9	; 0x09
    1678:	09 e0       	ldi	r16, 0x09	; 9
    167a:	0e 94 22 02 	call	0x444	; 0x444 <__lshrdi3>
    167e:	ba 01       	movw	r22, r20
    1680:	42 2f       	mov	r20, r18
    1682:	53 2f       	mov	r21, r19
    1684:	04 c0       	rjmp	.+8      	; 0x168e <sd_raw_read+0x164>
    1686:	46 2d       	mov	r20, r6
    1688:	51 2f       	mov	r21, r17
    168a:	6b 2d       	mov	r22, r11
    168c:	7a 2d       	mov	r23, r10
    168e:	81 e1       	ldi	r24, 0x11	; 17
    1690:	e6 de       	rcall	.-564    	; 0x145e <sd_raw_send_command>
    1692:	88 23       	and	r24, r24
    1694:	11 f0       	breq	.+4      	; 0x169a <sd_raw_read+0x170>
#else
            if(sd_raw_send_command(CMD_READ_SINGLE_BLOCK, block_address))
#endif
            {
                unselect_card();
    1696:	28 9a       	sbi	0x05, 0	; 5
    1698:	c5 c0       	rjmp	.+394    	; 0x1824 <sd_raw_read+0x2fa>
    169a:	ea 84       	ldd	r14, Y+10	; 0x0a
    169c:	fb 84       	ldd	r15, Y+11	; 0x0b
                return 0;
            }

            /* wait for data block (start byte 0xfe) */
            while(sd_raw_rec_byte() != 0xfe);
    169e:	d5 de       	rcall	.-598    	; 0x144a <sd_raw_rec_byte>
    16a0:	8e 3f       	cpi	r24, 0xFE	; 254
    16a2:	e9 f7       	brne	.-6      	; 0x169e <sd_raw_read+0x174>
    16a4:	fb 86       	std	Y+11, r15	; 0x0b
    16a6:	ea 86       	std	Y+10, r14	; 0x0a
 * \param[out] buffer The buffer into which to write the data.
 * \param[in] length The number of bytes to read.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_write_interval
 */
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
    16a8:	fa ec       	ldi	r31, 0xCA	; 202
    16aa:	ef 2e       	mov	r14, r31
    16ac:	f1 e0       	ldi	r31, 0x01	; 1
    16ae:	ff 2e       	mov	r15, r31
    16b0:	81 2f       	mov	r24, r17
    16b2:	0a 85       	ldd	r16, Y+10	; 0x0a
    16b4:	1b 85       	ldd	r17, Y+11	; 0x0b
    16b6:	97 01       	movw	r18, r14
    16b8:	e8 2e       	mov	r14, r24
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
                *cache++ = sd_raw_rec_byte();
    16ba:	2c 87       	std	Y+12, r18	; 0x0c
    16bc:	3d 87       	std	Y+13, r19	; 0x0d
    16be:	c5 de       	rcall	.-630    	; 0x144a <sd_raw_rec_byte>
    16c0:	2c 85       	ldd	r18, Y+12	; 0x0c
    16c2:	3d 85       	ldd	r19, Y+13	; 0x0d
    16c4:	d9 01       	movw	r26, r18
    16c6:	8d 93       	st	X+, r24
    16c8:	9d 01       	movw	r18, r26
                    *buffer++ = b;
            }
#else
            /* read byte block */
            uint8_t* cache = raw_block;
            for(uint16_t i = 0; i < 512; ++i)
    16ca:	b3 e0       	ldi	r27, 0x03	; 3
    16cc:	2a 3c       	cpi	r18, 0xCA	; 202
    16ce:	3b 07       	cpc	r19, r27
    16d0:	a1 f7       	brne	.-24     	; 0x16ba <sd_raw_read+0x190>
    16d2:	1b 87       	std	Y+11, r17	; 0x0b
    16d4:	0a 87       	std	Y+10, r16	; 0x0a
                *cache++ = sd_raw_rec_byte();
            raw_block_address = block_address;
    16d6:	60 92 c2 01 	sts	0x01C2, r6
    16da:	e0 92 c3 01 	sts	0x01C3, r14
    16de:	b0 92 c4 01 	sts	0x01C4, r11
    16e2:	a0 92 c5 01 	sts	0x01C5, r10
    16e6:	90 92 c6 01 	sts	0x01C6, r9
    16ea:	80 92 c7 01 	sts	0x01C7, r8
    16ee:	70 92 c8 01 	sts	0x01C8, r7
    16f2:	e9 85       	ldd	r30, Y+9	; 0x09
    16f4:	e0 93 c9 01 	sts	0x01C9, r30

            memcpy(buffer, raw_block + block_offset, read_length);
    16f8:	91 01       	movw	r18, r2
    16fa:	26 53       	subi	r18, 0x36	; 54
    16fc:	3e 4f       	sbci	r19, 0xFE	; 254
    16fe:	c6 01       	movw	r24, r12
    1700:	b9 01       	movw	r22, r18
    1702:	4a 85       	ldd	r20, Y+10	; 0x0a
    1704:	5b 85       	ldd	r21, Y+11	; 0x0b
    1706:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <memcpy>
            buffer += read_length;
    170a:	ea 84       	ldd	r14, Y+10	; 0x0a
    170c:	fb 84       	ldd	r15, Y+11	; 0x0b
    170e:	ce 0c       	add	r12, r14
    1710:	df 1c       	adc	r13, r15
#endif
            
            /* read crc16 */
            sd_raw_rec_byte();
    1712:	9b de       	rcall	.-714    	; 0x144a <sd_raw_rec_byte>
            sd_raw_rec_byte();
    1714:	9a de       	rcall	.-716    	; 0x144a <sd_raw_rec_byte>
            
            /* deaddress card */
            unselect_card();
    1716:	28 9a       	sbi	0x05, 0	; 5

            /* let card some time to finish */
            sd_raw_rec_byte();
    1718:	98 de       	rcall	.-720    	; 0x144a <sd_raw_rec_byte>
    171a:	0d c0       	rjmp	.+26     	; 0x1736 <sd_raw_read+0x20c>
        }
#if !SD_RAW_SAVE_RAM
        else
        {
            /* use cached data */
            memcpy(buffer, raw_block + block_offset, read_length);
    171c:	91 01       	movw	r18, r2
    171e:	26 53       	subi	r18, 0x36	; 54
    1720:	3e 4f       	sbci	r19, 0xFE	; 254
    1722:	c6 01       	movw	r24, r12
    1724:	b9 01       	movw	r22, r18
    1726:	4a 85       	ldd	r20, Y+10	; 0x0a
    1728:	5b 85       	ldd	r21, Y+11	; 0x0b
    172a:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <memcpy>
            buffer += read_length;
    172e:	2a 85       	ldd	r18, Y+10	; 0x0a
    1730:	3b 85       	ldd	r19, Y+11	; 0x0b
    1732:	c2 0e       	add	r12, r18
    1734:	d3 1e       	adc	r13, r19
        }
#endif

        length -= read_length;
    1736:	8a 85       	ldd	r24, Y+10	; 0x0a
    1738:	9b 85       	ldd	r25, Y+11	; 0x0b
    173a:	48 1a       	sub	r4, r24
    173c:	59 0a       	sbc	r5, r25
        offset += read_length;
    173e:	9c 01       	movw	r18, r24
    1740:	40 e0       	ldi	r20, 0x00	; 0
    1742:	50 e0       	ldi	r21, 0x00	; 0
    1744:	60 e0       	ldi	r22, 0x00	; 0
    1746:	70 e0       	ldi	r23, 0x00	; 0
    1748:	cb 01       	movw	r24, r22
    174a:	a9 80       	ldd	r10, Y+1	; 0x01
    174c:	a2 0e       	add	r10, r18
    174e:	11 e0       	ldi	r17, 0x01	; 1
    1750:	a9 81       	ldd	r26, Y+1	; 0x01
    1752:	aa 16       	cp	r10, r26
    1754:	08 f0       	brcs	.+2      	; 0x1758 <sd_raw_read+0x22e>
    1756:	10 e0       	ldi	r17, 0x00	; 0
    1758:	fa 81       	ldd	r31, Y+2	; 0x02
    175a:	f3 0f       	add	r31, r19
    175c:	e1 e0       	ldi	r30, 0x01	; 1
    175e:	ba 81       	ldd	r27, Y+2	; 0x02
    1760:	fb 17       	cp	r31, r27
    1762:	08 f0       	brcs	.+2      	; 0x1766 <sd_raw_read+0x23c>
    1764:	e0 e0       	ldi	r30, 0x00	; 0
    1766:	b1 2e       	mov	r11, r17
    1768:	bf 0e       	add	r11, r31
    176a:	a1 e0       	ldi	r26, 0x01	; 1
    176c:	bf 16       	cp	r11, r31
    176e:	08 f0       	brcs	.+2      	; 0x1772 <sd_raw_read+0x248>
    1770:	a0 e0       	ldi	r26, 0x00	; 0
    1772:	ea 2b       	or	r30, r26
    1774:	fb 81       	ldd	r31, Y+3	; 0x03
    1776:	f4 0f       	add	r31, r20
    1778:	01 e0       	ldi	r16, 0x01	; 1
    177a:	eb 80       	ldd	r14, Y+3	; 0x03
    177c:	fe 15       	cp	r31, r14
    177e:	08 f0       	brcs	.+2      	; 0x1782 <sd_raw_read+0x258>
    1780:	00 e0       	ldi	r16, 0x00	; 0
    1782:	ee 2e       	mov	r14, r30
    1784:	ef 0e       	add	r14, r31
    1786:	e1 e0       	ldi	r30, 0x01	; 1
    1788:	ef 16       	cp	r14, r31
    178a:	08 f0       	brcs	.+2      	; 0x178e <sd_raw_read+0x264>
    178c:	e0 e0       	ldi	r30, 0x00	; 0
    178e:	0e 2b       	or	r16, r30
    1790:	ec 81       	ldd	r30, Y+4	; 0x04
    1792:	e5 0f       	add	r30, r21
    1794:	11 e0       	ldi	r17, 0x01	; 1
    1796:	fc 80       	ldd	r15, Y+4	; 0x04
    1798:	ef 15       	cp	r30, r15
    179a:	08 f0       	brcs	.+2      	; 0x179e <sd_raw_read+0x274>
    179c:	10 e0       	ldi	r17, 0x00	; 0
    179e:	0e 0f       	add	r16, r30
    17a0:	f1 e0       	ldi	r31, 0x01	; 1
    17a2:	0e 17       	cp	r16, r30
    17a4:	08 f0       	brcs	.+2      	; 0x17a8 <sd_raw_read+0x27e>
    17a6:	f0 e0       	ldi	r31, 0x00	; 0
    17a8:	1f 2b       	or	r17, r31
    17aa:	9d 80       	ldd	r9, Y+5	; 0x05
    17ac:	96 0e       	add	r9, r22
    17ae:	b1 e0       	ldi	r27, 0x01	; 1
    17b0:	ad 81       	ldd	r26, Y+5	; 0x05
    17b2:	9a 16       	cp	r9, r26
    17b4:	08 f0       	brcs	.+2      	; 0x17b8 <sd_raw_read+0x28e>
    17b6:	b0 e0       	ldi	r27, 0x00	; 0
    17b8:	19 0d       	add	r17, r9
    17ba:	f1 e0       	ldi	r31, 0x01	; 1
    17bc:	19 15       	cp	r17, r9
    17be:	08 f0       	brcs	.+2      	; 0x17c2 <sd_raw_read+0x298>
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	bf 2b       	or	r27, r31
    17c4:	8e 80       	ldd	r8, Y+6	; 0x06
    17c6:	87 0e       	add	r8, r23
    17c8:	99 24       	eor	r9, r9
    17ca:	93 94       	inc	r9
    17cc:	ee 81       	ldd	r30, Y+6	; 0x06
    17ce:	8e 16       	cp	r8, r30
    17d0:	08 f0       	brcs	.+2      	; 0x17d4 <sd_raw_read+0x2aa>
    17d2:	99 24       	eor	r9, r9
    17d4:	7b 2e       	mov	r7, r27
    17d6:	78 0c       	add	r7, r8
    17d8:	a1 e0       	ldi	r26, 0x01	; 1
    17da:	78 14       	cp	r7, r8
    17dc:	08 f0       	brcs	.+2      	; 0x17e0 <sd_raw_read+0x2b6>
    17de:	a0 e0       	ldi	r26, 0x00	; 0
    17e0:	9a 2a       	or	r9, r26
    17e2:	af 81       	ldd	r26, Y+7	; 0x07
    17e4:	a8 0f       	add	r26, r24
    17e6:	88 24       	eor	r8, r8
    17e8:	83 94       	inc	r8
    17ea:	ff 81       	ldd	r31, Y+7	; 0x07
    17ec:	af 17       	cp	r26, r31
    17ee:	08 f0       	brcs	.+2      	; 0x17f2 <sd_raw_read+0x2c8>
    17f0:	88 24       	eor	r8, r8
    17f2:	f9 2d       	mov	r31, r9
    17f4:	fa 0f       	add	r31, r26
    17f6:	99 24       	eor	r9, r9
    17f8:	93 94       	inc	r9
    17fa:	fa 17       	cp	r31, r26
    17fc:	08 f0       	brcs	.+2      	; 0x1800 <sd_raw_read+0x2d6>
    17fe:	99 24       	eor	r9, r9
    1800:	89 28       	or	r8, r9
    1802:	88 85       	ldd	r24, Y+8	; 0x08
    1804:	89 0f       	add	r24, r25
    1806:	a9 82       	std	Y+1, r10	; 0x01
    1808:	ba 82       	std	Y+2, r11	; 0x02
    180a:	eb 82       	std	Y+3, r14	; 0x03
    180c:	0c 83       	std	Y+4, r16	; 0x04
    180e:	1d 83       	std	Y+5, r17	; 0x05
    1810:	7e 82       	std	Y+6, r7	; 0x06
    1812:	ff 83       	std	Y+7, r31	; 0x07
    1814:	88 0e       	add	r8, r24
    1816:	88 86       	std	Y+8, r8	; 0x08
uint8_t sd_raw_read(offset_t offset, uint8_t* buffer, uintptr_t length)
{
    offset_t block_address;
    uint16_t block_offset;
    uint16_t read_length;
    while(length > 0)
    1818:	41 14       	cp	r4, r1
    181a:	51 04       	cpc	r5, r1
    181c:	09 f0       	breq	.+2      	; 0x1820 <sd_raw_read+0x2f6>
    181e:	aa ce       	rjmp	.-684    	; 0x1574 <sd_raw_read+0x4a>

        length -= read_length;
        offset += read_length;
    }

    return 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	01 c0       	rjmp	.+2      	; 0x1826 <sd_raw_read+0x2fc>
        if(block_address != raw_block_address)
#endif
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
                return 0;
    1824:	80 e0       	ldi	r24, 0x00	; 0
        length -= read_length;
        offset += read_length;
    }

    return 1;
}
    1826:	2d 96       	adiw	r28, 0x0d	; 13
    1828:	0f b6       	in	r0, 0x3f	; 63
    182a:	f8 94       	cli
    182c:	de bf       	out	0x3e, r29	; 62
    182e:	0f be       	out	0x3f, r0	; 63
    1830:	cd bf       	out	0x3d, r28	; 61
    1832:	cf 91       	pop	r28
    1834:	df 91       	pop	r29
    1836:	1f 91       	pop	r17
    1838:	0f 91       	pop	r16
    183a:	ff 90       	pop	r15
    183c:	ef 90       	pop	r14
    183e:	df 90       	pop	r13
    1840:	cf 90       	pop	r12
    1842:	bf 90       	pop	r11
    1844:	af 90       	pop	r10
    1846:	9f 90       	pop	r9
    1848:	8f 90       	pop	r8
    184a:	7f 90       	pop	r7
    184c:	6f 90       	pop	r6
    184e:	5f 90       	pop	r5
    1850:	4f 90       	pop	r4
    1852:	3f 90       	pop	r3
    1854:	2f 90       	pop	r2
    1856:	08 95       	ret

00001858 <sd_raw_read_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
{
    1858:	2f 92       	push	r2
    185a:	3f 92       	push	r3
    185c:	4f 92       	push	r4
    185e:	5f 92       	push	r5
    1860:	6f 92       	push	r6
    1862:	7f 92       	push	r7
    1864:	8f 92       	push	r8
    1866:	9f 92       	push	r9
    1868:	af 92       	push	r10
    186a:	bf 92       	push	r11
    186c:	cf 92       	push	r12
    186e:	df 92       	push	r13
    1870:	ef 92       	push	r14
    1872:	ff 92       	push	r15
    1874:	0f 93       	push	r16
    1876:	1f 93       	push	r17
    1878:	df 93       	push	r29
    187a:	cf 93       	push	r28
    187c:	cd b7       	in	r28, 0x3d	; 61
    187e:	de b7       	in	r29, 0x3e	; 62
    1880:	60 97       	sbiw	r28, 0x10	; 16
    1882:	0f b6       	in	r0, 0x3f	; 63
    1884:	f8 94       	cli
    1886:	de bf       	out	0x3e, r29	; 62
    1888:	0f be       	out	0x3f, r0	; 63
    188a:	cd bf       	out	0x3d, r28	; 61
    188c:	29 01       	movw	r4, r18
    188e:	49 83       	std	Y+1, r20	; 0x01
    1890:	5a 83       	std	Y+2, r21	; 0x02
    1892:	6b 83       	std	Y+3, r22	; 0x03
    1894:	27 2e       	mov	r2, r23
    1896:	38 2e       	mov	r3, r24
    1898:	9c 83       	std	Y+4, r25	; 0x04
    189a:	1e 83       	std	Y+6, r17	; 0x06
    189c:	0d 83       	std	Y+5, r16	; 0x05
    189e:	37 01       	movw	r6, r14
    if(!buffer || interval == 0 || length < interval || !callback)
    18a0:	01 15       	cp	r16, r1
    18a2:	11 05       	cpc	r17, r1
    18a4:	09 f4       	brne	.+2      	; 0x18a8 <sd_raw_read_interval+0x50>
    18a6:	83 c0       	rjmp	.+262    	; 0x19ae <sd_raw_read_interval+0x156>
    18a8:	e1 14       	cp	r14, r1
    18aa:	f1 04       	cpc	r15, r1
    18ac:	09 f4       	brne	.+2      	; 0x18b0 <sd_raw_read_interval+0x58>
    18ae:	7f c0       	rjmp	.+254    	; 0x19ae <sd_raw_read_interval+0x156>
    18b0:	ce 14       	cp	r12, r14
    18b2:	df 04       	cpc	r13, r15
    18b4:	08 f4       	brcc	.+2      	; 0x18b8 <sd_raw_read_interval+0x60>
    18b6:	7b c0       	rjmp	.+246    	; 0x19ae <sd_raw_read_interval+0x156>
    18b8:	a1 14       	cp	r10, r1
    18ba:	b1 04       	cpc	r11, r1
    18bc:	09 f4       	brne	.+2      	; 0x18c0 <sd_raw_read_interval+0x68>
    18be:	77 c0       	rjmp	.+238    	; 0x19ae <sd_raw_read_interval+0x156>
 * \param[in] callback The function to call every interval bytes.
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_write
 */
uint8_t sd_raw_read_interval(offset_t offset, uint8_t* buffer, uintptr_t interval, uintptr_t length, sd_raw_read_interval_handler_t callback, void* p)
    18c0:	22 27       	eor	r18, r18
    18c2:	33 27       	eor	r19, r19
    18c4:	2e 19       	sub	r18, r14
    18c6:	3f 09       	sbc	r19, r15
    18c8:	38 8b       	std	Y+16, r19	; 0x10
    18ca:	2f 87       	std	Y+15, r18	; 0x0f
    18cc:	ce 18       	sub	r12, r14
    18ce:	df 08       	sbc	r13, r15
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
        if(!callback(buffer, offset, p))
            break;
        offset += interval;
    18d0:	97 01       	movw	r18, r14
    18d2:	40 e0       	ldi	r20, 0x00	; 0
    18d4:	50 e0       	ldi	r21, 0x00	; 0
    18d6:	60 e0       	ldi	r22, 0x00	; 0
    18d8:	70 e0       	ldi	r23, 0x00	; 0
    18da:	cb 01       	movw	r24, r22
    18dc:	ef 82       	std	Y+7, r14	; 0x07
    18de:	38 87       	std	Y+8, r19	; 0x08
    18e0:	49 87       	std	Y+9, r20	; 0x09
    18e2:	5a 87       	std	Y+10, r21	; 0x0a
    18e4:	6b 87       	std	Y+11, r22	; 0x0b
    18e6:	7c 87       	std	Y+12, r23	; 0x0c
    18e8:	8d 87       	std	Y+13, r24	; 0x0d
    18ea:	9e 87       	std	Y+14, r25	; 0x0e
    while(length >= interval)
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
    18ec:	92 01       	movw	r18, r4
    18ee:	49 81       	ldd	r20, Y+1	; 0x01
    18f0:	5a 81       	ldd	r21, Y+2	; 0x02
    18f2:	6b 81       	ldd	r22, Y+3	; 0x03
    18f4:	72 2d       	mov	r23, r2
    18f6:	83 2d       	mov	r24, r3
    18f8:	9c 81       	ldd	r25, Y+4	; 0x04
    18fa:	0d 81       	ldd	r16, Y+5	; 0x05
    18fc:	1e 81       	ldd	r17, Y+6	; 0x06
    18fe:	73 01       	movw	r14, r6
    1900:	14 de       	rcall	.-984    	; 0x152a <sd_raw_read>
    1902:	88 23       	and	r24, r24
    1904:	09 f4       	brne	.+2      	; 0x1908 <sd_raw_read_interval+0xb0>
    1906:	53 c0       	rjmp	.+166    	; 0x19ae <sd_raw_read_interval+0x156>
            return 0;
        if(!callback(buffer, offset, p))
    1908:	8d 81       	ldd	r24, Y+5	; 0x05
    190a:	9e 81       	ldd	r25, Y+6	; 0x06
    190c:	82 01       	movw	r16, r4
    190e:	29 81       	ldd	r18, Y+1	; 0x01
    1910:	3a 81       	ldd	r19, Y+2	; 0x02
    1912:	4b 81       	ldd	r20, Y+3	; 0x03
    1914:	52 2d       	mov	r21, r2
    1916:	63 2d       	mov	r22, r3
    1918:	7c 81       	ldd	r23, Y+4	; 0x04
    191a:	74 01       	movw	r14, r8
    191c:	f5 01       	movw	r30, r10
    191e:	09 95       	icall
    1920:	88 23       	and	r24, r24
    1922:	09 f4       	brne	.+2      	; 0x1926 <sd_raw_read_interval+0xce>
    1924:	46 c0       	rjmp	.+140    	; 0x19b2 <sd_raw_read_interval+0x15a>
    1926:	4f 85       	ldd	r20, Y+15	; 0x0f
    1928:	58 89       	ldd	r21, Y+16	; 0x10
    192a:	c4 0e       	add	r12, r20
    192c:	d5 1e       	adc	r13, r21
{
    if(!buffer || interval == 0 || length < interval || !callback)
        return 0;

#if !SD_RAW_SAVE_RAM
    while(length >= interval)
    192e:	c6 01       	movw	r24, r12
    1930:	86 0d       	add	r24, r6
    1932:	97 1d       	adc	r25, r7
    1934:	86 15       	cp	r24, r6
    1936:	97 05       	cpc	r25, r7
    1938:	e0 f1       	brcs	.+120    	; 0x19b2 <sd_raw_read_interval+0x15a>
    193a:	6f 81       	ldd	r22, Y+7	; 0x07
    193c:	64 0d       	add	r22, r4
    193e:	81 e0       	ldi	r24, 0x01	; 1
    1940:	64 15       	cp	r22, r4
    1942:	08 f0       	brcs	.+2      	; 0x1946 <sd_raw_read_interval+0xee>
    1944:	80 e0       	ldi	r24, 0x00	; 0
    1946:	98 85       	ldd	r25, Y+8	; 0x08
    1948:	95 0d       	add	r25, r5
    194a:	21 e0       	ldi	r18, 0x01	; 1
    194c:	95 15       	cp	r25, r5
    194e:	08 f0       	brcs	.+2      	; 0x1952 <sd_raw_read_interval+0xfa>
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	58 2e       	mov	r5, r24
    1954:	59 0e       	add	r5, r25
    1956:	81 e0       	ldi	r24, 0x01	; 1
    1958:	59 16       	cp	r5, r25
    195a:	08 f0       	brcs	.+2      	; 0x195e <sd_raw_read_interval+0x106>
    195c:	80 e0       	ldi	r24, 0x00	; 0
    195e:	82 2b       	or	r24, r18
    1960:	59 81       	ldd	r21, Y+1	; 0x01
    1962:	85 0f       	add	r24, r21
    1964:	51 e0       	ldi	r21, 0x01	; 1
    1966:	79 81       	ldd	r23, Y+1	; 0x01
    1968:	87 17       	cp	r24, r23
    196a:	08 f0       	brcs	.+2      	; 0x196e <sd_raw_read_interval+0x116>
    196c:	50 e0       	ldi	r21, 0x00	; 0
    196e:	9a 81       	ldd	r25, Y+2	; 0x02
    1970:	59 0f       	add	r21, r25
    1972:	41 e0       	ldi	r20, 0x01	; 1
    1974:	59 17       	cp	r21, r25
    1976:	08 f0       	brcs	.+2      	; 0x197a <sd_raw_read_interval+0x122>
    1978:	40 e0       	ldi	r20, 0x00	; 0
    197a:	2b 81       	ldd	r18, Y+3	; 0x03
    197c:	42 0f       	add	r20, r18
    197e:	31 e0       	ldi	r19, 0x01	; 1
    1980:	42 17       	cp	r20, r18
    1982:	08 f0       	brcs	.+2      	; 0x1986 <sd_raw_read_interval+0x12e>
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	32 0d       	add	r19, r2
    1988:	21 e0       	ldi	r18, 0x01	; 1
    198a:	32 15       	cp	r19, r2
    198c:	08 f0       	brcs	.+2      	; 0x1990 <sd_raw_read_interval+0x138>
    198e:	20 e0       	ldi	r18, 0x00	; 0
    1990:	23 0d       	add	r18, r3
    1992:	91 e0       	ldi	r25, 0x01	; 1
    1994:	23 15       	cp	r18, r3
    1996:	08 f0       	brcs	.+2      	; 0x199a <sd_raw_read_interval+0x142>
    1998:	90 e0       	ldi	r25, 0x00	; 0
    199a:	46 2e       	mov	r4, r22
    199c:	89 83       	std	Y+1, r24	; 0x01
    199e:	5a 83       	std	Y+2, r21	; 0x02
    19a0:	4b 83       	std	Y+3, r20	; 0x03
    19a2:	23 2e       	mov	r2, r19
    19a4:	32 2e       	mov	r3, r18
    19a6:	3c 81       	ldd	r19, Y+4	; 0x04
    19a8:	39 0f       	add	r19, r25
    19aa:	3c 83       	std	Y+4, r19	; 0x04
    19ac:	9f cf       	rjmp	.-194    	; 0x18ec <sd_raw_read_interval+0x94>
    {
        /* as reading is now buffered, we directly
         * hand over the request to sd_raw_read()
         */
        if(!sd_raw_read(offset, buffer, interval))
            return 0;
    19ae:	80 e0       	ldi	r24, 0x00	; 0
    19b0:	01 c0       	rjmp	.+2      	; 0x19b4 <sd_raw_read_interval+0x15c>
            break;
        offset += interval;
        length -= interval;
    }

    return 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    /* let card some time to finish */
    sd_raw_rec_byte();

    return 1;
#endif
}
    19b4:	60 96       	adiw	r28, 0x10	; 16
    19b6:	0f b6       	in	r0, 0x3f	; 63
    19b8:	f8 94       	cli
    19ba:	de bf       	out	0x3e, r29	; 62
    19bc:	0f be       	out	0x3f, r0	; 63
    19be:	cd bf       	out	0x3d, r28	; 61
    19c0:	cf 91       	pop	r28
    19c2:	df 91       	pop	r29
    19c4:	1f 91       	pop	r17
    19c6:	0f 91       	pop	r16
    19c8:	ff 90       	pop	r15
    19ca:	ef 90       	pop	r14
    19cc:	df 90       	pop	r13
    19ce:	cf 90       	pop	r12
    19d0:	bf 90       	pop	r11
    19d2:	af 90       	pop	r10
    19d4:	9f 90       	pop	r9
    19d6:	8f 90       	pop	r8
    19d8:	7f 90       	pop	r7
    19da:	6f 90       	pop	r6
    19dc:	5f 90       	pop	r5
    19de:	4f 90       	pop	r4
    19e0:	3f 90       	pop	r3
    19e2:	2f 90       	pop	r2
    19e4:	08 95       	ret

000019e6 <sd_raw_init>:
 * Initializes memory card communication.
 *
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_init()
{
    19e6:	ef 92       	push	r14
    19e8:	ff 92       	push	r15
    19ea:	0f 93       	push	r16
    19ec:	1f 93       	push	r17
    19ee:	cf 93       	push	r28
    19f0:	df 93       	push	r29
    /* enable inputs for reading card status */
    configure_pin_available();
    configure_pin_locked();

    /* enable outputs for MOSI, SCK, SS, input for MISO */
    configure_pin_mosi();
    19f2:	22 9a       	sbi	0x04, 2	; 4
    configure_pin_sck();
    19f4:	21 9a       	sbi	0x04, 1	; 4
    configure_pin_ss();
    19f6:	20 9a       	sbi	0x04, 0	; 4
    configure_pin_miso();
    19f8:	23 98       	cbi	0x04, 3	; 4

    unselect_card();
    19fa:	28 9a       	sbi	0x05, 0	; 5

    /* initialize SPI with lowest frequency; max. 400kHz during identification mode of card */
    SPCR = (0 << SPIE) | /* SPI Interrupt Enable */
    19fc:	83 e5       	ldi	r24, 0x53	; 83
    19fe:	8c bd       	out	0x2c, r24	; 44
           (1 << MSTR) | /* Master mode */
           (0 << CPOL) | /* Clock Polarity: SCK low when idle */
           (0 << CPHA) | /* Clock Phase: sample on rising SCK edge */
           (1 << SPR1) | /* Clock Frequency: f_OSC / 128 */
           (1 << SPR0);
    SPSR &= ~(1 << SPI2X); /* No doubled clock frequency */
    1a00:	8d b5       	in	r24, 0x2d	; 45
    1a02:	8e 7f       	andi	r24, 0xFE	; 254
    1a04:	8d bd       	out	0x2d, r24	; 45

    /* initialization procedure */
    sd_raw_card_type = 0;
    1a06:	10 92 c0 01 	sts	0x01C0, r1
    
    if(!sd_raw_available())
    1a0a:	5f dd       	rcall	.-1346   	; 0x14ca <sd_raw_available>
    1a0c:	88 23       	and	r24, r24
    1a0e:	09 f4       	brne	.+2      	; 0x1a12 <sd_raw_init+0x2c>
    1a10:	b1 c0       	rjmp	.+354    	; 0x1b74 <sd_raw_init+0x18e>
    1a12:	10 e0       	ldi	r17, 0x00	; 0

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    {
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    1a14:	1a dd       	rcall	.-1484   	; 0x144a <sd_raw_rec_byte>
    
    if(!sd_raw_available())
        return 0;

    /* card needs 74 cycles minimum to start up */
    for(uint8_t i = 0; i < 10; ++i)
    1a16:	1f 5f       	subi	r17, 0xFF	; 255
    1a18:	1a 30       	cpi	r17, 0x0A	; 10
    1a1a:	e1 f7       	brne	.-8      	; 0x1a14 <sd_raw_init+0x2e>
        /* wait 8 clock cycles */
        sd_raw_rec_byte();
    }

    /* address card */
    select_card();
    1a1c:	28 98       	cbi	0x05, 0	; 5

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    1a1e:	c0 e0       	ldi	r28, 0x00	; 0
    1a20:	d0 e0       	ldi	r29, 0x00	; 0
    {
        response = sd_raw_send_command(CMD_GO_IDLE_STATE, 0);
    1a22:	80 e0       	ldi	r24, 0x00	; 0
    1a24:	40 e0       	ldi	r20, 0x00	; 0
    1a26:	50 e0       	ldi	r21, 0x00	; 0
    1a28:	ba 01       	movw	r22, r20
    1a2a:	19 dd       	rcall	.-1486   	; 0x145e <sd_raw_send_command>
    1a2c:	18 2f       	mov	r17, r24
        if(response == (1 << R1_IDLE_STATE))
    1a2e:	81 30       	cpi	r24, 0x01	; 1
    1a30:	39 f0       	breq	.+14     	; 0x1a40 <sd_raw_init+0x5a>
            break;

        if(i == 0x1ff)
    1a32:	81 e0       	ldi	r24, 0x01	; 1
    1a34:	cf 3f       	cpi	r28, 0xFF	; 255
    1a36:	d8 07       	cpc	r29, r24
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <sd_raw_init+0x56>
    1a3a:	6e c0       	rjmp	.+220    	; 0x1b18 <sd_raw_init+0x132>
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    1a3c:	21 96       	adiw	r28, 0x01	; 1
        if(i == 0x1ff)
        {
            unselect_card();
            return 0;
        }
    }
    1a3e:	f1 cf       	rjmp	.-30     	; 0x1a22 <sd_raw_init+0x3c>

#if SD_RAW_SDHC
    /* check for version of SD card specification */
    response = sd_raw_send_command(CMD_SEND_IF_COND, 0x100 /* 2.7V - 3.6V */ | 0xaa /* test pattern */);
    1a40:	88 e0       	ldi	r24, 0x08	; 8
    1a42:	4a ea       	ldi	r20, 0xAA	; 170
    1a44:	51 e0       	ldi	r21, 0x01	; 1
    1a46:	60 e0       	ldi	r22, 0x00	; 0
    1a48:	70 e0       	ldi	r23, 0x00	; 0
    1a4a:	09 dd       	rcall	.-1518   	; 0x145e <sd_raw_send_command>
    if((response & (1 << R1_ILL_COMMAND)) == 0)
    1a4c:	82 fd       	sbrc	r24, 2
    1a4e:	0f c0       	rjmp	.+30     	; 0x1a6e <sd_raw_init+0x88>
    {
        sd_raw_rec_byte();
    1a50:	fc dc       	rcall	.-1544   	; 0x144a <sd_raw_rec_byte>
        sd_raw_rec_byte();
    1a52:	fb dc       	rcall	.-1546   	; 0x144a <sd_raw_rec_byte>
        if((sd_raw_rec_byte() & 0x01) == 0)
    1a54:	fa dc       	rcall	.-1548   	; 0x144a <sd_raw_rec_byte>
    1a56:	80 ff       	sbrs	r24, 0
    1a58:	8d c0       	rjmp	.+282    	; 0x1b74 <sd_raw_init+0x18e>
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
    1a5a:	f7 dc       	rcall	.-1554   	; 0x144a <sd_raw_rec_byte>
    1a5c:	8a 3a       	cpi	r24, 0xAA	; 170
    1a5e:	09 f0       	breq	.+2      	; 0x1a62 <sd_raw_init+0x7c>
    1a60:	89 c0       	rjmp	.+274    	; 0x1b74 <sd_raw_init+0x18e>
            return 0; /* wrong test pattern */

        /* card conforms to SD 2 card specification */
        sd_raw_card_type |= (1 << SD_RAW_SPEC_2);
    1a62:	82 e0       	ldi	r24, 0x02	; 2
    1a64:	80 93 c0 01 	sts	0x01C0, r24
    /* address card */
    select_card();

    /* reset card */
    uint8_t response;
    for(uint16_t i = 0; ; ++i)
    1a68:	c0 e0       	ldi	r28, 0x00	; 0
    1a6a:	d0 e0       	ldi	r29, 0x00	; 0
    1a6c:	0f c0       	rjmp	.+30     	; 0x1a8c <sd_raw_init+0xa6>
    }
    else
#endif
    {
        /* determine SD/MMC card type */
        sd_raw_send_command(CMD_APP, 0);
    1a6e:	87 e3       	ldi	r24, 0x37	; 55
    1a70:	40 e0       	ldi	r20, 0x00	; 0
    1a72:	50 e0       	ldi	r21, 0x00	; 0
    1a74:	ba 01       	movw	r22, r20
    1a76:	f3 dc       	rcall	.-1562   	; 0x145e <sd_raw_send_command>
        response = sd_raw_send_command(CMD_SD_SEND_OP_COND, 0);
    1a78:	89 e2       	ldi	r24, 0x29	; 41
    1a7a:	40 e0       	ldi	r20, 0x00	; 0
    1a7c:	50 e0       	ldi	r21, 0x00	; 0
    1a7e:	ba 01       	movw	r22, r20
    1a80:	ee dc       	rcall	.-1572   	; 0x145e <sd_raw_send_command>
        if((response & (1 << R1_ILL_COMMAND)) == 0)
    1a82:	82 fd       	sbrc	r24, 2
    1a84:	f1 cf       	rjmp	.-30     	; 0x1a68 <sd_raw_init+0x82>
        {
            /* card conforms to SD 1 card specification */
            sd_raw_card_type |= (1 << SD_RAW_SPEC_1);
    1a86:	10 93 c0 01 	sts	0x01C0, r17
    1a8a:	ee cf       	rjmp	.-36     	; 0x1a68 <sd_raw_init+0x82>
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
    1a8c:	80 91 c0 01 	lds	r24, 0x01C0
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	9c 01       	movw	r18, r24
    1a94:	23 70       	andi	r18, 0x03	; 3
    1a96:	30 70       	andi	r19, 0x00	; 0
    1a98:	21 15       	cp	r18, r1
    1a9a:	31 05       	cpc	r19, r1
    1a9c:	a1 f0       	breq	.+40     	; 0x1ac6 <sd_raw_init+0xe0>
        {
            uint32_t arg = 0;
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    1a9e:	81 fd       	sbrc	r24, 1
    1aa0:	04 c0       	rjmp	.+8      	; 0x1aaa <sd_raw_init+0xc4>
    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    {
        if(sd_raw_card_type & ((1 << SD_RAW_SPEC_1) | (1 << SD_RAW_SPEC_2)))
        {
            uint32_t arg = 0;
    1aa2:	ee 24       	eor	r14, r14
    1aa4:	ff 24       	eor	r15, r15
    1aa6:	87 01       	movw	r16, r14
    1aa8:	05 c0       	rjmp	.+10     	; 0x1ab4 <sd_raw_init+0xce>
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
                arg = 0x40000000;
    1aaa:	e1 2c       	mov	r14, r1
    1aac:	f1 2c       	mov	r15, r1
    1aae:	01 2d       	mov	r16, r1
    1ab0:	80 e4       	ldi	r24, 0x40	; 64
    1ab2:	18 2f       	mov	r17, r24
#endif
            sd_raw_send_command(CMD_APP, 0);
    1ab4:	87 e3       	ldi	r24, 0x37	; 55
    1ab6:	40 e0       	ldi	r20, 0x00	; 0
    1ab8:	50 e0       	ldi	r21, 0x00	; 0
    1aba:	ba 01       	movw	r22, r20
    1abc:	d0 dc       	rcall	.-1632   	; 0x145e <sd_raw_send_command>
            response = sd_raw_send_command(CMD_SD_SEND_OP_COND, arg);
    1abe:	89 e2       	ldi	r24, 0x29	; 41
    1ac0:	b8 01       	movw	r22, r16
    1ac2:	a7 01       	movw	r20, r14
    1ac4:	04 c0       	rjmp	.+8      	; 0x1ace <sd_raw_init+0xe8>
        }
        else
        {
            response = sd_raw_send_command(CMD_SEND_OP_COND, 0);
    1ac6:	81 e0       	ldi	r24, 0x01	; 1
    1ac8:	40 e0       	ldi	r20, 0x00	; 0
    1aca:	50 e0       	ldi	r21, 0x00	; 0
    1acc:	ba 01       	movw	r22, r20
    1ace:	c7 dc       	rcall	.-1650   	; 0x145e <sd_raw_send_command>
        }

        if((response & (1 << R1_IDLE_STATE)) == 0)
    1ad0:	80 ff       	sbrs	r24, 0
    1ad2:	06 c0       	rjmp	.+12     	; 0x1ae0 <sd_raw_init+0xfa>
            break;

        if(i == 0x7fff)
    1ad4:	8f e7       	ldi	r24, 0x7F	; 127
    1ad6:	cf 3f       	cpi	r28, 0xFF	; 255
    1ad8:	d8 07       	cpc	r29, r24
    1ada:	f1 f0       	breq	.+60     	; 0x1b18 <sd_raw_init+0x132>
            /* MMC card */
        }
    }

    /* wait for card to get ready */
    for(uint16_t i = 0; ; ++i)
    1adc:	21 96       	adiw	r28, 0x01	; 1
        if(i == 0x7fff)
        {
            unselect_card();
            return 0;
        }
    }
    1ade:	d6 cf       	rjmp	.-84     	; 0x1a8c <sd_raw_init+0xa6>

#if SD_RAW_SDHC
    if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    1ae0:	10 91 c0 01 	lds	r17, 0x01C0
    1ae4:	11 ff       	sbrs	r17, 1
    1ae6:	10 c0       	rjmp	.+32     	; 0x1b08 <sd_raw_init+0x122>
    {
        if(sd_raw_send_command(CMD_READ_OCR, 0))
    1ae8:	8a e3       	ldi	r24, 0x3A	; 58
    1aea:	40 e0       	ldi	r20, 0x00	; 0
    1aec:	50 e0       	ldi	r21, 0x00	; 0
    1aee:	ba 01       	movw	r22, r20
    1af0:	b6 dc       	rcall	.-1684   	; 0x145e <sd_raw_send_command>
    1af2:	88 23       	and	r24, r24
    1af4:	89 f4       	brne	.+34     	; 0x1b18 <sd_raw_init+0x132>
        {
            unselect_card();
            return 0;
        }

        if(sd_raw_rec_byte() & 0x40)
    1af6:	a9 dc       	rcall	.-1710   	; 0x144a <sd_raw_rec_byte>
    1af8:	86 ff       	sbrs	r24, 6
    1afa:	03 c0       	rjmp	.+6      	; 0x1b02 <sd_raw_init+0x11c>
            sd_raw_card_type |= (1 << SD_RAW_SPEC_SDHC);
    1afc:	14 60       	ori	r17, 0x04	; 4
    1afe:	10 93 c0 01 	sts	0x01C0, r17

        sd_raw_rec_byte();
    1b02:	a3 dc       	rcall	.-1722   	; 0x144a <sd_raw_rec_byte>
        sd_raw_rec_byte();
    1b04:	a2 dc       	rcall	.-1724   	; 0x144a <sd_raw_rec_byte>
        sd_raw_rec_byte();
    1b06:	a1 dc       	rcall	.-1726   	; 0x144a <sd_raw_rec_byte>
    }
#endif

    /* set block size to 512 bytes */
    if(sd_raw_send_command(CMD_SET_BLOCKLEN, 512))
    1b08:	80 e1       	ldi	r24, 0x10	; 16
    1b0a:	40 e0       	ldi	r20, 0x00	; 0
    1b0c:	52 e0       	ldi	r21, 0x02	; 2
    1b0e:	60 e0       	ldi	r22, 0x00	; 0
    1b10:	70 e0       	ldi	r23, 0x00	; 0
    1b12:	a5 dc       	rcall	.-1718   	; 0x145e <sd_raw_send_command>
    1b14:	88 23       	and	r24, r24
    1b16:	11 f0       	breq	.+4      	; 0x1b1c <sd_raw_init+0x136>
    {
        unselect_card();
    1b18:	28 9a       	sbi	0x05, 0	; 5
    1b1a:	2c c0       	rjmp	.+88     	; 0x1b74 <sd_raw_init+0x18e>
        return 0;
    }

    /* deaddress card */
    unselect_card();
    1b1c:	28 9a       	sbi	0x05, 0	; 5

    /* switch to highest SPI frequency possible */
    SPCR &= ~((1 << SPR1) | (1 << SPR0)); /* Clock Frequency: f_OSC / 4 */
    1b1e:	8c b5       	in	r24, 0x2c	; 44
    1b20:	8c 7f       	andi	r24, 0xFC	; 252
    1b22:	8c bd       	out	0x2c, r24	; 44
    SPSR |= (1 << SPI2X); /* Doubled Clock Frequency: f_OSC / 2 */
    1b24:	8d b5       	in	r24, 0x2d	; 45
    1b26:	81 60       	ori	r24, 0x01	; 1
    1b28:	8d bd       	out	0x2d, r24	; 45

#if !SD_RAW_SAVE_RAM
    /* the first block is likely to be accessed first, so precache it here */
    raw_block_address = (offset_t) -1;
    1b2a:	8f ef       	ldi	r24, 0xFF	; 255
    1b2c:	80 93 c2 01 	sts	0x01C2, r24
    1b30:	80 93 c3 01 	sts	0x01C3, r24
    1b34:	80 93 c4 01 	sts	0x01C4, r24
    1b38:	80 93 c5 01 	sts	0x01C5, r24
    1b3c:	80 93 c6 01 	sts	0x01C6, r24
    1b40:	80 93 c7 01 	sts	0x01C7, r24
    1b44:	80 93 c8 01 	sts	0x01C8, r24
    1b48:	80 93 c9 01 	sts	0x01C9, r24
#if SD_RAW_WRITE_BUFFERING
    raw_block_written = 1;
    1b4c:	81 e0       	ldi	r24, 0x01	; 1
    1b4e:	80 93 c1 01 	sts	0x01C1, r24
#endif
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
    1b52:	20 e0       	ldi	r18, 0x00	; 0
    1b54:	30 e0       	ldi	r19, 0x00	; 0
    1b56:	40 e0       	ldi	r20, 0x00	; 0
    1b58:	50 e0       	ldi	r21, 0x00	; 0
    1b5a:	60 e0       	ldi	r22, 0x00	; 0
    1b5c:	70 e0       	ldi	r23, 0x00	; 0
    1b5e:	80 e0       	ldi	r24, 0x00	; 0
    1b60:	90 e0       	ldi	r25, 0x00	; 0
    1b62:	0a ec       	ldi	r16, 0xCA	; 202
    1b64:	11 e0       	ldi	r17, 0x01	; 1
    1b66:	e1 2c       	mov	r14, r1
    1b68:	b2 e0       	ldi	r27, 0x02	; 2
    1b6a:	fb 2e       	mov	r15, r27
    1b6c:	de dc       	rcall	.-1604   	; 0x152a <sd_raw_read>

    /* initialization procedure */
    sd_raw_card_type = 0;
    
    if(!sd_raw_available())
        return 0;
    1b6e:	91 e0       	ldi	r25, 0x01	; 1
    1b70:	88 23       	and	r24, r24
    1b72:	09 f4       	brne	.+2      	; 0x1b76 <sd_raw_init+0x190>
        sd_raw_rec_byte();
        sd_raw_rec_byte();
        if((sd_raw_rec_byte() & 0x01) == 0)
            return 0; /* card operation voltage range doesn't match */
        if(sd_raw_rec_byte() != 0xaa)
            return 0; /* wrong test pattern */
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    if(!sd_raw_read(0, raw_block, sizeof(raw_block)))
        return 0;
#endif

    return 1;
}
    1b76:	89 2f       	mov	r24, r25
    1b78:	df 91       	pop	r29
    1b7a:	cf 91       	pop	r28
    1b7c:	1f 91       	pop	r17
    1b7e:	0f 91       	pop	r16
    1b80:	ff 90       	pop	r15
    1b82:	ef 90       	pop	r14
    1b84:	08 95       	ret

00001b86 <sd_raw_write>:
 * \param[in] length The number of bytes to write.
 * \returns 0 on failure, 1 on success.
 * \see sd_raw_write_interval, sd_raw_read, sd_raw_read_interval
 */
uint8_t sd_raw_write(offset_t offset, const uint8_t* buffer, uintptr_t length)
{
    1b86:	2f 92       	push	r2
    1b88:	3f 92       	push	r3
    1b8a:	4f 92       	push	r4
    1b8c:	5f 92       	push	r5
    1b8e:	6f 92       	push	r6
    1b90:	7f 92       	push	r7
    1b92:	8f 92       	push	r8
    1b94:	9f 92       	push	r9
    1b96:	af 92       	push	r10
    1b98:	bf 92       	push	r11
    1b9a:	cf 92       	push	r12
    1b9c:	df 92       	push	r13
    1b9e:	ef 92       	push	r14
    1ba0:	ff 92       	push	r15
    1ba2:	0f 93       	push	r16
    1ba4:	1f 93       	push	r17
    1ba6:	df 93       	push	r29
    1ba8:	cf 93       	push	r28
    1baa:	cd b7       	in	r28, 0x3d	; 61
    1bac:	de b7       	in	r29, 0x3e	; 62
    1bae:	2c 97       	sbiw	r28, 0x0c	; 12
    1bb0:	0f b6       	in	r0, 0x3f	; 63
    1bb2:	f8 94       	cli
    1bb4:	de bf       	out	0x3e, r29	; 62
    1bb6:	0f be       	out	0x3f, r0	; 63
    1bb8:	cd bf       	out	0x3d, r28	; 61
    1bba:	29 83       	std	Y+1, r18	; 0x01
    1bbc:	3a 83       	std	Y+2, r19	; 0x02
    1bbe:	4b 83       	std	Y+3, r20	; 0x03
    1bc0:	5c 83       	std	Y+4, r21	; 0x04
    1bc2:	6d 83       	std	Y+5, r22	; 0x05
    1bc4:	7e 83       	std	Y+6, r23	; 0x06
    1bc6:	8f 83       	std	Y+7, r24	; 0x07
    1bc8:	98 87       	std	Y+8, r25	; 0x08
    1bca:	1a 87       	std	Y+10, r17	; 0x0a
    1bcc:	09 87       	std	Y+9, r16	; 0x09
    1bce:	67 01       	movw	r12, r14
    if(sd_raw_locked())
    1bd0:	7e dc       	rcall	.-1796   	; 0x14ce <sd_raw_locked>
    1bd2:	88 23       	and	r24, r24
    1bd4:	09 f4       	brne	.+2      	; 0x1bd8 <sd_raw_write+0x52>
    1bd6:	6b c1       	rjmp	.+726    	; 0x1eae <sd_raw_write+0x328>
    1bd8:	6f c1       	rjmp	.+734    	; 0x1eb8 <sd_raw_write+0x332>
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    {
        /* determine byte count to write at once */
        block_offset = offset & 0x01ff;
    1bda:	29 80       	ldd	r2, Y+1	; 0x01
    1bdc:	3a 80       	ldd	r3, Y+2	; 0x02
    1bde:	ff ef       	ldi	r31, 0xFF	; 255
    1be0:	ef 2e       	mov	r14, r31
    1be2:	f1 e0       	ldi	r31, 0x01	; 1
    1be4:	ff 2e       	mov	r15, r31
    1be6:	2e 20       	and	r2, r14
    1be8:	3f 20       	and	r3, r15
        block_address = offset - block_offset;
    1bea:	91 01       	movw	r18, r2
    1bec:	59 80       	ldd	r5, Y+1	; 0x01
    1bee:	52 18       	sub	r5, r2
    1bf0:	e1 e0       	ldi	r30, 0x01	; 1
    1bf2:	f9 80       	ldd	r15, Y+1	; 0x01
    1bf4:	f5 14       	cp	r15, r5
    1bf6:	08 f0       	brcs	.+2      	; 0x1bfa <sd_raw_write+0x74>
    1bf8:	e0 e0       	ldi	r30, 0x00	; 0
    1bfa:	9a 81       	ldd	r25, Y+2	; 0x02
    1bfc:	93 1b       	sub	r25, r19
    1bfe:	81 e0       	ldi	r24, 0x01	; 1
    1c00:	2a 81       	ldd	r18, Y+2	; 0x02
    1c02:	29 17       	cp	r18, r25
    1c04:	08 f0       	brcs	.+2      	; 0x1c08 <sd_raw_write+0x82>
    1c06:	80 e0       	ldi	r24, 0x00	; 0
    1c08:	b9 2e       	mov	r11, r25
    1c0a:	be 1a       	sub	r11, r30
    1c0c:	21 e0       	ldi	r18, 0x01	; 1
    1c0e:	9b 15       	cp	r25, r11
    1c10:	08 f0       	brcs	.+2      	; 0x1c14 <sd_raw_write+0x8e>
    1c12:	20 e0       	ldi	r18, 0x00	; 0
    1c14:	82 2b       	or	r24, r18
    1c16:	9b 81       	ldd	r25, Y+3	; 0x03
    1c18:	a9 2e       	mov	r10, r25
    1c1a:	a8 1a       	sub	r10, r24
    1c1c:	81 e0       	ldi	r24, 0x01	; 1
    1c1e:	9a 15       	cp	r25, r10
    1c20:	08 f0       	brcs	.+2      	; 0x1c24 <sd_raw_write+0x9e>
    1c22:	80 e0       	ldi	r24, 0x00	; 0
    1c24:	9c 81       	ldd	r25, Y+4	; 0x04
    1c26:	99 2e       	mov	r9, r25
    1c28:	98 1a       	sub	r9, r24
    1c2a:	81 e0       	ldi	r24, 0x01	; 1
    1c2c:	99 15       	cp	r25, r9
    1c2e:	08 f0       	brcs	.+2      	; 0x1c32 <sd_raw_write+0xac>
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	9d 81       	ldd	r25, Y+5	; 0x05
    1c34:	89 2e       	mov	r8, r25
    1c36:	88 1a       	sub	r8, r24
    1c38:	81 e0       	ldi	r24, 0x01	; 1
    1c3a:	98 15       	cp	r25, r8
    1c3c:	08 f0       	brcs	.+2      	; 0x1c40 <sd_raw_write+0xba>
    1c3e:	80 e0       	ldi	r24, 0x00	; 0
    1c40:	9e 81       	ldd	r25, Y+6	; 0x06
    1c42:	79 2e       	mov	r7, r25
    1c44:	78 1a       	sub	r7, r24
    1c46:	81 e0       	ldi	r24, 0x01	; 1
    1c48:	97 15       	cp	r25, r7
    1c4a:	08 f0       	brcs	.+2      	; 0x1c4e <sd_raw_write+0xc8>
    1c4c:	80 e0       	ldi	r24, 0x00	; 0
    1c4e:	9f 81       	ldd	r25, Y+7	; 0x07
    1c50:	69 2e       	mov	r6, r25
    1c52:	68 1a       	sub	r6, r24
    1c54:	81 e0       	ldi	r24, 0x01	; 1
    1c56:	96 15       	cp	r25, r6
    1c58:	08 f0       	brcs	.+2      	; 0x1c5c <sd_raw_write+0xd6>
    1c5a:	80 e0       	ldi	r24, 0x00	; 0
    1c5c:	48 84       	ldd	r4, Y+8	; 0x08
    1c5e:	48 1a       	sub	r4, r24
        write_length = 512 - block_offset; /* write up to block border */
    1c60:	80 e0       	ldi	r24, 0x00	; 0
    1c62:	92 e0       	ldi	r25, 0x02	; 2
    1c64:	82 19       	sub	r24, r2
    1c66:	93 09       	sbc	r25, r3
    1c68:	9c 87       	std	Y+12, r25	; 0x0c
    1c6a:	8b 87       	std	Y+11, r24	; 0x0b
    1c6c:	c8 16       	cp	r12, r24
    1c6e:	d9 06       	cpc	r13, r25
    1c70:	10 f4       	brcc	.+4      	; 0x1c76 <sd_raw_write+0xf0>
    1c72:	dc 86       	std	Y+12, r13	; 0x0c
    1c74:	cb 86       	std	Y+11, r12	; 0x0b
            write_length = length;
        
        /* Merge the data to write with the content of the block.
         * Use the cached block if available.
         */
        if(block_address != raw_block_address)
    1c76:	80 91 c2 01 	lds	r24, 0x01C2
    1c7a:	85 15       	cp	r24, r5
    1c7c:	e1 f4       	brne	.+56     	; 0x1cb6 <sd_raw_write+0x130>
    1c7e:	80 91 c3 01 	lds	r24, 0x01C3
    1c82:	8b 15       	cp	r24, r11
    1c84:	c1 f4       	brne	.+48     	; 0x1cb6 <sd_raw_write+0x130>
    1c86:	80 91 c4 01 	lds	r24, 0x01C4
    1c8a:	8a 15       	cp	r24, r10
    1c8c:	a1 f4       	brne	.+40     	; 0x1cb6 <sd_raw_write+0x130>
    1c8e:	80 91 c5 01 	lds	r24, 0x01C5
    1c92:	89 15       	cp	r24, r9
    1c94:	81 f4       	brne	.+32     	; 0x1cb6 <sd_raw_write+0x130>
    1c96:	80 91 c6 01 	lds	r24, 0x01C6
    1c9a:	88 15       	cp	r24, r8
    1c9c:	61 f4       	brne	.+24     	; 0x1cb6 <sd_raw_write+0x130>
    1c9e:	80 91 c7 01 	lds	r24, 0x01C7
    1ca2:	87 15       	cp	r24, r7
    1ca4:	41 f4       	brne	.+16     	; 0x1cb6 <sd_raw_write+0x130>
    1ca6:	80 91 c8 01 	lds	r24, 0x01C8
    1caa:	86 15       	cp	r24, r6
    1cac:	21 f4       	brne	.+8      	; 0x1cb6 <sd_raw_write+0x130>
    1cae:	80 91 c9 01 	lds	r24, 0x01C9
    1cb2:	84 15       	cp	r24, r4
    1cb4:	71 f1       	breq	.+92     	; 0x1d12 <sd_raw_write+0x18c>
        {
#if SD_RAW_WRITE_BUFFERING
            if(!sd_raw_sync())
    1cb6:	0d dc       	rcall	.-2022   	; 0x14d2 <sd_raw_sync>
    1cb8:	88 23       	and	r24, r24
    1cba:	09 f4       	brne	.+2      	; 0x1cbe <sd_raw_write+0x138>
    1cbc:	fd c0       	rjmp	.+506    	; 0x1eb8 <sd_raw_write+0x332>
                return 0;
#endif

            if(block_offset || write_length < 512)
    1cbe:	21 14       	cp	r2, r1
    1cc0:	31 04       	cpc	r3, r1
    1cc2:	31 f4       	brne	.+12     	; 0x1cd0 <sd_raw_write+0x14a>
    1cc4:	ab 85       	ldd	r26, Y+11	; 0x0b
    1cc6:	bc 85       	ldd	r27, Y+12	; 0x0c
    1cc8:	e2 e0       	ldi	r30, 0x02	; 2
    1cca:	a0 30       	cpi	r26, 0x00	; 0
    1ccc:	be 07       	cpc	r27, r30
    1cce:	89 f0       	breq	.+34     	; 0x1cf2 <sd_raw_write+0x16c>
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
    1cd0:	25 2d       	mov	r18, r5
    1cd2:	3b 2d       	mov	r19, r11
    1cd4:	4a 2d       	mov	r20, r10
    1cd6:	59 2d       	mov	r21, r9
    1cd8:	68 2d       	mov	r22, r8
    1cda:	77 2d       	mov	r23, r7
    1cdc:	86 2d       	mov	r24, r6
    1cde:	94 2d       	mov	r25, r4
    1ce0:	0a ec       	ldi	r16, 0xCA	; 202
    1ce2:	11 e0       	ldi	r17, 0x01	; 1
    1ce4:	e1 2c       	mov	r14, r1
    1ce6:	e2 e0       	ldi	r30, 0x02	; 2
    1ce8:	fe 2e       	mov	r15, r30
    1cea:	1f dc       	rcall	.-1986   	; 0x152a <sd_raw_read>
    1cec:	88 23       	and	r24, r24
    1cee:	09 f4       	brne	.+2      	; 0x1cf2 <sd_raw_write+0x16c>
    1cf0:	e3 c0       	rjmp	.+454    	; 0x1eb8 <sd_raw_write+0x332>
                    return 0;
            }
            raw_block_address = block_address;
    1cf2:	50 92 c2 01 	sts	0x01C2, r5
    1cf6:	b0 92 c3 01 	sts	0x01C3, r11
    1cfa:	a0 92 c4 01 	sts	0x01C4, r10
    1cfe:	90 92 c5 01 	sts	0x01C5, r9
    1d02:	80 92 c6 01 	sts	0x01C6, r8
    1d06:	70 92 c7 01 	sts	0x01C7, r7
    1d0a:	60 92 c8 01 	sts	0x01C8, r6
    1d0e:	40 92 c9 01 	sts	0x01C9, r4
        }

        if(buffer != raw_block)
    1d12:	29 85       	ldd	r18, Y+9	; 0x09
    1d14:	3a 85       	ldd	r19, Y+10	; 0x0a
    1d16:	81 e0       	ldi	r24, 0x01	; 1
    1d18:	2a 3c       	cpi	r18, 0xCA	; 202
    1d1a:	38 07       	cpc	r19, r24
    1d1c:	91 f0       	breq	.+36     	; 0x1d42 <sd_raw_write+0x1bc>
        {
            memcpy(raw_block + block_offset, buffer, write_length);
    1d1e:	91 01       	movw	r18, r2
    1d20:	26 53       	subi	r18, 0x36	; 54
    1d22:	3e 4f       	sbci	r19, 0xFE	; 254
    1d24:	c9 01       	movw	r24, r18
    1d26:	69 85       	ldd	r22, Y+9	; 0x09
    1d28:	7a 85       	ldd	r23, Y+10	; 0x0a
    1d2a:	4b 85       	ldd	r20, Y+11	; 0x0b
    1d2c:	5c 85       	ldd	r21, Y+12	; 0x0c
    1d2e:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <memcpy>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;
    1d32:	10 92 c1 01 	sts	0x01C1, r1

            if(length == write_length)
    1d36:	ab 85       	ldd	r26, Y+11	; 0x0b
    1d38:	bc 85       	ldd	r27, Y+12	; 0x0c
    1d3a:	ca 16       	cp	r12, r26
    1d3c:	db 06       	cpc	r13, r27
    1d3e:	09 f4       	brne	.+2      	; 0x1d42 <sd_raw_write+0x1bc>
    1d40:	bd c0       	rjmp	.+378    	; 0x1ebc <sd_raw_write+0x336>
                return 1;
#endif
        }

        /* address card */
        select_card();
    1d42:	28 98       	cbi	0x05, 0	; 5

        /* send single block request */
#if SD_RAW_SDHC
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, (sd_raw_card_type & (1 << SD_RAW_SPEC_SDHC) ? block_address / 512 : block_address)))
    1d44:	80 91 c0 01 	lds	r24, 0x01C0
    1d48:	82 ff       	sbrs	r24, 2
    1d4a:	0f c0       	rjmp	.+30     	; 0x1d6a <sd_raw_write+0x1e4>
    1d4c:	25 2d       	mov	r18, r5
    1d4e:	3b 2d       	mov	r19, r11
    1d50:	4a 2d       	mov	r20, r10
    1d52:	59 2d       	mov	r21, r9
    1d54:	68 2d       	mov	r22, r8
    1d56:	77 2d       	mov	r23, r7
    1d58:	86 2d       	mov	r24, r6
    1d5a:	94 2d       	mov	r25, r4
    1d5c:	09 e0       	ldi	r16, 0x09	; 9
    1d5e:	0e 94 22 02 	call	0x444	; 0x444 <__lshrdi3>
    1d62:	ba 01       	movw	r22, r20
    1d64:	42 2f       	mov	r20, r18
    1d66:	53 2f       	mov	r21, r19
    1d68:	04 c0       	rjmp	.+8      	; 0x1d72 <sd_raw_write+0x1ec>
    1d6a:	45 2d       	mov	r20, r5
    1d6c:	5b 2d       	mov	r21, r11
    1d6e:	6a 2d       	mov	r22, r10
    1d70:	79 2d       	mov	r23, r9
    1d72:	88 e1       	ldi	r24, 0x18	; 24
    1d74:	74 db       	rcall	.-2328   	; 0x145e <sd_raw_send_command>
    1d76:	88 23       	and	r24, r24
    1d78:	11 f0       	breq	.+4      	; 0x1d7e <sd_raw_write+0x1f8>
#else
        if(sd_raw_send_command(CMD_WRITE_SINGLE_BLOCK, block_address))
#endif
        {
            unselect_card();
    1d7a:	28 9a       	sbi	0x05, 0	; 5
    1d7c:	9d c0       	rjmp	.+314    	; 0x1eb8 <sd_raw_write+0x332>
            return 0;
        }

        /* send start byte */
        sd_raw_send_byte(0xfe);
    1d7e:	8e ef       	ldi	r24, 0xFE	; 254
    1d80:	5c db       	rcall	.-2376   	; 0x143a <sd_raw_send_byte>

        /* write byte block */
        uint8_t* cache = raw_block;
    1d82:	0a ec       	ldi	r16, 0xCA	; 202
    1d84:	11 e0       	ldi	r17, 0x01	; 1
    1d86:	ab 84       	ldd	r10, Y+11	; 0x0b
    1d88:	bc 84       	ldd	r11, Y+12	; 0x0c
        for(uint16_t i = 0; i < 512; ++i)
            sd_raw_send_byte(*cache++);
    1d8a:	f8 01       	movw	r30, r16
    1d8c:	81 91       	ld	r24, Z+
    1d8e:	8f 01       	movw	r16, r30
    1d90:	54 db       	rcall	.-2392   	; 0x143a <sd_raw_send_byte>
        /* send start byte */
        sd_raw_send_byte(0xfe);

        /* write byte block */
        uint8_t* cache = raw_block;
        for(uint16_t i = 0; i < 512; ++i)
    1d92:	f3 e0       	ldi	r31, 0x03	; 3
    1d94:	0a 3c       	cpi	r16, 0xCA	; 202
    1d96:	1f 07       	cpc	r17, r31
    1d98:	c1 f7       	brne	.-16     	; 0x1d8a <sd_raw_write+0x204>
    1d9a:	bc 86       	std	Y+12, r11	; 0x0c
    1d9c:	ab 86       	std	Y+11, r10	; 0x0b
            sd_raw_send_byte(*cache++);

        /* write dummy crc16 */
        sd_raw_send_byte(0xff);
    1d9e:	8f ef       	ldi	r24, 0xFF	; 255
    1da0:	4c db       	rcall	.-2408   	; 0x143a <sd_raw_send_byte>
        sd_raw_send_byte(0xff);
    1da2:	8f ef       	ldi	r24, 0xFF	; 255
    1da4:	4a db       	rcall	.-2412   	; 0x143a <sd_raw_send_byte>
    1da6:	0b 85       	ldd	r16, Y+11	; 0x0b
    1da8:	1c 85       	ldd	r17, Y+12	; 0x0c

        /* wait while card is busy */
        while(sd_raw_rec_byte() != 0xff);
    1daa:	4f db       	rcall	.-2402   	; 0x144a <sd_raw_rec_byte>
    1dac:	8f 3f       	cpi	r24, 0xFF	; 255
    1dae:	e9 f7       	brne	.-6      	; 0x1daa <sd_raw_write+0x224>
    1db0:	1c 87       	std	Y+12, r17	; 0x0c
    1db2:	0b 87       	std	Y+11, r16	; 0x0b
        sd_raw_rec_byte();
    1db4:	4a db       	rcall	.-2412   	; 0x144a <sd_raw_rec_byte>

        /* deaddress card */
        unselect_card();
    1db6:	28 9a       	sbi	0x05, 0	; 5

        buffer += write_length;
    1db8:	e9 84       	ldd	r14, Y+9	; 0x09
    1dba:	fa 84       	ldd	r15, Y+10	; 0x0a
    1dbc:	2b 85       	ldd	r18, Y+11	; 0x0b
    1dbe:	3c 85       	ldd	r19, Y+12	; 0x0c
    1dc0:	e2 0e       	add	r14, r18
    1dc2:	f3 1e       	adc	r15, r19
    1dc4:	fa 86       	std	Y+10, r15	; 0x0a
    1dc6:	e9 86       	std	Y+9, r14	; 0x09
        offset += write_length;
    1dc8:	40 e0       	ldi	r20, 0x00	; 0
    1dca:	50 e0       	ldi	r21, 0x00	; 0
    1dcc:	60 e0       	ldi	r22, 0x00	; 0
    1dce:	70 e0       	ldi	r23, 0x00	; 0
    1dd0:	cb 01       	movw	r24, r22
    1dd2:	89 80       	ldd	r8, Y+1	; 0x01
    1dd4:	82 0e       	add	r8, r18
    1dd6:	11 e0       	ldi	r17, 0x01	; 1
    1dd8:	a9 81       	ldd	r26, Y+1	; 0x01
    1dda:	8a 16       	cp	r8, r26
    1ddc:	08 f0       	brcs	.+2      	; 0x1de0 <sd_raw_write+0x25a>
    1dde:	10 e0       	ldi	r17, 0x00	; 0
    1de0:	fa 81       	ldd	r31, Y+2	; 0x02
    1de2:	f3 0f       	add	r31, r19
    1de4:	e1 e0       	ldi	r30, 0x01	; 1
    1de6:	ba 81       	ldd	r27, Y+2	; 0x02
    1de8:	fb 17       	cp	r31, r27
    1dea:	08 f0       	brcs	.+2      	; 0x1dee <sd_raw_write+0x268>
    1dec:	e0 e0       	ldi	r30, 0x00	; 0
    1dee:	91 2e       	mov	r9, r17
    1df0:	9f 0e       	add	r9, r31
    1df2:	a1 e0       	ldi	r26, 0x01	; 1
    1df4:	9f 16       	cp	r9, r31
    1df6:	08 f0       	brcs	.+2      	; 0x1dfa <sd_raw_write+0x274>
    1df8:	a0 e0       	ldi	r26, 0x00	; 0
    1dfa:	ea 2b       	or	r30, r26
    1dfc:	1b 81       	ldd	r17, Y+3	; 0x03
    1dfe:	14 0f       	add	r17, r20
    1e00:	f1 e0       	ldi	r31, 0x01	; 1
    1e02:	eb 80       	ldd	r14, Y+3	; 0x03
    1e04:	1e 15       	cp	r17, r14
    1e06:	08 f0       	brcs	.+2      	; 0x1e0a <sd_raw_write+0x284>
    1e08:	f0 e0       	ldi	r31, 0x00	; 0
    1e0a:	ae 2e       	mov	r10, r30
    1e0c:	a1 0e       	add	r10, r17
    1e0e:	e1 e0       	ldi	r30, 0x01	; 1
    1e10:	a1 16       	cp	r10, r17
    1e12:	08 f0       	brcs	.+2      	; 0x1e16 <sd_raw_write+0x290>
    1e14:	e0 e0       	ldi	r30, 0x00	; 0
    1e16:	fe 2b       	or	r31, r30
    1e18:	ec 81       	ldd	r30, Y+4	; 0x04
    1e1a:	e5 0f       	add	r30, r21
    1e1c:	01 e0       	ldi	r16, 0x01	; 1
    1e1e:	fc 80       	ldd	r15, Y+4	; 0x04
    1e20:	ef 15       	cp	r30, r15
    1e22:	08 f0       	brcs	.+2      	; 0x1e26 <sd_raw_write+0x2a0>
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	bf 2e       	mov	r11, r31
    1e28:	be 0e       	add	r11, r30
    1e2a:	f1 e0       	ldi	r31, 0x01	; 1
    1e2c:	be 16       	cp	r11, r30
    1e2e:	08 f0       	brcs	.+2      	; 0x1e32 <sd_raw_write+0x2ac>
    1e30:	f0 e0       	ldi	r31, 0x00	; 0
    1e32:	0f 2b       	or	r16, r31
    1e34:	1d 81       	ldd	r17, Y+5	; 0x05
    1e36:	16 0f       	add	r17, r22
    1e38:	b1 e0       	ldi	r27, 0x01	; 1
    1e3a:	ad 81       	ldd	r26, Y+5	; 0x05
    1e3c:	1a 17       	cp	r17, r26
    1e3e:	08 f0       	brcs	.+2      	; 0x1e42 <sd_raw_write+0x2bc>
    1e40:	b0 e0       	ldi	r27, 0x00	; 0
    1e42:	01 0f       	add	r16, r17
    1e44:	f1 e0       	ldi	r31, 0x01	; 1
    1e46:	01 17       	cp	r16, r17
    1e48:	08 f0       	brcs	.+2      	; 0x1e4c <sd_raw_write+0x2c6>
    1e4a:	f0 e0       	ldi	r31, 0x00	; 0
    1e4c:	bf 2b       	or	r27, r31
    1e4e:	7e 80       	ldd	r7, Y+6	; 0x06
    1e50:	77 0e       	add	r7, r23
    1e52:	11 e0       	ldi	r17, 0x01	; 1
    1e54:	ee 81       	ldd	r30, Y+6	; 0x06
    1e56:	7e 16       	cp	r7, r30
    1e58:	08 f0       	brcs	.+2      	; 0x1e5c <sd_raw_write+0x2d6>
    1e5a:	10 e0       	ldi	r17, 0x00	; 0
    1e5c:	6b 2e       	mov	r6, r27
    1e5e:	67 0c       	add	r6, r7
    1e60:	a1 e0       	ldi	r26, 0x01	; 1
    1e62:	67 14       	cp	r6, r7
    1e64:	08 f0       	brcs	.+2      	; 0x1e68 <sd_raw_write+0x2e2>
    1e66:	a0 e0       	ldi	r26, 0x00	; 0
    1e68:	1a 2b       	or	r17, r26
    1e6a:	af 81       	ldd	r26, Y+7	; 0x07
    1e6c:	a8 0f       	add	r26, r24
    1e6e:	77 24       	eor	r7, r7
    1e70:	73 94       	inc	r7
    1e72:	ff 81       	ldd	r31, Y+7	; 0x07
    1e74:	af 17       	cp	r26, r31
    1e76:	08 f0       	brcs	.+2      	; 0x1e7a <sd_raw_write+0x2f4>
    1e78:	77 24       	eor	r7, r7
    1e7a:	f1 2f       	mov	r31, r17
    1e7c:	fa 0f       	add	r31, r26
    1e7e:	11 e0       	ldi	r17, 0x01	; 1
    1e80:	fa 17       	cp	r31, r26
    1e82:	08 f0       	brcs	.+2      	; 0x1e86 <sd_raw_write+0x300>
    1e84:	10 e0       	ldi	r17, 0x00	; 0
    1e86:	71 2a       	or	r7, r17
    1e88:	88 85       	ldd	r24, Y+8	; 0x08
    1e8a:	89 0f       	add	r24, r25
    1e8c:	89 82       	std	Y+1, r8	; 0x01
    1e8e:	9a 82       	std	Y+2, r9	; 0x02
    1e90:	ab 82       	std	Y+3, r10	; 0x03
    1e92:	bc 82       	std	Y+4, r11	; 0x04
    1e94:	0d 83       	std	Y+5, r16	; 0x05
    1e96:	6e 82       	std	Y+6, r6	; 0x06
    1e98:	ff 83       	std	Y+7, r31	; 0x07
    1e9a:	78 0e       	add	r7, r24
    1e9c:	78 86       	std	Y+8, r7	; 0x08
        length -= write_length;
    1e9e:	eb 84       	ldd	r14, Y+11	; 0x0b
    1ea0:	fc 84       	ldd	r15, Y+12	; 0x0c
    1ea2:	ce 18       	sub	r12, r14
    1ea4:	df 08       	sbc	r13, r15

#if SD_RAW_WRITE_BUFFERING
        raw_block_written = 1;
    1ea6:	ff 24       	eor	r15, r15
    1ea8:	f3 94       	inc	r15
    1eaa:	f0 92 c1 01 	sts	0x01C1, r15
        return 0;

    offset_t block_address;
    uint16_t block_offset;
    uint16_t write_length;
    while(length > 0)
    1eae:	c1 14       	cp	r12, r1
    1eb0:	d1 04       	cpc	r13, r1
    1eb2:	09 f0       	breq	.+2      	; 0x1eb6 <sd_raw_write+0x330>
    1eb4:	92 ce       	rjmp	.-732    	; 0x1bda <sd_raw_write+0x54>
    1eb6:	02 c0       	rjmp	.+4      	; 0x1ebc <sd_raw_write+0x336>
#endif

            if(block_offset || write_length < 512)
            {
                if(!sd_raw_read(block_address, raw_block, sizeof(raw_block)))
                    return 0;
    1eb8:	80 e0       	ldi	r24, 0x00	; 0
    1eba:	01 c0       	rjmp	.+2      	; 0x1ebe <sd_raw_write+0x338>

#if SD_RAW_WRITE_BUFFERING
            raw_block_written = 0;

            if(length == write_length)
                return 1;
    1ebc:	81 e0       	ldi	r24, 0x01	; 1
        raw_block_written = 1;
#endif
    }

    return 1;
}
    1ebe:	2c 96       	adiw	r28, 0x0c	; 12
    1ec0:	0f b6       	in	r0, 0x3f	; 63
    1ec2:	f8 94       	cli
    1ec4:	de bf       	out	0x3e, r29	; 62
    1ec6:	0f be       	out	0x3f, r0	; 63
    1ec8:	cd bf       	out	0x3d, r28	; 61
    1eca:	cf 91       	pop	r28
    1ecc:	df 91       	pop	r29
    1ece:	1f 91       	pop	r17
    1ed0:	0f 91       	pop	r16
    1ed2:	ff 90       	pop	r15
    1ed4:	ef 90       	pop	r14
    1ed6:	df 90       	pop	r13
    1ed8:	cf 90       	pop	r12
    1eda:	bf 90       	pop	r11
    1edc:	af 90       	pop	r10
    1ede:	9f 90       	pop	r9
    1ee0:	8f 90       	pop	r8
    1ee2:	7f 90       	pop	r7
    1ee4:	6f 90       	pop	r6
    1ee6:	5f 90       	pop	r5
    1ee8:	4f 90       	pop	r4
    1eea:	3f 90       	pop	r3
    1eec:	2f 90       	pop	r2
    1eee:	08 95       	ret

00001ef0 <sd_raw_write_interval>:
 * \param[in] p An opaque pointer directly passed to the callback function.
 * \returns 0 on failure, 1 on success
 * \see sd_raw_read_interval, sd_raw_write, sd_raw_read
 */
uint8_t sd_raw_write_interval(offset_t offset, uint8_t* buffer, uintptr_t length, sd_raw_write_interval_handler_t callback, void* p)
{
    1ef0:	2f 92       	push	r2
    1ef2:	3f 92       	push	r3
    1ef4:	4f 92       	push	r4
    1ef6:	5f 92       	push	r5
    1ef8:	6f 92       	push	r6
    1efa:	7f 92       	push	r7
    1efc:	8f 92       	push	r8
    1efe:	9f 92       	push	r9
    1f00:	af 92       	push	r10
    1f02:	bf 92       	push	r11
    1f04:	cf 92       	push	r12
    1f06:	df 92       	push	r13
    1f08:	ef 92       	push	r14
    1f0a:	ff 92       	push	r15
    1f0c:	0f 93       	push	r16
    1f0e:	1f 93       	push	r17
    1f10:	df 93       	push	r29
    1f12:	cf 93       	push	r28
    1f14:	cd b7       	in	r28, 0x3d	; 61
    1f16:	de b7       	in	r29, 0x3e	; 62
    1f18:	27 97       	sbiw	r28, 0x07	; 7
    1f1a:	0f b6       	in	r0, 0x3f	; 63
    1f1c:	f8 94       	cli
    1f1e:	de bf       	out	0x3e, r29	; 62
    1f20:	0f be       	out	0x3f, r0	; 63
    1f22:	cd bf       	out	0x3d, r28	; 61
    1f24:	49 01       	movw	r8, r18
    1f26:	25 2e       	mov	r2, r21
    1f28:	36 2e       	mov	r3, r22
    1f2a:	47 2e       	mov	r4, r23
    1f2c:	58 2e       	mov	r5, r24
    1f2e:	99 83       	std	Y+1, r25	; 0x01
    1f30:	1b 83       	std	Y+3, r17	; 0x03
    1f32:	0a 83       	std	Y+2, r16	; 0x02
    1f34:	37 01       	movw	r6, r14
    1f36:	dd 82       	std	Y+5, r13	; 0x05
    1f38:	cc 82       	std	Y+4, r12	; 0x04
#if SD_RAW_SAVE_RAM
    #error "SD_RAW_WRITE_SUPPORT is not supported together with SD_RAW_SAVE_RAM"
#endif

    if(!buffer || !callback)
    1f3a:	01 15       	cp	r16, r1
    1f3c:	11 05       	cpc	r17, r1
    1f3e:	09 f4       	brne	.+2      	; 0x1f42 <sd_raw_write_interval+0x52>
    1f40:	7a c0       	rjmp	.+244    	; 0x2036 <sd_raw_write_interval+0x146>
    1f42:	c1 14       	cp	r12, r1
    1f44:	d1 04       	cpc	r13, r1
    1f46:	09 f4       	brne	.+2      	; 0x1f4a <sd_raw_write_interval+0x5a>
    1f48:	76 c0       	rjmp	.+236    	; 0x2036 <sd_raw_write_interval+0x146>
        return 0;

    uint8_t endless = (length == 0);
    1f4a:	dd 24       	eor	r13, r13
    1f4c:	d3 94       	inc	r13
    1f4e:	e1 14       	cp	r14, r1
    1f50:	f1 04       	cpc	r15, r1
    1f52:	09 f4       	brne	.+2      	; 0x1f56 <sd_raw_write_interval+0x66>
    1f54:	66 c0       	rjmp	.+204    	; 0x2022 <sd_raw_write_interval+0x132>
    1f56:	dd 24       	eor	r13, r13
    1f58:	64 c0       	rjmp	.+200    	; 0x2022 <sd_raw_write_interval+0x132>
    while(endless || length > 0)
    {
        uint16_t bytes_to_write = callback(buffer, offset, p);
    1f5a:	8a 81       	ldd	r24, Y+2	; 0x02
    1f5c:	9b 81       	ldd	r25, Y+3	; 0x03
    1f5e:	84 01       	movw	r16, r8
    1f60:	2c 2d       	mov	r18, r12
    1f62:	32 2d       	mov	r19, r2
    1f64:	43 2d       	mov	r20, r3
    1f66:	54 2d       	mov	r21, r4
    1f68:	65 2d       	mov	r22, r5
    1f6a:	79 81       	ldd	r23, Y+1	; 0x01
    1f6c:	75 01       	movw	r14, r10
    1f6e:	ec 81       	ldd	r30, Y+4	; 0x04
    1f70:	fd 81       	ldd	r31, Y+5	; 0x05
    1f72:	09 95       	icall
    1f74:	9f 83       	std	Y+7, r25	; 0x07
    1f76:	8e 83       	std	Y+6, r24	; 0x06
        if(!bytes_to_write)
    1f78:	00 97       	sbiw	r24, 0x00	; 0
    1f7a:	09 f4       	brne	.+2      	; 0x1f7e <sd_raw_write_interval+0x8e>
    1f7c:	5a c0       	rjmp	.+180    	; 0x2032 <sd_raw_write_interval+0x142>
            break;
        if(!endless && bytes_to_write > length)
    1f7e:	dd 20       	and	r13, r13
    1f80:	21 f4       	brne	.+8      	; 0x1f8a <sd_raw_write_interval+0x9a>
    1f82:	68 16       	cp	r6, r24
    1f84:	79 06       	cpc	r7, r25
    1f86:	08 f4       	brcc	.+2      	; 0x1f8a <sd_raw_write_interval+0x9a>
    1f88:	56 c0       	rjmp	.+172    	; 0x2036 <sd_raw_write_interval+0x146>
            return 0;

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
    1f8a:	94 01       	movw	r18, r8
    1f8c:	4c 2d       	mov	r20, r12
    1f8e:	52 2d       	mov	r21, r2
    1f90:	63 2d       	mov	r22, r3
    1f92:	74 2d       	mov	r23, r4
    1f94:	85 2d       	mov	r24, r5
    1f96:	99 81       	ldd	r25, Y+1	; 0x01
    1f98:	0a 81       	ldd	r16, Y+2	; 0x02
    1f9a:	1b 81       	ldd	r17, Y+3	; 0x03
    1f9c:	ee 80       	ldd	r14, Y+6	; 0x06
    1f9e:	ff 80       	ldd	r15, Y+7	; 0x07
    1fa0:	f2 dd       	rcall	.-1052   	; 0x1b86 <sd_raw_write>
    1fa2:	88 23       	and	r24, r24
    1fa4:	09 f4       	brne	.+2      	; 0x1fa8 <sd_raw_write_interval+0xb8>
    1fa6:	47 c0       	rjmp	.+142    	; 0x2036 <sd_raw_write_interval+0x146>
            return 0;

        offset += bytes_to_write;
    1fa8:	ee 80       	ldd	r14, Y+6	; 0x06
    1faa:	ff 80       	ldd	r15, Y+7	; 0x07
    1fac:	97 01       	movw	r18, r14
    1fae:	e8 2d       	mov	r30, r8
    1fb0:	ee 0d       	add	r30, r14
    1fb2:	f1 e0       	ldi	r31, 0x01	; 1
    1fb4:	e8 15       	cp	r30, r8
    1fb6:	08 f0       	brcs	.+2      	; 0x1fba <sd_raw_write_interval+0xca>
    1fb8:	f0 e0       	ldi	r31, 0x00	; 0
    1fba:	99 2d       	mov	r25, r9
    1fbc:	93 0f       	add	r25, r19
    1fbe:	21 e0       	ldi	r18, 0x01	; 1
    1fc0:	99 15       	cp	r25, r9
    1fc2:	08 f0       	brcs	.+2      	; 0x1fc6 <sd_raw_write_interval+0xd6>
    1fc4:	20 e0       	ldi	r18, 0x00	; 0
    1fc6:	9f 2e       	mov	r9, r31
    1fc8:	99 0e       	add	r9, r25
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	99 16       	cp	r9, r25
    1fce:	08 f0       	brcs	.+2      	; 0x1fd2 <sd_raw_write_interval+0xe2>
    1fd0:	80 e0       	ldi	r24, 0x00	; 0
    1fd2:	82 2b       	or	r24, r18
    1fd4:	8c 0d       	add	r24, r12
    1fd6:	51 e0       	ldi	r21, 0x01	; 1
    1fd8:	8c 15       	cp	r24, r12
    1fda:	08 f0       	brcs	.+2      	; 0x1fde <sd_raw_write_interval+0xee>
    1fdc:	50 e0       	ldi	r21, 0x00	; 0
    1fde:	52 0d       	add	r21, r2
    1fe0:	41 e0       	ldi	r20, 0x01	; 1
    1fe2:	52 15       	cp	r21, r2
    1fe4:	08 f0       	brcs	.+2      	; 0x1fe8 <sd_raw_write_interval+0xf8>
    1fe6:	40 e0       	ldi	r20, 0x00	; 0
    1fe8:	43 0d       	add	r20, r3
    1fea:	31 e0       	ldi	r19, 0x01	; 1
    1fec:	43 15       	cp	r20, r3
    1fee:	08 f0       	brcs	.+2      	; 0x1ff2 <sd_raw_write_interval+0x102>
    1ff0:	30 e0       	ldi	r19, 0x00	; 0
    1ff2:	34 0d       	add	r19, r4
    1ff4:	21 e0       	ldi	r18, 0x01	; 1
    1ff6:	34 15       	cp	r19, r4
    1ff8:	08 f0       	brcs	.+2      	; 0x1ffc <sd_raw_write_interval+0x10c>
    1ffa:	20 e0       	ldi	r18, 0x00	; 0
    1ffc:	25 0d       	add	r18, r5
    1ffe:	91 e0       	ldi	r25, 0x01	; 1
    2000:	25 15       	cp	r18, r5
    2002:	08 f0       	brcs	.+2      	; 0x2006 <sd_raw_write_interval+0x116>
    2004:	90 e0       	ldi	r25, 0x00	; 0
    2006:	8e 2e       	mov	r8, r30
    2008:	c8 2e       	mov	r12, r24
    200a:	25 2e       	mov	r2, r21
    200c:	34 2e       	mov	r3, r20
    200e:	43 2e       	mov	r4, r19
    2010:	52 2e       	mov	r5, r18
    2012:	f9 81       	ldd	r31, Y+1	; 0x01
    2014:	f9 0f       	add	r31, r25
    2016:	f9 83       	std	Y+1, r31	; 0x01
        length -= bytes_to_write;
    2018:	8e 81       	ldd	r24, Y+6	; 0x06
    201a:	9f 81       	ldd	r25, Y+7	; 0x07
    201c:	68 1a       	sub	r6, r24
    201e:	79 0a       	sbc	r7, r25
    2020:	01 c0       	rjmp	.+2      	; 0x2024 <sd_raw_write_interval+0x134>
    2022:	c4 2e       	mov	r12, r20

    if(!buffer || !callback)
        return 0;

    uint8_t endless = (length == 0);
    while(endless || length > 0)
    2024:	dd 20       	and	r13, r13
    2026:	09 f0       	breq	.+2      	; 0x202a <sd_raw_write_interval+0x13a>
    2028:	98 cf       	rjmp	.-208    	; 0x1f5a <sd_raw_write_interval+0x6a>
    202a:	61 14       	cp	r6, r1
    202c:	71 04       	cpc	r7, r1
    202e:	09 f0       	breq	.+2      	; 0x2032 <sd_raw_write_interval+0x142>
    2030:	94 cf       	rjmp	.-216    	; 0x1f5a <sd_raw_write_interval+0x6a>

        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	01 c0       	rjmp	.+2      	; 0x2038 <sd_raw_write_interval+0x148>

        /* as writing is always buffered, we directly
         * hand over the request to sd_raw_write()
         */
        if(!sd_raw_write(offset, buffer, bytes_to_write))
            return 0;
    2036:	80 e0       	ldi	r24, 0x00	; 0
        offset += bytes_to_write;
        length -= bytes_to_write;
    }

    return 1;
}
    2038:	27 96       	adiw	r28, 0x07	; 7
    203a:	0f b6       	in	r0, 0x3f	; 63
    203c:	f8 94       	cli
    203e:	de bf       	out	0x3e, r29	; 62
    2040:	0f be       	out	0x3f, r0	; 63
    2042:	cd bf       	out	0x3d, r28	; 61
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	1f 91       	pop	r17
    204a:	0f 91       	pop	r16
    204c:	ff 90       	pop	r15
    204e:	ef 90       	pop	r14
    2050:	df 90       	pop	r13
    2052:	cf 90       	pop	r12
    2054:	bf 90       	pop	r11
    2056:	af 90       	pop	r10
    2058:	9f 90       	pop	r9
    205a:	8f 90       	pop	r8
    205c:	7f 90       	pop	r7
    205e:	6f 90       	pop	r6
    2060:	5f 90       	pop	r5
    2062:	4f 90       	pop	r4
    2064:	3f 90       	pop	r3
    2066:	2f 90       	pop	r2
    2068:	08 95       	ret

0000206a <sd_raw_get_info>:
 *
 * \param[in] info A pointer to the structure into which to save the information.
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    206a:	bf 92       	push	r11
    206c:	cf 92       	push	r12
    206e:	df 92       	push	r13
    2070:	ef 92       	push	r14
    2072:	ff 92       	push	r15
    2074:	0f 93       	push	r16
    2076:	1f 93       	push	r17
    2078:	cf 93       	push	r28
    207a:	df 93       	push	r29
    207c:	ec 01       	movw	r28, r24
    if(!info || !sd_raw_available())
    207e:	00 97       	sbiw	r24, 0x00	; 0
    2080:	09 f4       	brne	.+2      	; 0x2084 <sd_raw_get_info+0x1a>
    2082:	12 c1       	rjmp	.+548    	; 0x22a8 <sd_raw_get_info+0x23e>
    2084:	22 da       	rcall	.-3004   	; 0x14ca <sd_raw_available>
    2086:	88 23       	and	r24, r24
    2088:	09 f4       	brne	.+2      	; 0x208c <sd_raw_get_info+0x22>
    208a:	0e c1       	rjmp	.+540    	; 0x22a8 <sd_raw_get_info+0x23e>
        return 0;

    memset(info, 0, sizeof(*info));
    208c:	7e 01       	movw	r14, r28
    208e:	ec 2f       	mov	r30, r28
    2090:	ff 2d       	mov	r31, r15
    2092:	8d e1       	ldi	r24, 0x1D	; 29
    2094:	df 01       	movw	r26, r30
    2096:	1d 92       	st	X+, r1
    2098:	8a 95       	dec	r24
    209a:	e9 f7       	brne	.-6      	; 0x2096 <sd_raw_get_info+0x2c>

    select_card();
    209c:	28 98       	cbi	0x05, 0	; 5

    /* read cid register */
    if(sd_raw_send_command(CMD_SEND_CID, 0))
    209e:	8a e0       	ldi	r24, 0x0A	; 10
    20a0:	40 e0       	ldi	r20, 0x00	; 0
    20a2:	50 e0       	ldi	r21, 0x00	; 0
    20a4:	ba 01       	movw	r22, r20
    20a6:	db d9       	rcall	.-3146   	; 0x145e <sd_raw_send_command>
    20a8:	88 23       	and	r24, r24
    20aa:	09 f0       	breq	.+2      	; 0x20ae <sd_raw_get_info+0x44>
    20ac:	5c c0       	rjmp	.+184    	; 0x2166 <sd_raw_get_info+0xfc>
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    20ae:	cd d9       	rcall	.-3174   	; 0x144a <sd_raw_rec_byte>
    20b0:	8e 3f       	cpi	r24, 0xFE	; 254
    20b2:	e9 f7       	brne	.-6      	; 0x20ae <sd_raw_get_info+0x44>
    20b4:	fe 01       	movw	r30, r28
    20b6:	dc 2e       	mov	r13, r28
    20b8:	ec 2e       	mov	r14, r28
    20ba:	ff 2e       	mov	r15, r31
    20bc:	00 e6       	ldi	r16, 0x60	; 96
    20be:	10 e0       	ldi	r17, 0x00	; 0
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    20c0:	c4 d9       	rcall	.-3192   	; 0x144a <sd_raw_rec_byte>

        switch(i)
    20c2:	9e 2d       	mov	r25, r14
    20c4:	9d 19       	sub	r25, r13
    20c6:	98 30       	cpi	r25, 0x08	; 8
    20c8:	28 f4       	brcc	.+10     	; 0x20d4 <sd_raw_get_info+0x6a>
    20ca:	93 30       	cpi	r25, 0x03	; 3
    20cc:	90 f4       	brcc	.+36     	; 0x20f2 <sd_raw_get_info+0x88>
    20ce:	99 23       	and	r25, r25
    20d0:	59 f0       	breq	.+22     	; 0x20e8 <sd_raw_get_info+0x7e>
    20d2:	0c c0       	rjmp	.+24     	; 0x20ec <sd_raw_get_info+0x82>
    20d4:	9d 30       	cpi	r25, 0x0D	; 13
    20d6:	18 f4       	brcc	.+6      	; 0x20de <sd_raw_get_info+0x74>
    20d8:	99 30       	cpi	r25, 0x09	; 9
    20da:	80 f4       	brcc	.+32     	; 0x20fc <sd_raw_get_info+0x92>
    20dc:	0d c0       	rjmp	.+26     	; 0x20f8 <sd_raw_get_info+0x8e>
    20de:	9d 30       	cpi	r25, 0x0D	; 13
    20e0:	29 f1       	breq	.+74     	; 0x212c <sd_raw_get_info+0xc2>
    20e2:	9e 30       	cpi	r25, 0x0E	; 14
    20e4:	79 f5       	brne	.+94     	; 0x2144 <sd_raw_get_info+0xda>
    20e6:	26 c0       	rjmp	.+76     	; 0x2134 <sd_raw_get_info+0xca>
        {
            case 0:
                info->manufacturer = b;
    20e8:	88 83       	st	Y, r24
                break;
    20ea:	2c c0       	rjmp	.+88     	; 0x2144 <sd_raw_get_info+0xda>
            case 1:
            case 2:
                info->oem[i - 1] = b;
    20ec:	d7 01       	movw	r26, r14
    20ee:	8c 93       	st	X, r24
                break;
    20f0:	29 c0       	rjmp	.+82     	; 0x2144 <sd_raw_get_info+0xda>
            case 3:
            case 4:
            case 5:
            case 6:
            case 7:
                info->product[i - 3] = b;
    20f2:	f7 01       	movw	r30, r14
    20f4:	81 83       	std	Z+1, r24	; 0x01
                break;
    20f6:	26 c0       	rjmp	.+76     	; 0x2144 <sd_raw_get_info+0xda>
            case 8:
                info->revision = b;
    20f8:	8a 87       	std	Y+10, r24	; 0x0a
                break;
    20fa:	24 c0       	rjmp	.+72     	; 0x2144 <sd_raw_get_info+0xda>
            case 9:
            case 10:
            case 11:
            case 12:
                info->serial |= (uint32_t) b << ((12 - i) * 8);
    20fc:	90 e0       	ldi	r25, 0x00	; 0
    20fe:	a0 e0       	ldi	r26, 0x00	; 0
    2100:	b0 e0       	ldi	r27, 0x00	; 0
    2102:	00 2e       	mov	r0, r16
    2104:	04 c0       	rjmp	.+8      	; 0x210e <sd_raw_get_info+0xa4>
    2106:	88 0f       	add	r24, r24
    2108:	99 1f       	adc	r25, r25
    210a:	aa 1f       	adc	r26, r26
    210c:	bb 1f       	adc	r27, r27
    210e:	0a 94       	dec	r0
    2110:	d2 f7       	brpl	.-12     	; 0x2106 <sd_raw_get_info+0x9c>
    2112:	2b 85       	ldd	r18, Y+11	; 0x0b
    2114:	3c 85       	ldd	r19, Y+12	; 0x0c
    2116:	4d 85       	ldd	r20, Y+13	; 0x0d
    2118:	5e 85       	ldd	r21, Y+14	; 0x0e
    211a:	28 2b       	or	r18, r24
    211c:	39 2b       	or	r19, r25
    211e:	4a 2b       	or	r20, r26
    2120:	5b 2b       	or	r21, r27
    2122:	2b 87       	std	Y+11, r18	; 0x0b
    2124:	3c 87       	std	Y+12, r19	; 0x0c
    2126:	4d 87       	std	Y+13, r20	; 0x0d
    2128:	5e 87       	std	Y+14, r21	; 0x0e
                break;
    212a:	0c c0       	rjmp	.+24     	; 0x2144 <sd_raw_get_info+0xda>
            case 13:
                info->manufacturing_year = b << 4;
    212c:	82 95       	swap	r24
    212e:	80 7f       	andi	r24, 0xF0	; 240
    2130:	8f 87       	std	Y+15, r24	; 0x0f
                break;
    2132:	08 c0       	rjmp	.+16     	; 0x2144 <sd_raw_get_info+0xda>
            case 14:
                info->manufacturing_year |= b >> 4;
    2134:	28 2f       	mov	r18, r24
    2136:	22 95       	swap	r18
    2138:	2f 70       	andi	r18, 0x0F	; 15
    213a:	9f 85       	ldd	r25, Y+15	; 0x0f
    213c:	92 2b       	or	r25, r18
    213e:	9f 87       	std	Y+15, r25	; 0x0f
                info->manufacturing_month = b & 0x0f;
    2140:	8f 70       	andi	r24, 0x0F	; 15
    2142:	88 8b       	std	Y+16, r24	; 0x10
                break;
    2144:	08 94       	sec
    2146:	e1 1c       	adc	r14, r1
    2148:	f1 1c       	adc	r15, r1
    214a:	08 50       	subi	r16, 0x08	; 8
    214c:	10 40       	sbci	r17, 0x00	; 0
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    214e:	ff ef       	ldi	r31, 0xFF	; 255
    2150:	00 3d       	cpi	r16, 0xD0	; 208
    2152:	1f 07       	cpc	r17, r31
    2154:	09 f0       	breq	.+2      	; 0x2158 <sd_raw_get_info+0xee>
    2156:	b4 cf       	rjmp	.-152    	; 0x20c0 <sd_raw_get_info+0x56>
#if SD_RAW_SDHC
    uint16_t csd_c_size = 0;
#else
    uint32_t csd_c_size = 0;
#endif
    if(sd_raw_send_command(CMD_SEND_CSD, 0))
    2158:	89 e0       	ldi	r24, 0x09	; 9
    215a:	40 e0       	ldi	r20, 0x00	; 0
    215c:	50 e0       	ldi	r21, 0x00	; 0
    215e:	ba 01       	movw	r22, r20
    2160:	7e d9       	rcall	.-3332   	; 0x145e <sd_raw_send_command>
    2162:	88 23       	and	r24, r24
    2164:	11 f0       	breq	.+4      	; 0x216a <sd_raw_get_info+0x100>
    {
        unselect_card();
    2166:	28 9a       	sbi	0x05, 0	; 5
    2168:	9f c0       	rjmp	.+318    	; 0x22a8 <sd_raw_get_info+0x23e>
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    216a:	6f d9       	rcall	.-3362   	; 0x144a <sd_raw_rec_byte>
    216c:	8e 3f       	cpi	r24, 0xFE	; 254
    216e:	e9 f7       	brne	.-6      	; 0x216a <sd_raw_get_info+0x100>
    2170:	10 e0       	ldi	r17, 0x00	; 0
    2172:	ee 24       	eor	r14, r14
    2174:	ff 24       	eor	r15, r15
    2176:	dd 24       	eor	r13, r13
    2178:	bb 24       	eor	r11, r11
            if(b & 0x40)
                info->flag_copy = 1;
            if(b & 0x20)
                info->flag_write_protect = 1;
            if(b & 0x10)
                info->flag_write_protect_temp = 1;
    217a:	cc 24       	eor	r12, r12
    217c:	c3 94       	inc	r12
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    {
        uint8_t b = sd_raw_rec_byte();
    217e:	65 d9       	rcall	.-3382   	; 0x144a <sd_raw_rec_byte>

        if(i == 14)
    2180:	1e 30       	cpi	r17, 0x0E	; 14
    2182:	79 f4       	brne	.+30     	; 0x21a2 <sd_raw_get_info+0x138>
        {
            if(b & 0x40)
    2184:	90 e0       	ldi	r25, 0x00	; 0
    2186:	86 fd       	sbrc	r24, 6
                info->flag_copy = 1;
    2188:	c9 8e       	std	Y+25, r12	; 0x19
            if(b & 0x20)
    218a:	85 fd       	sbrc	r24, 5
                info->flag_write_protect = 1;
    218c:	ca 8e       	std	Y+26, r12	; 0x1a
            if(b & 0x10)
    218e:	84 fd       	sbrc	r24, 4
                info->flag_write_protect_temp = 1;
    2190:	cb 8e       	std	Y+27, r12	; 0x1b
            info->format = (b & 0x0c) >> 2;
    2192:	8c 70       	andi	r24, 0x0C	; 12
    2194:	90 70       	andi	r25, 0x00	; 0
    2196:	95 95       	asr	r25
    2198:	87 95       	ror	r24
    219a:	95 95       	asr	r25
    219c:	87 95       	ror	r24
    219e:	8c 8f       	std	Y+28, r24	; 0x1c
    21a0:	7c c0       	rjmp	.+248    	; 0x229a <sd_raw_get_info+0x230>
        }
        else
        {
#if SD_RAW_SDHC
            if(sd_raw_card_type & (1 << SD_RAW_SPEC_2))
    21a2:	90 91 c0 01 	lds	r25, 0x01C0
    21a6:	91 ff       	sbrs	r25, 1
    21a8:	27 c0       	rjmp	.+78     	; 0x21f8 <sd_raw_get_info+0x18e>
            {
                switch(i)
    21aa:	17 30       	cpi	r17, 0x07	; 7
    21ac:	29 f0       	breq	.+10     	; 0x21b8 <sd_raw_get_info+0x14e>
    21ae:	17 30       	cpi	r17, 0x07	; 7
    21b0:	50 f0       	brcs	.+20     	; 0x21c6 <sd_raw_get_info+0x15c>
    21b2:	1a 30       	cpi	r17, 0x0A	; 10
    21b4:	40 f4       	brcc	.+16     	; 0x21c6 <sd_raw_get_info+0x15c>
    21b6:	01 c0       	rjmp	.+2      	; 0x21ba <sd_raw_get_info+0x150>
                {
                    case 7:
                        b &= 0x3f;
    21b8:	8f 73       	andi	r24, 0x3F	; 63
                    case 8:
                    case 9:
                        csd_c_size <<= 8;
    21ba:	3e 2d       	mov	r19, r14
    21bc:	22 27       	eor	r18, r18
                        csd_c_size |= b;
    21be:	e8 2e       	mov	r14, r24
    21c0:	ff 24       	eor	r15, r15
    21c2:	e2 2a       	or	r14, r18
    21c4:	f3 2a       	or	r15, r19
                        break;
                }
                if(i == 9)
    21c6:	19 30       	cpi	r17, 0x09	; 9
    21c8:	09 f0       	breq	.+2      	; 0x21cc <sd_raw_get_info+0x162>
    21ca:	67 c0       	rjmp	.+206    	; 0x229a <sd_raw_get_info+0x230>
                {
                    ++csd_c_size;
    21cc:	08 94       	sec
    21ce:	e1 1c       	adc	r14, r1
    21d0:	f1 1c       	adc	r15, r1
                    info->capacity = (offset_t) csd_c_size * 512 * 1024;
    21d2:	97 01       	movw	r18, r14
    21d4:	40 e0       	ldi	r20, 0x00	; 0
    21d6:	50 e0       	ldi	r21, 0x00	; 0
    21d8:	60 e0       	ldi	r22, 0x00	; 0
    21da:	70 e0       	ldi	r23, 0x00	; 0
    21dc:	80 e0       	ldi	r24, 0x00	; 0
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	03 e1       	ldi	r16, 0x13	; 19
    21e2:	0e 94 93 02 	call	0x526	; 0x526 <__ashldi3>
    21e6:	29 8b       	std	Y+17, r18	; 0x11
    21e8:	3a 8b       	std	Y+18, r19	; 0x12
    21ea:	4b 8b       	std	Y+19, r20	; 0x13
    21ec:	5c 8b       	std	Y+20, r21	; 0x14
    21ee:	6d 8b       	std	Y+21, r22	; 0x15
    21f0:	7e 8b       	std	Y+22, r23	; 0x16
    21f2:	8f 8b       	std	Y+23, r24	; 0x17
    21f4:	98 8f       	std	Y+24, r25	; 0x18
    21f6:	51 c0       	rjmp	.+162    	; 0x229a <sd_raw_get_info+0x230>
                }
            }
            else
#endif
            {
                switch(i)
    21f8:	17 30       	cpi	r17, 0x07	; 7
    21fa:	e1 f0       	breq	.+56     	; 0x2234 <sd_raw_get_info+0x1ca>
    21fc:	18 30       	cpi	r17, 0x08	; 8
    21fe:	30 f4       	brcc	.+12     	; 0x220c <sd_raw_get_info+0x1a2>
    2200:	15 30       	cpi	r17, 0x05	; 5
    2202:	61 f0       	breq	.+24     	; 0x221c <sd_raw_get_info+0x1b2>
    2204:	16 30       	cpi	r17, 0x06	; 6
    2206:	09 f0       	breq	.+2      	; 0x220a <sd_raw_get_info+0x1a0>
    2208:	48 c0       	rjmp	.+144    	; 0x229a <sd_raw_get_info+0x230>
    220a:	0c c0       	rjmp	.+24     	; 0x2224 <sd_raw_get_info+0x1ba>
    220c:	19 30       	cpi	r17, 0x09	; 9
    220e:	29 f1       	breq	.+74     	; 0x225a <sd_raw_get_info+0x1f0>
    2210:	19 30       	cpi	r17, 0x09	; 9
    2212:	c0 f0       	brcs	.+48     	; 0x2244 <sd_raw_get_info+0x1da>
    2214:	1a 30       	cpi	r17, 0x0A	; 10
    2216:	09 f0       	breq	.+2      	; 0x221a <sd_raw_get_info+0x1b0>
    2218:	40 c0       	rjmp	.+128    	; 0x229a <sd_raw_get_info+0x230>
    221a:	24 c0       	rjmp	.+72     	; 0x2264 <sd_raw_get_info+0x1fa>
                {
                    case 5:
                        csd_read_bl_len = b & 0x0f;
    221c:	9f e0       	ldi	r25, 0x0F	; 15
    221e:	b9 2e       	mov	r11, r25
    2220:	b8 22       	and	r11, r24
                        break;
    2222:	3b c0       	rjmp	.+118    	; 0x229a <sd_raw_get_info+0x230>
                    case 6:
                        csd_c_size = b & 0x03;
    2224:	e8 2e       	mov	r14, r24
    2226:	ff 24       	eor	r15, r15
    2228:	23 e0       	ldi	r18, 0x03	; 3
    222a:	e2 22       	and	r14, r18
    222c:	ff 24       	eor	r15, r15
                        csd_c_size <<= 8;
    222e:	fe 2c       	mov	r15, r14
    2230:	ee 24       	eor	r14, r14
                        break;
    2232:	33 c0       	rjmp	.+102    	; 0x229a <sd_raw_get_info+0x230>
                    case 7:
                        csd_c_size |= b;
    2234:	90 e0       	ldi	r25, 0x00	; 0
    2236:	e8 2a       	or	r14, r24
    2238:	f9 2a       	or	r15, r25
                        csd_c_size <<= 2;
    223a:	ee 0c       	add	r14, r14
    223c:	ff 1c       	adc	r15, r15
    223e:	ee 0c       	add	r14, r14
    2240:	ff 1c       	adc	r15, r15
                        break;
    2242:	2b c0       	rjmp	.+86     	; 0x229a <sd_raw_get_info+0x230>
                    case 8:
                        csd_c_size |= b >> 6;
    2244:	82 95       	swap	r24
    2246:	86 95       	lsr	r24
    2248:	86 95       	lsr	r24
    224a:	83 70       	andi	r24, 0x03	; 3
    224c:	90 e0       	ldi	r25, 0x00	; 0
    224e:	e8 2a       	or	r14, r24
    2250:	f9 2a       	or	r15, r25
                        ++csd_c_size;
    2252:	08 94       	sec
    2254:	e1 1c       	adc	r14, r1
    2256:	f1 1c       	adc	r15, r1
                        break;
    2258:	20 c0       	rjmp	.+64     	; 0x229a <sd_raw_get_info+0x230>
                    case 9:
                        csd_c_size_mult = b & 0x03;
    225a:	a3 e0       	ldi	r26, 0x03	; 3
    225c:	da 2e       	mov	r13, r26
    225e:	d8 22       	and	r13, r24
                        csd_c_size_mult <<= 1;
    2260:	dd 0c       	add	r13, r13
                        break;
    2262:	1b c0       	rjmp	.+54     	; 0x229a <sd_raw_get_info+0x230>
                    case 10:
                        csd_c_size_mult |= b >> 7;
    2264:	88 1f       	adc	r24, r24
    2266:	88 27       	eor	r24, r24
    2268:	88 1f       	adc	r24, r24
    226a:	d8 2a       	or	r13, r24

                        info->capacity = (uint32_t) csd_c_size << (csd_c_size_mult + csd_read_bl_len + 2);
    226c:	97 01       	movw	r18, r14
    226e:	40 e0       	ldi	r20, 0x00	; 0
    2270:	50 e0       	ldi	r21, 0x00	; 0
    2272:	8b 2d       	mov	r24, r11
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	02 96       	adiw	r24, 0x02	; 2
    2278:	8d 0d       	add	r24, r13
    227a:	91 1d       	adc	r25, r1
    227c:	04 c0       	rjmp	.+8      	; 0x2286 <sd_raw_get_info+0x21c>
    227e:	22 0f       	add	r18, r18
    2280:	33 1f       	adc	r19, r19
    2282:	44 1f       	adc	r20, r20
    2284:	55 1f       	adc	r21, r21
    2286:	8a 95       	dec	r24
    2288:	d2 f7       	brpl	.-12     	; 0x227e <sd_raw_get_info+0x214>
    228a:	29 8b       	std	Y+17, r18	; 0x11
    228c:	3a 8b       	std	Y+18, r19	; 0x12
    228e:	4b 8b       	std	Y+19, r20	; 0x13
    2290:	5c 8b       	std	Y+20, r21	; 0x14
    2292:	1d 8a       	std	Y+21, r1	; 0x15
    2294:	1e 8a       	std	Y+22, r1	; 0x16
    2296:	1f 8a       	std	Y+23, r1	; 0x17
    2298:	18 8e       	std	Y+24, r1	; 0x18
    {
        unselect_card();
        return 0;
    }
    while(sd_raw_rec_byte() != 0xfe);
    for(uint8_t i = 0; i < 18; ++i)
    229a:	1f 5f       	subi	r17, 0xFF	; 255
    229c:	12 31       	cpi	r17, 0x12	; 18
    229e:	09 f0       	breq	.+2      	; 0x22a2 <sd_raw_get_info+0x238>
    22a0:	6e cf       	rjmp	.-292    	; 0x217e <sd_raw_get_info+0x114>
                }
            }
        }
    }

    unselect_card();
    22a2:	28 9a       	sbi	0x05, 0	; 5

    return 1;
    22a4:	81 e0       	ldi	r24, 0x01	; 1
    22a6:	01 c0       	rjmp	.+2      	; 0x22aa <sd_raw_get_info+0x240>
 * \returns 0 on failure, 1 on success.
 */
uint8_t sd_raw_get_info(struct sd_raw_info* info)
{
    if(!info || !sd_raw_available())
        return 0;
    22a8:	80 e0       	ldi	r24, 0x00	; 0
    }

    unselect_card();

    return 1;
}
    22aa:	df 91       	pop	r29
    22ac:	cf 91       	pop	r28
    22ae:	1f 91       	pop	r17
    22b0:	0f 91       	pop	r16
    22b2:	ff 90       	pop	r15
    22b4:	ef 90       	pop	r14
    22b6:	df 90       	pop	r13
    22b8:	cf 90       	pop	r12
    22ba:	bf 90       	pop	r11
    22bc:	08 95       	ret

000022be <partition_open>:
 *                  as a single partition (e.g. for "super floppy" use).
 * \returns 0 on failure, a partition descriptor on success.
 * \see partition_close
 */
struct partition_struct* partition_open(device_read_t device_read, device_read_interval_t device_read_interval, device_write_t device_write, device_write_interval_t device_write_interval, int8_t index)
{
    22be:	4f 92       	push	r4
    22c0:	5f 92       	push	r5
    22c2:	6f 92       	push	r6
    22c4:	7f 92       	push	r7
    22c6:	8f 92       	push	r8
    22c8:	9f 92       	push	r9
    22ca:	af 92       	push	r10
    22cc:	bf 92       	push	r11
    22ce:	df 92       	push	r13
    22d0:	ef 92       	push	r14
    22d2:	ff 92       	push	r15
    22d4:	0f 93       	push	r16
    22d6:	1f 93       	push	r17
    22d8:	df 93       	push	r29
    22da:	cf 93       	push	r28
    22dc:	cd b7       	in	r28, 0x3d	; 61
    22de:	de b7       	in	r29, 0x3e	; 62
    22e0:	60 97       	sbiw	r28, 0x10	; 16
    22e2:	0f b6       	in	r0, 0x3f	; 63
    22e4:	f8 94       	cli
    22e6:	de bf       	out	0x3e, r29	; 62
    22e8:	0f be       	out	0x3f, r0	; 63
    22ea:	cd bf       	out	0x3d, r28	; 61
    22ec:	5c 01       	movw	r10, r24
    22ee:	4b 01       	movw	r8, r22
    22f0:	3a 01       	movw	r6, r20
    22f2:	29 01       	movw	r4, r18
    22f4:	d0 2e       	mov	r13, r16
    struct partition_struct* new_partition = 0;
    uint8_t buffer[0x10];

    if(!device_read || !device_read_interval || index >= 4)
    22f6:	00 97       	sbiw	r24, 0x00	; 0
    22f8:	09 f4       	brne	.+2      	; 0x22fc <partition_open+0x3e>
    22fa:	a9 c0       	rjmp	.+338    	; 0x244e <partition_open+0x190>
    22fc:	61 15       	cp	r22, r1
    22fe:	71 05       	cpc	r23, r1
    2300:	09 f4       	brne	.+2      	; 0x2304 <partition_open+0x46>
    2302:	a5 c0       	rjmp	.+330    	; 0x244e <partition_open+0x190>
    2304:	04 30       	cpi	r16, 0x04	; 4
    2306:	0c f0       	brlt	.+2      	; 0x230a <partition_open+0x4c>
    2308:	a2 c0       	rjmp	.+324    	; 0x244e <partition_open+0x190>
        return 0;

    if(index >= 0)
    230a:	d7 fc       	sbrc	r13, 7
    230c:	23 c0       	rjmp	.+70     	; 0x2354 <partition_open+0x96>
    {
        /* read specified partition table index */
        if(!device_read(0x01be + index * 0x10, buffer, sizeof(buffer)))
    230e:	ed 2d       	mov	r30, r13
    2310:	ff 27       	eor	r31, r31
    2312:	e7 fd       	sbrc	r30, 7
    2314:	f0 95       	com	r31
    2316:	a4 e0       	ldi	r26, 0x04	; 4
    2318:	ee 0f       	add	r30, r30
    231a:	ff 1f       	adc	r31, r31
    231c:	aa 95       	dec	r26
    231e:	e1 f7       	brne	.-8      	; 0x2318 <partition_open+0x5a>
    2320:	e2 54       	subi	r30, 0x42	; 66
    2322:	fe 4f       	sbci	r31, 0xFE	; 254
    2324:	9f 2f       	mov	r25, r31
    2326:	99 0f       	add	r25, r25
    2328:	99 0b       	sbc	r25, r25
    232a:	9f 01       	movw	r18, r30
    232c:	49 2f       	mov	r20, r25
    232e:	59 2f       	mov	r21, r25
    2330:	69 2f       	mov	r22, r25
    2332:	79 2f       	mov	r23, r25
    2334:	89 2f       	mov	r24, r25
    2336:	8e 01       	movw	r16, r28
    2338:	0f 5f       	subi	r16, 0xFF	; 255
    233a:	1f 4f       	sbci	r17, 0xFF	; 255
    233c:	e0 e1       	ldi	r30, 0x10	; 16
    233e:	ee 2e       	mov	r14, r30
    2340:	f1 2c       	mov	r15, r1
    2342:	f5 01       	movw	r30, r10
    2344:	09 95       	icall
    2346:	88 23       	and	r24, r24
    2348:	09 f4       	brne	.+2      	; 0x234c <partition_open+0x8e>
    234a:	81 c0       	rjmp	.+258    	; 0x244e <partition_open+0x190>
            return 0;

        /* abort on empty partition entry */
        if(buffer[4] == 0x00)
    234c:	8d 81       	ldd	r24, Y+5	; 0x05
    234e:	88 23       	and	r24, r24
    2350:	09 f4       	brne	.+2      	; 0x2354 <partition_open+0x96>
    2352:	7d c0       	rjmp	.+250    	; 0x244e <partition_open+0x190>
#else
    new_partition = partition_handles;
    uint8_t i;
    for(i = 0; i < PARTITION_COUNT; ++i)
    {
        if(new_partition->type == PARTITION_TYPE_FREE)
    2354:	80 91 d2 03 	lds	r24, 0x03D2
    2358:	88 23       	and	r24, r24
    235a:	09 f0       	breq	.+2      	; 0x235e <partition_open+0xa0>
    235c:	78 c0       	rjmp	.+240    	; 0x244e <partition_open+0x190>
    }
    if(i >= PARTITION_COUNT)
        return 0;
#endif

    memset(new_partition, 0, sizeof(*new_partition));
    235e:	ea ec       	ldi	r30, 0xCA	; 202
    2360:	f3 e0       	ldi	r31, 0x03	; 3
    2362:	81 e1       	ldi	r24, 0x11	; 17
    2364:	df 01       	movw	r26, r30
    2366:	1d 92       	st	X+, r1
    2368:	8a 95       	dec	r24
    236a:	e9 f7       	brne	.-6      	; 0x2366 <partition_open+0xa8>

    /* fill partition descriptor */
    new_partition->device_read = device_read;
    236c:	b0 92 cb 03 	sts	0x03CB, r11
    2370:	a0 92 ca 03 	sts	0x03CA, r10
    new_partition->device_read_interval = device_read_interval;
    2374:	90 92 cd 03 	sts	0x03CD, r9
    2378:	80 92 cc 03 	sts	0x03CC, r8
    new_partition->device_write = device_write;
    237c:	70 92 cf 03 	sts	0x03CF, r7
    2380:	60 92 ce 03 	sts	0x03CE, r6
    new_partition->device_write_interval = device_write_interval;
    2384:	50 92 d1 03 	sts	0x03D1, r5
    2388:	40 92 d0 03 	sts	0x03D0, r4

    if(index >= 0)
    238c:	d7 fc       	sbrc	r13, 7
    238e:	5a c0       	rjmp	.+180    	; 0x2444 <partition_open+0x186>
    {
        new_partition->type = buffer[4];
    2390:	8d 81       	ldd	r24, Y+5	; 0x05
    2392:	80 93 d2 03 	sts	0x03D2, r24
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
    2396:	8a 85       	ldd	r24, Y+10	; 0x0a
    2398:	90 e0       	ldi	r25, 0x00	; 0
    239a:	a0 e0       	ldi	r26, 0x00	; 0
    239c:	b0 e0       	ldi	r27, 0x00	; 0
    239e:	ba 2f       	mov	r27, r26
    23a0:	a9 2f       	mov	r26, r25
    23a2:	98 2f       	mov	r25, r24
    23a4:	88 27       	eor	r24, r24
                                ((uint32_t) buffer[10] << 16) |
    23a6:	2b 85       	ldd	r18, Y+11	; 0x0b
    23a8:	30 e0       	ldi	r19, 0x00	; 0
    23aa:	40 e0       	ldi	r20, 0x00	; 0
    23ac:	50 e0       	ldi	r21, 0x00	; 0
    23ae:	a9 01       	movw	r20, r18
    23b0:	33 27       	eor	r19, r19
    23b2:	22 27       	eor	r18, r18
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
    23b4:	82 2b       	or	r24, r18
    23b6:	93 2b       	or	r25, r19
    23b8:	a4 2b       	or	r26, r20
    23ba:	b5 2b       	or	r27, r21
    23bc:	29 85       	ldd	r18, Y+9	; 0x09
    23be:	30 e0       	ldi	r19, 0x00	; 0
    23c0:	40 e0       	ldi	r20, 0x00	; 0
    23c2:	50 e0       	ldi	r21, 0x00	; 0
                                ((uint32_t) buffer[9] << 8) |
    23c4:	82 2b       	or	r24, r18
    23c6:	93 2b       	or	r25, r19
    23c8:	a4 2b       	or	r26, r20
    23ca:	b5 2b       	or	r27, r21
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
    23cc:	2c 85       	ldd	r18, Y+12	; 0x0c
    23ce:	30 e0       	ldi	r19, 0x00	; 0
    23d0:	40 e0       	ldi	r20, 0x00	; 0
    23d2:	50 e0       	ldi	r21, 0x00	; 0
    23d4:	52 2f       	mov	r21, r18
    23d6:	44 27       	eor	r20, r20
    23d8:	33 27       	eor	r19, r19
    23da:	22 27       	eor	r18, r18
    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
    23dc:	82 2b       	or	r24, r18
    23de:	93 2b       	or	r25, r19
    23e0:	a4 2b       	or	r26, r20
    23e2:	b5 2b       	or	r27, r21
    new_partition->device_write_interval = device_write_interval;

    if(index >= 0)
    {
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
    23e4:	81 87       	std	Z+9, r24	; 0x09
    23e6:	92 87       	std	Z+10, r25	; 0x0a
    23e8:	a3 87       	std	Z+11, r26	; 0x0b
    23ea:	b4 87       	std	Z+12, r27	; 0x0c
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
    23ec:	8e 85       	ldd	r24, Y+14	; 0x0e
    23ee:	90 e0       	ldi	r25, 0x00	; 0
    23f0:	a0 e0       	ldi	r26, 0x00	; 0
    23f2:	b0 e0       	ldi	r27, 0x00	; 0
    23f4:	ba 2f       	mov	r27, r26
    23f6:	a9 2f       	mov	r26, r25
    23f8:	98 2f       	mov	r25, r24
    23fa:	88 27       	eor	r24, r24
                                ((uint32_t) buffer[14] << 16) |
    23fc:	2f 85       	ldd	r18, Y+15	; 0x0f
    23fe:	30 e0       	ldi	r19, 0x00	; 0
    2400:	40 e0       	ldi	r20, 0x00	; 0
    2402:	50 e0       	ldi	r21, 0x00	; 0
    2404:	a9 01       	movw	r20, r18
    2406:	33 27       	eor	r19, r19
    2408:	22 27       	eor	r18, r18
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    240a:	82 2b       	or	r24, r18
    240c:	93 2b       	or	r25, r19
    240e:	a4 2b       	or	r26, r20
    2410:	b5 2b       	or	r27, r21
    2412:	2d 85       	ldd	r18, Y+13	; 0x0d
    2414:	30 e0       	ldi	r19, 0x00	; 0
    2416:	40 e0       	ldi	r20, 0x00	; 0
    2418:	50 e0       	ldi	r21, 0x00	; 0
                                ((uint32_t) buffer[13] << 8) |
    241a:	82 2b       	or	r24, r18
    241c:	93 2b       	or	r25, r19
    241e:	a4 2b       	or	r26, r20
    2420:	b5 2b       	or	r27, r21
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    2422:	28 89       	ldd	r18, Y+16	; 0x10
    2424:	30 e0       	ldi	r19, 0x00	; 0
    2426:	40 e0       	ldi	r20, 0x00	; 0
    2428:	50 e0       	ldi	r21, 0x00	; 0
    242a:	52 2f       	mov	r21, r18
    242c:	44 27       	eor	r20, r20
    242e:	33 27       	eor	r19, r19
    2430:	22 27       	eor	r18, r18
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
                                ((uint32_t) buffer[13] << 8) |
                                ((uint32_t) buffer[14] << 16) |
    2432:	82 2b       	or	r24, r18
    2434:	93 2b       	or	r25, r19
    2436:	a4 2b       	or	r26, r20
    2438:	b5 2b       	or	r27, r21
        new_partition->type = buffer[4];
        new_partition->offset = ((uint32_t) buffer[8]) |
                                ((uint32_t) buffer[9] << 8) |
                                ((uint32_t) buffer[10] << 16) |
                                ((uint32_t) buffer[11] << 24);
        new_partition->length = ((uint32_t) buffer[12]) |
    243a:	85 87       	std	Z+13, r24	; 0x0d
    243c:	96 87       	std	Z+14, r25	; 0x0e
    243e:	a7 87       	std	Z+15, r26	; 0x0f
    2440:	b0 8b       	std	Z+16, r27	; 0x10
    2442:	03 c0       	rjmp	.+6      	; 0x244a <partition_open+0x18c>
                                ((uint32_t) buffer[14] << 16) |
                                ((uint32_t) buffer[15] << 24);
    }
    else
    {
        new_partition->type = 0xff;
    2444:	8f ef       	ldi	r24, 0xFF	; 255
    2446:	80 93 d2 03 	sts	0x03D2, r24
    244a:	9f 01       	movw	r18, r30
    244c:	02 c0       	rjmp	.+4      	; 0x2452 <partition_open+0x194>
            break;

        ++new_partition;
    }
    if(i >= PARTITION_COUNT)
        return 0;
    244e:	20 e0       	ldi	r18, 0x00	; 0
    2450:	30 e0       	ldi	r19, 0x00	; 0
    {
        new_partition->type = 0xff;
    }

    return new_partition;
}
    2452:	c9 01       	movw	r24, r18
    2454:	60 96       	adiw	r28, 0x10	; 16
    2456:	0f b6       	in	r0, 0x3f	; 63
    2458:	f8 94       	cli
    245a:	de bf       	out	0x3e, r29	; 62
    245c:	0f be       	out	0x3f, r0	; 63
    245e:	cd bf       	out	0x3d, r28	; 61
    2460:	cf 91       	pop	r28
    2462:	df 91       	pop	r29
    2464:	1f 91       	pop	r17
    2466:	0f 91       	pop	r16
    2468:	ff 90       	pop	r15
    246a:	ef 90       	pop	r14
    246c:	df 90       	pop	r13
    246e:	bf 90       	pop	r11
    2470:	af 90       	pop	r10
    2472:	9f 90       	pop	r9
    2474:	8f 90       	pop	r8
    2476:	7f 90       	pop	r7
    2478:	6f 90       	pop	r6
    247a:	5f 90       	pop	r5
    247c:	4f 90       	pop	r4
    247e:	08 95       	ret

00002480 <fat_get_next_cluster>:
 * \param[in] fs The filesystem for which to determine the next cluster.
 * \param[in] cluster_num The number of the cluster for which to determine its successor.
 * \returns The wanted cluster number, or 0 on error.
 */
cluster_t fat_get_next_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    2480:	8f 92       	push	r8
    2482:	9f 92       	push	r9
    2484:	af 92       	push	r10
    2486:	bf 92       	push	r11
    2488:	cf 92       	push	r12
    248a:	df 92       	push	r13
    248c:	ef 92       	push	r14
    248e:	ff 92       	push	r15
    2490:	0f 93       	push	r16
    2492:	1f 93       	push	r17
    2494:	df 93       	push	r29
    2496:	cf 93       	push	r28
    2498:	00 d0       	rcall	.+0      	; 0x249a <fat_get_next_cluster+0x1a>
    249a:	00 d0       	rcall	.+0      	; 0x249c <fat_get_next_cluster+0x1c>
    249c:	00 d0       	rcall	.+0      	; 0x249e <fat_get_next_cluster+0x1e>
    249e:	cd b7       	in	r28, 0x3d	; 61
    24a0:	de b7       	in	r29, 0x3e	; 62
    24a2:	dc 01       	movw	r26, r24
    if(!fs || cluster_num < 2)
    24a4:	00 97       	sbiw	r24, 0x00	; 0
    24a6:	09 f4       	brne	.+2      	; 0x24aa <fat_get_next_cluster+0x2a>
    24a8:	3e c1       	rjmp	.+636    	; 0x2726 <fat_get_next_cluster+0x2a6>
    24aa:	42 30       	cpi	r20, 0x02	; 2
    24ac:	51 05       	cpc	r21, r1
    24ae:	61 05       	cpc	r22, r1
    24b0:	71 05       	cpc	r23, r1
    24b2:	08 f4       	brcc	.+2      	; 0x24b6 <fat_get_next_cluster+0x36>
    24b4:	38 c1       	rjmp	.+624    	; 0x2726 <fat_get_next_cluster+0x2a6>
        return 0;

#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    24b6:	ed 91       	ld	r30, X+
    24b8:	fc 91       	ld	r31, X
    24ba:	11 97       	sbiw	r26, 0x01	; 1
    24bc:	20 85       	ldd	r18, Z+8	; 0x08
    24be:	1a 96       	adiw	r26, 0x0a	; 10
    24c0:	dc 90       	ld	r13, X
    24c2:	1a 97       	sbiw	r26, 0x0a	; 10
    24c4:	1b 96       	adiw	r26, 0x0b	; 11
    24c6:	cc 90       	ld	r12, X
    24c8:	1b 97       	sbiw	r26, 0x0b	; 11
    24ca:	1c 96       	adiw	r26, 0x0c	; 12
    24cc:	bc 90       	ld	r11, X
    24ce:	1c 97       	sbiw	r26, 0x0c	; 12
    24d0:	1d 96       	adiw	r26, 0x0d	; 13
    24d2:	ac 90       	ld	r10, X
    24d4:	1d 97       	sbiw	r26, 0x0d	; 13
    24d6:	1e 96       	adiw	r26, 0x0e	; 14
    24d8:	8c 91       	ld	r24, X
    24da:	1e 97       	sbiw	r26, 0x0e	; 14
    24dc:	1f 96       	adiw	r26, 0x0f	; 15
    24de:	ec 90       	ld	r14, X
    24e0:	1f 97       	sbiw	r26, 0x0f	; 15
    24e2:	50 96       	adiw	r26, 0x10	; 16
    24e4:	fc 90       	ld	r15, X
    24e6:	50 97       	sbiw	r26, 0x10	; 16
    24e8:	51 96       	adiw	r26, 0x11	; 17
    24ea:	9c 91       	ld	r25, X
    24ec:	51 97       	sbiw	r26, 0x11	; 17
    24ee:	2b 30       	cpi	r18, 0x0B	; 11
    24f0:	09 f0       	breq	.+2      	; 0x24f4 <fat_get_next_cluster+0x74>
    24f2:	8e c0       	rjmp	.+284    	; 0x2610 <fat_get_next_cluster+0x190>
    {
        /* read appropriate fat entry */
        uint32_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    24f4:	8a 01       	movw	r16, r20
    24f6:	9b 01       	movw	r18, r22
    24f8:	b2 e0       	ldi	r27, 0x02	; 2
    24fa:	00 0f       	add	r16, r16
    24fc:	11 1f       	adc	r17, r17
    24fe:	22 1f       	adc	r18, r18
    2500:	33 1f       	adc	r19, r19
    2502:	ba 95       	dec	r27
    2504:	d1 f7       	brne	.-12     	; 0x24fa <fat_get_next_cluster+0x7a>
    2506:	40 e0       	ldi	r20, 0x00	; 0
    2508:	50 e0       	ldi	r21, 0x00	; 0
    250a:	ba 01       	movw	r22, r20
    250c:	d0 0e       	add	r13, r16
    250e:	b1 e0       	ldi	r27, 0x01	; 1
    2510:	d0 16       	cp	r13, r16
    2512:	08 f0       	brcs	.+2      	; 0x2516 <fat_get_next_cluster+0x96>
    2514:	b0 e0       	ldi	r27, 0x00	; 0
    2516:	c1 0e       	add	r12, r17
    2518:	a1 e0       	ldi	r26, 0x01	; 1
    251a:	c1 16       	cp	r12, r17
    251c:	08 f0       	brcs	.+2      	; 0x2520 <fat_get_next_cluster+0xa0>
    251e:	a0 e0       	ldi	r26, 0x00	; 0
    2520:	8b 2e       	mov	r8, r27
    2522:	8c 0c       	add	r8, r12
    2524:	b1 e0       	ldi	r27, 0x01	; 1
    2526:	8c 14       	cp	r8, r12
    2528:	08 f0       	brcs	.+2      	; 0x252c <fat_get_next_cluster+0xac>
    252a:	b0 e0       	ldi	r27, 0x00	; 0
    252c:	ab 2b       	or	r26, r27
    252e:	b2 0e       	add	r11, r18
    2530:	b1 e0       	ldi	r27, 0x01	; 1
    2532:	b2 16       	cp	r11, r18
    2534:	08 f0       	brcs	.+2      	; 0x2538 <fat_get_next_cluster+0xb8>
    2536:	b0 e0       	ldi	r27, 0x00	; 0
    2538:	9a 2e       	mov	r9, r26
    253a:	9b 0c       	add	r9, r11
    253c:	a1 e0       	ldi	r26, 0x01	; 1
    253e:	9b 14       	cp	r9, r11
    2540:	08 f0       	brcs	.+2      	; 0x2544 <fat_get_next_cluster+0xc4>
    2542:	a0 e0       	ldi	r26, 0x00	; 0
    2544:	ba 2b       	or	r27, r26
    2546:	a3 0e       	add	r10, r19
    2548:	a1 e0       	ldi	r26, 0x01	; 1
    254a:	a3 16       	cp	r10, r19
    254c:	08 f0       	brcs	.+2      	; 0x2550 <fat_get_next_cluster+0xd0>
    254e:	a0 e0       	ldi	r26, 0x00	; 0
    2550:	bb 2e       	mov	r11, r27
    2552:	ba 0c       	add	r11, r10
    2554:	b1 e0       	ldi	r27, 0x01	; 1
    2556:	ba 14       	cp	r11, r10
    2558:	08 f0       	brcs	.+2      	; 0x255c <fat_get_next_cluster+0xdc>
    255a:	b0 e0       	ldi	r27, 0x00	; 0
    255c:	ab 2b       	or	r26, r27
    255e:	b1 e0       	ldi	r27, 0x01	; 1
    2560:	84 17       	cp	r24, r20
    2562:	08 f0       	brcs	.+2      	; 0x2566 <fat_get_next_cluster+0xe6>
    2564:	b0 e0       	ldi	r27, 0x00	; 0
    2566:	ca 2e       	mov	r12, r26
    2568:	c8 0e       	add	r12, r24
    256a:	a1 e0       	ldi	r26, 0x01	; 1
    256c:	c8 16       	cp	r12, r24
    256e:	08 f0       	brcs	.+2      	; 0x2572 <fat_get_next_cluster+0xf2>
    2570:	a0 e0       	ldi	r26, 0x00	; 0
    2572:	ba 2b       	or	r27, r26
    2574:	81 e0       	ldi	r24, 0x01	; 1
    2576:	e5 16       	cp	r14, r21
    2578:	08 f0       	brcs	.+2      	; 0x257c <fat_get_next_cluster+0xfc>
    257a:	80 e0       	ldi	r24, 0x00	; 0
    257c:	be 0d       	add	r27, r14
    257e:	a1 e0       	ldi	r26, 0x01	; 1
    2580:	be 15       	cp	r27, r14
    2582:	08 f0       	brcs	.+2      	; 0x2586 <fat_get_next_cluster+0x106>
    2584:	a0 e0       	ldi	r26, 0x00	; 0
    2586:	8a 2b       	or	r24, r26
    2588:	a1 e0       	ldi	r26, 0x01	; 1
    258a:	f6 16       	cp	r15, r22
    258c:	08 f0       	brcs	.+2      	; 0x2590 <fat_get_next_cluster+0x110>
    258e:	a0 e0       	ldi	r26, 0x00	; 0
    2590:	8f 0d       	add	r24, r15
    2592:	21 e0       	ldi	r18, 0x01	; 1
    2594:	8f 15       	cp	r24, r15
    2596:	08 f0       	brcs	.+2      	; 0x259a <fat_get_next_cluster+0x11a>
    2598:	20 e0       	ldi	r18, 0x00	; 0
    259a:	a2 2b       	or	r26, r18
    259c:	01 90       	ld	r0, Z+
    259e:	f0 81       	ld	r31, Z
    25a0:	e0 2d       	mov	r30, r0
    25a2:	2d 2d       	mov	r18, r13
    25a4:	38 2d       	mov	r19, r8
    25a6:	49 2d       	mov	r20, r9
    25a8:	5b 2d       	mov	r21, r11
    25aa:	6c 2d       	mov	r22, r12
    25ac:	7b 2f       	mov	r23, r27
    25ae:	9a 0f       	add	r25, r26
    25b0:	8e 01       	movw	r16, r28
    25b2:	0d 5f       	subi	r16, 0xFD	; 253
    25b4:	1f 4f       	sbci	r17, 0xFF	; 255
    25b6:	a4 e0       	ldi	r26, 0x04	; 4
    25b8:	ea 2e       	mov	r14, r26
    25ba:	f1 2c       	mov	r15, r1
    25bc:	09 95       	icall
    25be:	88 23       	and	r24, r24
    25c0:	09 f4       	brne	.+2      	; 0x25c4 <fat_get_next_cluster+0x144>
    25c2:	b1 c0       	rjmp	.+354    	; 0x2726 <fat_get_next_cluster+0x2a6>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
    25c4:	2b 81       	ldd	r18, Y+3	; 0x03
    25c6:	3c 81       	ldd	r19, Y+4	; 0x04
    25c8:	4d 81       	ldd	r20, Y+5	; 0x05
    25ca:	5e 81       	ldd	r21, Y+6	; 0x06
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
    25cc:	21 15       	cp	r18, r1
    25ce:	31 05       	cpc	r19, r1
    25d0:	41 05       	cpc	r20, r1
    25d2:	51 05       	cpc	r21, r1
    25d4:	09 f4       	brne	.+2      	; 0x25d8 <fat_get_next_cluster+0x158>
    25d6:	aa c0       	rjmp	.+340    	; 0x272c <fat_get_next_cluster+0x2ac>
    25d8:	27 3f       	cpi	r18, 0xF7	; 247
    25da:	8f ef       	ldi	r24, 0xFF	; 255
    25dc:	38 07       	cpc	r19, r24
    25de:	8f ef       	ldi	r24, 0xFF	; 255
    25e0:	48 07       	cpc	r20, r24
    25e2:	8f e0       	ldi	r24, 0x0F	; 15
    25e4:	58 07       	cpc	r21, r24
    25e6:	09 f4       	brne	.+2      	; 0x25ea <fat_get_next_cluster+0x16a>
    25e8:	9e c0       	rjmp	.+316    	; 0x2726 <fat_get_next_cluster+0x2a6>
           cluster_num == FAT32_CLUSTER_BAD ||
           (cluster_num >= FAT32_CLUSTER_RESERVED_MIN && cluster_num <= FAT32_CLUSTER_RESERVED_MAX) ||
    25ea:	da 01       	movw	r26, r20
    25ec:	c9 01       	movw	r24, r18
    25ee:	80 5f       	subi	r24, 0xF0	; 240
    25f0:	9f 4f       	sbci	r25, 0xFF	; 255
    25f2:	af 4f       	sbci	r26, 0xFF	; 255
    25f4:	bf 40       	sbci	r27, 0x0F	; 15

        /* determine next cluster from fat */
        cluster_num = ltoh32(fat_entry);
        
        if(cluster_num == FAT32_CLUSTER_FREE ||
           cluster_num == FAT32_CLUSTER_BAD ||
    25f6:	87 30       	cpi	r24, 0x07	; 7
    25f8:	91 05       	cpc	r25, r1
    25fa:	a1 05       	cpc	r26, r1
    25fc:	b1 05       	cpc	r27, r1
    25fe:	08 f4       	brcc	.+2      	; 0x2602 <fat_get_next_cluster+0x182>
    2600:	92 c0       	rjmp	.+292    	; 0x2726 <fat_get_next_cluster+0x2a6>
           (cluster_num >= FAT32_CLUSTER_RESERVED_MIN && cluster_num <= FAT32_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT32_CLUSTER_LAST_MIN && cluster_num <= FAT32_CLUSTER_LAST_MAX))
    2602:	da 01       	movw	r26, r20
    2604:	c9 01       	movw	r24, r18
    2606:	88 5f       	subi	r24, 0xF8	; 248
    2608:	9f 4f       	sbci	r25, 0xFF	; 255
    260a:	af 4f       	sbci	r26, 0xFF	; 255
    260c:	bf 40       	sbci	r27, 0x0F	; 15
    260e:	86 c0       	rjmp	.+268    	; 0x271c <fat_get_next_cluster+0x29c>
    else
#endif
    {
        /* read appropriate fat entry */
        uint16_t fat_entry;
        if(!fs->partition->device_read(fs->header.fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2610:	8a 01       	movw	r16, r20
    2612:	9b 01       	movw	r18, r22
    2614:	00 0f       	add	r16, r16
    2616:	11 1f       	adc	r17, r17
    2618:	22 1f       	adc	r18, r18
    261a:	33 1f       	adc	r19, r19
    261c:	40 e0       	ldi	r20, 0x00	; 0
    261e:	50 e0       	ldi	r21, 0x00	; 0
    2620:	ba 01       	movw	r22, r20
    2622:	d0 0e       	add	r13, r16
    2624:	b1 e0       	ldi	r27, 0x01	; 1
    2626:	d0 16       	cp	r13, r16
    2628:	08 f0       	brcs	.+2      	; 0x262c <fat_get_next_cluster+0x1ac>
    262a:	b0 e0       	ldi	r27, 0x00	; 0
    262c:	c1 0e       	add	r12, r17
    262e:	a1 e0       	ldi	r26, 0x01	; 1
    2630:	c1 16       	cp	r12, r17
    2632:	08 f0       	brcs	.+2      	; 0x2636 <fat_get_next_cluster+0x1b6>
    2634:	a0 e0       	ldi	r26, 0x00	; 0
    2636:	8b 2e       	mov	r8, r27
    2638:	8c 0c       	add	r8, r12
    263a:	b1 e0       	ldi	r27, 0x01	; 1
    263c:	8c 14       	cp	r8, r12
    263e:	08 f0       	brcs	.+2      	; 0x2642 <fat_get_next_cluster+0x1c2>
    2640:	b0 e0       	ldi	r27, 0x00	; 0
    2642:	ab 2b       	or	r26, r27
    2644:	b2 0e       	add	r11, r18
    2646:	b1 e0       	ldi	r27, 0x01	; 1
    2648:	b2 16       	cp	r11, r18
    264a:	08 f0       	brcs	.+2      	; 0x264e <fat_get_next_cluster+0x1ce>
    264c:	b0 e0       	ldi	r27, 0x00	; 0
    264e:	9a 2e       	mov	r9, r26
    2650:	9b 0c       	add	r9, r11
    2652:	a1 e0       	ldi	r26, 0x01	; 1
    2654:	9b 14       	cp	r9, r11
    2656:	08 f0       	brcs	.+2      	; 0x265a <fat_get_next_cluster+0x1da>
    2658:	a0 e0       	ldi	r26, 0x00	; 0
    265a:	ba 2b       	or	r27, r26
    265c:	a3 0e       	add	r10, r19
    265e:	a1 e0       	ldi	r26, 0x01	; 1
    2660:	a3 16       	cp	r10, r19
    2662:	08 f0       	brcs	.+2      	; 0x2666 <fat_get_next_cluster+0x1e6>
    2664:	a0 e0       	ldi	r26, 0x00	; 0
    2666:	bb 2e       	mov	r11, r27
    2668:	ba 0c       	add	r11, r10
    266a:	b1 e0       	ldi	r27, 0x01	; 1
    266c:	ba 14       	cp	r11, r10
    266e:	08 f0       	brcs	.+2      	; 0x2672 <fat_get_next_cluster+0x1f2>
    2670:	b0 e0       	ldi	r27, 0x00	; 0
    2672:	ab 2b       	or	r26, r27
    2674:	b1 e0       	ldi	r27, 0x01	; 1
    2676:	84 17       	cp	r24, r20
    2678:	08 f0       	brcs	.+2      	; 0x267c <fat_get_next_cluster+0x1fc>
    267a:	b0 e0       	ldi	r27, 0x00	; 0
    267c:	ca 2e       	mov	r12, r26
    267e:	c8 0e       	add	r12, r24
    2680:	a1 e0       	ldi	r26, 0x01	; 1
    2682:	c8 16       	cp	r12, r24
    2684:	08 f0       	brcs	.+2      	; 0x2688 <fat_get_next_cluster+0x208>
    2686:	a0 e0       	ldi	r26, 0x00	; 0
    2688:	ba 2b       	or	r27, r26
    268a:	81 e0       	ldi	r24, 0x01	; 1
    268c:	e5 16       	cp	r14, r21
    268e:	08 f0       	brcs	.+2      	; 0x2692 <fat_get_next_cluster+0x212>
    2690:	80 e0       	ldi	r24, 0x00	; 0
    2692:	be 0d       	add	r27, r14
    2694:	a1 e0       	ldi	r26, 0x01	; 1
    2696:	be 15       	cp	r27, r14
    2698:	08 f0       	brcs	.+2      	; 0x269c <fat_get_next_cluster+0x21c>
    269a:	a0 e0       	ldi	r26, 0x00	; 0
    269c:	8a 2b       	or	r24, r26
    269e:	a1 e0       	ldi	r26, 0x01	; 1
    26a0:	f6 16       	cp	r15, r22
    26a2:	08 f0       	brcs	.+2      	; 0x26a6 <fat_get_next_cluster+0x226>
    26a4:	a0 e0       	ldi	r26, 0x00	; 0
    26a6:	8f 0d       	add	r24, r15
    26a8:	21 e0       	ldi	r18, 0x01	; 1
    26aa:	8f 15       	cp	r24, r15
    26ac:	08 f0       	brcs	.+2      	; 0x26b0 <fat_get_next_cluster+0x230>
    26ae:	20 e0       	ldi	r18, 0x00	; 0
    26b0:	a2 2b       	or	r26, r18
    26b2:	01 90       	ld	r0, Z+
    26b4:	f0 81       	ld	r31, Z
    26b6:	e0 2d       	mov	r30, r0
    26b8:	2d 2d       	mov	r18, r13
    26ba:	38 2d       	mov	r19, r8
    26bc:	49 2d       	mov	r20, r9
    26be:	5b 2d       	mov	r21, r11
    26c0:	6c 2d       	mov	r22, r12
    26c2:	7b 2f       	mov	r23, r27
    26c4:	9a 0f       	add	r25, r26
    26c6:	8e 01       	movw	r16, r28
    26c8:	0f 5f       	subi	r16, 0xFF	; 255
    26ca:	1f 4f       	sbci	r17, 0xFF	; 255
    26cc:	a2 e0       	ldi	r26, 0x02	; 2
    26ce:	ea 2e       	mov	r14, r26
    26d0:	f1 2c       	mov	r15, r1
    26d2:	09 95       	icall
    26d4:	88 23       	and	r24, r24
    26d6:	39 f1       	breq	.+78     	; 0x2726 <fat_get_next_cluster+0x2a6>
            return 0;

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
    26d8:	29 81       	ldd	r18, Y+1	; 0x01
    26da:	3a 81       	ldd	r19, Y+2	; 0x02
    26dc:	40 e0       	ldi	r20, 0x00	; 0
    26de:	50 e0       	ldi	r21, 0x00	; 0
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
    26e0:	21 15       	cp	r18, r1
    26e2:	31 05       	cpc	r19, r1
    26e4:	41 05       	cpc	r20, r1
    26e6:	51 05       	cpc	r21, r1
    26e8:	09 f1       	breq	.+66     	; 0x272c <fat_get_next_cluster+0x2ac>
    26ea:	27 3f       	cpi	r18, 0xF7	; 247
    26ec:	8f ef       	ldi	r24, 0xFF	; 255
    26ee:	38 07       	cpc	r19, r24
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	48 07       	cpc	r20, r24
    26f4:	80 e0       	ldi	r24, 0x00	; 0
    26f6:	58 07       	cpc	r21, r24
    26f8:	b1 f0       	breq	.+44     	; 0x2726 <fat_get_next_cluster+0x2a6>
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
    26fa:	da 01       	movw	r26, r20
    26fc:	c9 01       	movw	r24, r18
    26fe:	80 5f       	subi	r24, 0xF0	; 240
    2700:	9f 4f       	sbci	r25, 0xFF	; 255
    2702:	a0 40       	sbci	r26, 0x00	; 0
    2704:	b0 40       	sbci	r27, 0x00	; 0

        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
    2706:	87 30       	cpi	r24, 0x07	; 7
    2708:	91 05       	cpc	r25, r1
    270a:	a1 05       	cpc	r26, r1
    270c:	b1 05       	cpc	r27, r1
    270e:	58 f0       	brcs	.+22     	; 0x2726 <fat_get_next_cluster+0x2a6>
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
    2710:	da 01       	movw	r26, r20
    2712:	c9 01       	movw	r24, r18
    2714:	88 5f       	subi	r24, 0xF8	; 248
    2716:	9f 4f       	sbci	r25, 0xFF	; 255
    2718:	a0 40       	sbci	r26, 0x00	; 0
    271a:	b0 40       	sbci	r27, 0x00	; 0
        /* determine next cluster from fat */
        cluster_num = ltoh16(fat_entry);
        
        if(cluster_num == FAT16_CLUSTER_FREE ||
           cluster_num == FAT16_CLUSTER_BAD ||
           (cluster_num >= FAT16_CLUSTER_RESERVED_MIN && cluster_num <= FAT16_CLUSTER_RESERVED_MAX) ||
    271c:	88 30       	cpi	r24, 0x08	; 8
    271e:	91 05       	cpc	r25, r1
    2720:	a1 05       	cpc	r26, r1
    2722:	b1 05       	cpc	r27, r1
    2724:	18 f4       	brcc	.+6      	; 0x272c <fat_get_next_cluster+0x2ac>
           (cluster_num >= FAT16_CLUSTER_LAST_MIN && cluster_num <= FAT16_CLUSTER_LAST_MAX))
            return 0;
    2726:	20 e0       	ldi	r18, 0x00	; 0
    2728:	30 e0       	ldi	r19, 0x00	; 0
    272a:	a9 01       	movw	r20, r18
    }

    return cluster_num;
}
    272c:	b9 01       	movw	r22, r18
    272e:	ca 01       	movw	r24, r20
    2730:	26 96       	adiw	r28, 0x06	; 6
    2732:	0f b6       	in	r0, 0x3f	; 63
    2734:	f8 94       	cli
    2736:	de bf       	out	0x3e, r29	; 62
    2738:	0f be       	out	0x3f, r0	; 63
    273a:	cd bf       	out	0x3d, r28	; 61
    273c:	cf 91       	pop	r28
    273e:	df 91       	pop	r29
    2740:	1f 91       	pop	r17
    2742:	0f 91       	pop	r16
    2744:	ff 90       	pop	r15
    2746:	ef 90       	pop	r14
    2748:	df 90       	pop	r13
    274a:	cf 90       	pop	r12
    274c:	bf 90       	pop	r11
    274e:	af 90       	pop	r10
    2750:	9f 90       	pop	r9
    2752:	8f 90       	pop	r8
    2754:	08 95       	ret

00002756 <fat_free_clusters>:
 * \param[in] cluster_num The starting cluster of the chain which to free.
 * \returns 0 on failure, 1 on success.
 * \see fat_terminate_clusters
 */
uint8_t fat_free_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    2756:	2f 92       	push	r2
    2758:	3f 92       	push	r3
    275a:	4f 92       	push	r4
    275c:	5f 92       	push	r5
    275e:	6f 92       	push	r6
    2760:	7f 92       	push	r7
    2762:	8f 92       	push	r8
    2764:	9f 92       	push	r9
    2766:	af 92       	push	r10
    2768:	bf 92       	push	r11
    276a:	cf 92       	push	r12
    276c:	df 92       	push	r13
    276e:	ef 92       	push	r14
    2770:	ff 92       	push	r15
    2772:	0f 93       	push	r16
    2774:	1f 93       	push	r17
    2776:	df 93       	push	r29
    2778:	cf 93       	push	r28
    277a:	cd b7       	in	r28, 0x3d	; 61
    277c:	de b7       	in	r29, 0x3e	; 62
    277e:	60 97       	sbiw	r28, 0x10	; 16
    2780:	0f b6       	in	r0, 0x3f	; 63
    2782:	f8 94       	cli
    2784:	de bf       	out	0x3e, r29	; 62
    2786:	0f be       	out	0x3f, r0	; 63
    2788:	cd bf       	out	0x3d, r28	; 61
    278a:	6c 01       	movw	r12, r24
    278c:	4a 01       	movw	r8, r20
    278e:	5b 01       	movw	r10, r22
    if(!fs || cluster_num < 2)
    2790:	00 97       	sbiw	r24, 0x00	; 0
    2792:	09 f4       	brne	.+2      	; 0x2796 <fat_free_clusters+0x40>
    2794:	93 c1       	rjmp	.+806    	; 0x2abc <fat_free_clusters+0x366>
    2796:	42 30       	cpi	r20, 0x02	; 2
    2798:	51 05       	cpc	r21, r1
    279a:	61 05       	cpc	r22, r1
    279c:	71 05       	cpc	r23, r1
    279e:	08 f4       	brcc	.+2      	; 0x27a2 <fat_free_clusters+0x4c>
    27a0:	8d c1       	rjmp	.+794    	; 0x2abc <fat_free_clusters+0x366>
        return 0;

    offset_t fat_offset = fs->header.fat_offset;
    27a2:	dc 01       	movw	r26, r24
    27a4:	1a 96       	adiw	r26, 0x0a	; 10
    27a6:	bc 91       	ld	r27, X
    27a8:	bc 87       	std	Y+12, r27	; 0x0c
    27aa:	fc 01       	movw	r30, r24
    27ac:	f3 85       	ldd	r31, Z+11	; 0x0b
    27ae:	fd 87       	std	Y+13, r31	; 0x0d
    27b0:	dc 01       	movw	r26, r24
    27b2:	1c 96       	adiw	r26, 0x0c	; 12
    27b4:	bc 91       	ld	r27, X
    27b6:	be 87       	std	Y+14, r27	; 0x0e
    27b8:	fc 01       	movw	r30, r24
    27ba:	f5 85       	ldd	r31, Z+13	; 0x0d
    27bc:	ff 87       	std	Y+15, r31	; 0x0f
    27be:	dc 01       	movw	r26, r24
    27c0:	1e 96       	adiw	r26, 0x0e	; 14
    27c2:	bc 91       	ld	r27, X
    27c4:	bf 83       	std	Y+7, r27	; 0x07
    27c6:	fc 01       	movw	r30, r24
    27c8:	f7 85       	ldd	r31, Z+15	; 0x0f
    27ca:	f8 87       	std	Y+8, r31	; 0x08
    27cc:	dc 01       	movw	r26, r24
    27ce:	50 96       	adiw	r26, 0x10	; 16
    27d0:	bc 91       	ld	r27, X
    27d2:	b9 87       	std	Y+9, r27	; 0x09
    27d4:	fc 01       	movw	r30, r24
    27d6:	f1 89       	ldd	r31, Z+17	; 0x11
    27d8:	f8 8b       	std	Y+16, r31	; 0x10
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    27da:	dc 01       	movw	r26, r24
    27dc:	ed 91       	ld	r30, X+
    27de:	fc 91       	ld	r31, X
    27e0:	11 97       	sbiw	r26, 0x01	; 1
    27e2:	80 85       	ldd	r24, Z+8	; 0x08
    27e4:	8b 30       	cpi	r24, 0x0B	; 11
    27e6:	09 f0       	breq	.+2      	; 0x27ea <fat_free_clusters+0x94>
    27e8:	be c0       	rjmp	.+380    	; 0x2966 <fat_free_clusters+0x210>
    {
        uint32_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    27ea:	36 01       	movw	r6, r12
    27ec:	12 e0       	ldi	r17, 0x02	; 2
    27ee:	88 0c       	add	r8, r8
    27f0:	99 1c       	adc	r9, r9
    27f2:	aa 1c       	adc	r10, r10
    27f4:	bb 1c       	adc	r11, r11
    27f6:	1a 95       	dec	r17
    27f8:	d1 f7       	brne	.-12     	; 0x27ee <fat_free_clusters+0x98>
    27fa:	cc 24       	eor	r12, r12
    27fc:	dd 24       	eor	r13, r13
    27fe:	76 01       	movw	r14, r12
    2800:	5c 84       	ldd	r5, Y+12	; 0x0c
    2802:	58 0c       	add	r5, r8
    2804:	21 e0       	ldi	r18, 0x01	; 1
    2806:	58 14       	cp	r5, r8
    2808:	08 f0       	brcs	.+2      	; 0x280c <fat_free_clusters+0xb6>
    280a:	20 e0       	ldi	r18, 0x00	; 0
    280c:	9d 85       	ldd	r25, Y+13	; 0x0d
    280e:	99 0d       	add	r25, r9
    2810:	81 e0       	ldi	r24, 0x01	; 1
    2812:	99 15       	cp	r25, r9
    2814:	08 f0       	brcs	.+2      	; 0x2818 <fat_free_clusters+0xc2>
    2816:	80 e0       	ldi	r24, 0x00	; 0
    2818:	42 2e       	mov	r4, r18
    281a:	49 0e       	add	r4, r25
    281c:	21 e0       	ldi	r18, 0x01	; 1
    281e:	49 16       	cp	r4, r25
    2820:	08 f0       	brcs	.+2      	; 0x2824 <fat_free_clusters+0xce>
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	82 2b       	or	r24, r18
    2826:	2e 85       	ldd	r18, Y+14	; 0x0e
    2828:	2a 0d       	add	r18, r10
    282a:	91 e0       	ldi	r25, 0x01	; 1
    282c:	2a 15       	cp	r18, r10
    282e:	08 f0       	brcs	.+2      	; 0x2832 <fat_free_clusters+0xdc>
    2830:	90 e0       	ldi	r25, 0x00	; 0
    2832:	38 2e       	mov	r3, r24
    2834:	32 0e       	add	r3, r18
    2836:	81 e0       	ldi	r24, 0x01	; 1
    2838:	32 16       	cp	r3, r18
    283a:	08 f0       	brcs	.+2      	; 0x283e <fat_free_clusters+0xe8>
    283c:	80 e0       	ldi	r24, 0x00	; 0
    283e:	98 2b       	or	r25, r24
    2840:	2f 85       	ldd	r18, Y+15	; 0x0f
    2842:	2b 0d       	add	r18, r11
    2844:	81 e0       	ldi	r24, 0x01	; 1
    2846:	2b 15       	cp	r18, r11
    2848:	08 f0       	brcs	.+2      	; 0x284c <fat_free_clusters+0xf6>
    284a:	80 e0       	ldi	r24, 0x00	; 0
    284c:	29 2e       	mov	r2, r25
    284e:	22 0e       	add	r2, r18
    2850:	91 e0       	ldi	r25, 0x01	; 1
    2852:	22 16       	cp	r2, r18
    2854:	08 f0       	brcs	.+2      	; 0x2858 <fat_free_clusters+0x102>
    2856:	90 e0       	ldi	r25, 0x00	; 0
    2858:	89 2b       	or	r24, r25
    285a:	91 e0       	ldi	r25, 0x01	; 1
    285c:	bf 81       	ldd	r27, Y+7	; 0x07
    285e:	bc 15       	cp	r27, r12
    2860:	08 f0       	brcs	.+2      	; 0x2864 <fat_free_clusters+0x10e>
    2862:	90 e0       	ldi	r25, 0x00	; 0
    2864:	ef 81       	ldd	r30, Y+7	; 0x07
    2866:	e8 0f       	add	r30, r24
    2868:	ea 87       	std	Y+10, r30	; 0x0a
    286a:	81 e0       	ldi	r24, 0x01	; 1
    286c:	ff 81       	ldd	r31, Y+7	; 0x07
    286e:	ef 17       	cp	r30, r31
    2870:	08 f0       	brcs	.+2      	; 0x2874 <fat_free_clusters+0x11e>
    2872:	80 e0       	ldi	r24, 0x00	; 0
    2874:	98 2b       	or	r25, r24
    2876:	81 e0       	ldi	r24, 0x01	; 1
    2878:	28 85       	ldd	r18, Y+8	; 0x08
    287a:	2d 15       	cp	r18, r13
    287c:	08 f0       	brcs	.+2      	; 0x2880 <fat_free_clusters+0x12a>
    287e:	80 e0       	ldi	r24, 0x00	; 0
    2880:	38 85       	ldd	r19, Y+8	; 0x08
    2882:	39 0f       	add	r19, r25
    2884:	3b 87       	std	Y+11, r19	; 0x0b
    2886:	91 e0       	ldi	r25, 0x01	; 1
    2888:	a8 85       	ldd	r26, Y+8	; 0x08
    288a:	3a 17       	cp	r19, r26
    288c:	08 f0       	brcs	.+2      	; 0x2890 <fat_free_clusters+0x13a>
    288e:	90 e0       	ldi	r25, 0x00	; 0
    2890:	89 2b       	or	r24, r25
    2892:	91 e0       	ldi	r25, 0x01	; 1
    2894:	b9 85       	ldd	r27, Y+9	; 0x09
    2896:	be 15       	cp	r27, r14
    2898:	08 f0       	brcs	.+2      	; 0x289c <fat_free_clusters+0x146>
    289a:	90 e0       	ldi	r25, 0x00	; 0
    289c:	c9 84       	ldd	r12, Y+9	; 0x09
    289e:	c8 0e       	add	r12, r24
    28a0:	81 e0       	ldi	r24, 0x01	; 1
    28a2:	e9 85       	ldd	r30, Y+9	; 0x09
    28a4:	ce 16       	cp	r12, r30
    28a6:	08 f0       	brcs	.+2      	; 0x28aa <fat_free_clusters+0x154>
    28a8:	80 e0       	ldi	r24, 0x00	; 0
    28aa:	d9 2e       	mov	r13, r25
    28ac:	d8 2a       	or	r13, r24
    28ae:	f8 89       	ldd	r31, Y+16	; 0x10
    28b0:	df 0e       	add	r13, r31
    28b2:	d3 01       	movw	r26, r6
    28b4:	ed 91       	ld	r30, X+
    28b6:	fc 91       	ld	r31, X
    28b8:	01 90       	ld	r0, Z+
    28ba:	f0 81       	ld	r31, Z
    28bc:	e0 2d       	mov	r30, r0
    28be:	25 2d       	mov	r18, r5
    28c0:	34 2d       	mov	r19, r4
    28c2:	43 2d       	mov	r20, r3
    28c4:	52 2d       	mov	r21, r2
    28c6:	6a 85       	ldd	r22, Y+10	; 0x0a
    28c8:	7b 85       	ldd	r23, Y+11	; 0x0b
    28ca:	c6 01       	movw	r24, r12
    28cc:	8e 01       	movw	r16, r28
    28ce:	0d 5f       	subi	r16, 0xFD	; 253
    28d0:	1f 4f       	sbci	r17, 0xFF	; 255
    28d2:	b4 e0       	ldi	r27, 0x04	; 4
    28d4:	eb 2e       	mov	r14, r27
    28d6:	f1 2c       	mov	r15, r1
    28d8:	09 95       	icall
    28da:	88 23       	and	r24, r24
    28dc:	09 f4       	brne	.+2      	; 0x28e0 <fat_free_clusters+0x18a>
    28de:	ee c0       	rjmp	.+476    	; 0x2abc <fat_free_clusters+0x366>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint32_t cluster_num_next = ltoh32(fat_entry);
    28e0:	8b 80       	ldd	r8, Y+3	; 0x03
    28e2:	9c 80       	ldd	r9, Y+4	; 0x04
    28e4:	ad 80       	ldd	r10, Y+5	; 0x05
    28e6:	be 80       	ldd	r11, Y+6	; 0x06

            if(cluster_num_next == FAT32_CLUSTER_FREE)
    28e8:	81 14       	cp	r8, r1
    28ea:	91 04       	cpc	r9, r1
    28ec:	a1 04       	cpc	r10, r1
    28ee:	b1 04       	cpc	r11, r1
    28f0:	09 f4       	brne	.+2      	; 0x28f4 <fat_free_clusters+0x19e>
    28f2:	e2 c0       	rjmp	.+452    	; 0x2ab8 <fat_free_clusters+0x362>
                return 1;
            if(cluster_num_next == FAT32_CLUSTER_BAD ||
    28f4:	d5 01       	movw	r26, r10
    28f6:	c4 01       	movw	r24, r8
    28f8:	80 5f       	subi	r24, 0xF0	; 240
    28fa:	9f 4f       	sbci	r25, 0xFF	; 255
    28fc:	af 4f       	sbci	r26, 0xFF	; 255
    28fe:	bf 40       	sbci	r27, 0x0F	; 15
    2900:	88 30       	cpi	r24, 0x08	; 8
    2902:	91 05       	cpc	r25, r1
    2904:	a1 05       	cpc	r26, r1
    2906:	b1 05       	cpc	r27, r1
    2908:	08 f4       	brcc	.+2      	; 0x290c <fat_free_clusters+0x1b6>
    290a:	d8 c0       	rjmp	.+432    	; 0x2abc <fat_free_clusters+0x366>
               (cluster_num_next >= FAT32_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT32_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT32_CLUSTER_LAST_MIN && cluster_num_next <= FAT32_CLUSTER_LAST_MAX)
    290c:	d5 01       	movw	r26, r10
    290e:	c4 01       	movw	r24, r8
    2910:	88 5f       	subi	r24, 0xF8	; 248
    2912:	9f 4f       	sbci	r25, 0xFF	; 255
    2914:	af 4f       	sbci	r26, 0xFF	; 255
    2916:	bf 40       	sbci	r27, 0x0F	; 15
    2918:	88 30       	cpi	r24, 0x08	; 8
    291a:	91 05       	cpc	r25, r1
    291c:	a1 05       	cpc	r26, r1
    291e:	b1 05       	cpc	r27, r1
    2920:	18 f4       	brcc	.+6      	; 0x2928 <fat_free_clusters+0x1d2>
                cluster_num_next = 0;
    2922:	88 24       	eor	r8, r8
    2924:	99 24       	eor	r9, r9
    2926:	54 01       	movw	r10, r8

            /* free cluster */
            fat_entry = HTOL32(FAT32_CLUSTER_FREE);
    2928:	1b 82       	std	Y+3, r1	; 0x03
    292a:	1c 82       	std	Y+4, r1	; 0x04
    292c:	1d 82       	std	Y+5, r1	; 0x05
    292e:	1e 82       	std	Y+6, r1	; 0x06
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    2930:	d3 01       	movw	r26, r6
    2932:	ed 91       	ld	r30, X+
    2934:	fc 91       	ld	r31, X
    2936:	04 80       	ldd	r0, Z+4	; 0x04
    2938:	f5 81       	ldd	r31, Z+5	; 0x05
    293a:	e0 2d       	mov	r30, r0
    293c:	25 2d       	mov	r18, r5
    293e:	34 2d       	mov	r19, r4
    2940:	43 2d       	mov	r20, r3
    2942:	52 2d       	mov	r21, r2
    2944:	6a 85       	ldd	r22, Y+10	; 0x0a
    2946:	7b 85       	ldd	r23, Y+11	; 0x0b
    2948:	c6 01       	movw	r24, r12
    294a:	8e 01       	movw	r16, r28
    294c:	0d 5f       	subi	r16, 0xFD	; 253
    294e:	1f 4f       	sbci	r17, 0xFF	; 255
    2950:	a4 e0       	ldi	r26, 0x04	; 4
    2952:	ea 2e       	mov	r14, r26
    2954:	f1 2c       	mov	r15, r1
    2956:	09 95       	icall
    offset_t fat_offset = fs->header.fat_offset;
#if FAT_FAT32_SUPPORT
    if(fs->partition->type == PARTITION_TYPE_FAT32)
    {
        uint32_t fat_entry;
        while(cluster_num)
    2958:	81 14       	cp	r8, r1
    295a:	91 04       	cpc	r9, r1
    295c:	a1 04       	cpc	r10, r1
    295e:	b1 04       	cpc	r11, r1
    2960:	09 f0       	breq	.+2      	; 0x2964 <fat_free_clusters+0x20e>
    2962:	44 cf       	rjmp	.-376    	; 0x27ec <fat_free_clusters+0x96>
    2964:	a9 c0       	rjmp	.+338    	; 0x2ab8 <fat_free_clusters+0x362>
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
        {
            if(!fs->partition->device_read(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry)))
    2966:	9a 01       	movw	r18, r20
    2968:	ab 01       	movw	r20, r22
    296a:	56 01       	movw	r10, r12
    296c:	22 0f       	add	r18, r18
    296e:	33 1f       	adc	r19, r19
    2970:	44 1f       	adc	r20, r20
    2972:	55 1f       	adc	r21, r21
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	70 e0       	ldi	r23, 0x00	; 0
    2978:	cb 01       	movw	r24, r22
    297a:	6c 84       	ldd	r6, Y+12	; 0x0c
    297c:	62 0e       	add	r6, r18
    297e:	a1 e0       	ldi	r26, 0x01	; 1
    2980:	62 16       	cp	r6, r18
    2982:	08 f0       	brcs	.+2      	; 0x2986 <fat_free_clusters+0x230>
    2984:	a0 e0       	ldi	r26, 0x00	; 0
    2986:	fd 85       	ldd	r31, Y+13	; 0x0d
    2988:	f3 0f       	add	r31, r19
    298a:	e1 e0       	ldi	r30, 0x01	; 1
    298c:	f3 17       	cp	r31, r19
    298e:	08 f0       	brcs	.+2      	; 0x2992 <fat_free_clusters+0x23c>
    2990:	e0 e0       	ldi	r30, 0x00	; 0
    2992:	5a 2e       	mov	r5, r26
    2994:	5f 0e       	add	r5, r31
    2996:	a1 e0       	ldi	r26, 0x01	; 1
    2998:	5f 16       	cp	r5, r31
    299a:	08 f0       	brcs	.+2      	; 0x299e <fat_free_clusters+0x248>
    299c:	a0 e0       	ldi	r26, 0x00	; 0
    299e:	ea 2b       	or	r30, r26
    29a0:	ae 85       	ldd	r26, Y+14	; 0x0e
    29a2:	a4 0f       	add	r26, r20
    29a4:	f1 e0       	ldi	r31, 0x01	; 1
    29a6:	a4 17       	cp	r26, r20
    29a8:	08 f0       	brcs	.+2      	; 0x29ac <fat_free_clusters+0x256>
    29aa:	f0 e0       	ldi	r31, 0x00	; 0
    29ac:	4e 2e       	mov	r4, r30
    29ae:	4a 0e       	add	r4, r26
    29b0:	e1 e0       	ldi	r30, 0x01	; 1
    29b2:	4a 16       	cp	r4, r26
    29b4:	08 f0       	brcs	.+2      	; 0x29b8 <fat_free_clusters+0x262>
    29b6:	e0 e0       	ldi	r30, 0x00	; 0
    29b8:	fe 2b       	or	r31, r30
    29ba:	af 85       	ldd	r26, Y+15	; 0x0f
    29bc:	a5 0f       	add	r26, r21
    29be:	e1 e0       	ldi	r30, 0x01	; 1
    29c0:	a5 17       	cp	r26, r21
    29c2:	08 f0       	brcs	.+2      	; 0x29c6 <fat_free_clusters+0x270>
    29c4:	e0 e0       	ldi	r30, 0x00	; 0
    29c6:	3f 2e       	mov	r3, r31
    29c8:	3a 0e       	add	r3, r26
    29ca:	f1 e0       	ldi	r31, 0x01	; 1
    29cc:	3a 16       	cp	r3, r26
    29ce:	08 f0       	brcs	.+2      	; 0x29d2 <fat_free_clusters+0x27c>
    29d0:	f0 e0       	ldi	r31, 0x00	; 0
    29d2:	ef 2b       	or	r30, r31
    29d4:	f1 e0       	ldi	r31, 0x01	; 1
    29d6:	bf 81       	ldd	r27, Y+7	; 0x07
    29d8:	b6 17       	cp	r27, r22
    29da:	08 f0       	brcs	.+2      	; 0x29de <fat_free_clusters+0x288>
    29dc:	f0 e0       	ldi	r31, 0x00	; 0
    29de:	2f 80       	ldd	r2, Y+7	; 0x07
    29e0:	2e 0e       	add	r2, r30
    29e2:	e1 e0       	ldi	r30, 0x01	; 1
    29e4:	af 81       	ldd	r26, Y+7	; 0x07
    29e6:	2a 16       	cp	r2, r26
    29e8:	08 f0       	brcs	.+2      	; 0x29ec <fat_free_clusters+0x296>
    29ea:	e0 e0       	ldi	r30, 0x00	; 0
    29ec:	fe 2b       	or	r31, r30
    29ee:	e1 e0       	ldi	r30, 0x01	; 1
    29f0:	b8 85       	ldd	r27, Y+8	; 0x08
    29f2:	b7 17       	cp	r27, r23
    29f4:	08 f0       	brcs	.+2      	; 0x29f8 <fat_free_clusters+0x2a2>
    29f6:	e0 e0       	ldi	r30, 0x00	; 0
    29f8:	d8 84       	ldd	r13, Y+8	; 0x08
    29fa:	df 0e       	add	r13, r31
    29fc:	f1 e0       	ldi	r31, 0x01	; 1
    29fe:	a8 85       	ldd	r26, Y+8	; 0x08
    2a00:	da 16       	cp	r13, r26
    2a02:	08 f0       	brcs	.+2      	; 0x2a06 <fat_free_clusters+0x2b0>
    2a04:	f0 e0       	ldi	r31, 0x00	; 0
    2a06:	ef 2b       	or	r30, r31
    2a08:	f1 e0       	ldi	r31, 0x01	; 1
    2a0a:	b9 85       	ldd	r27, Y+9	; 0x09
    2a0c:	b8 17       	cp	r27, r24
    2a0e:	08 f0       	brcs	.+2      	; 0x2a12 <fat_free_clusters+0x2bc>
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	79 84       	ldd	r7, Y+9	; 0x09
    2a14:	7e 0e       	add	r7, r30
    2a16:	81 e0       	ldi	r24, 0x01	; 1
    2a18:	e9 85       	ldd	r30, Y+9	; 0x09
    2a1a:	7e 16       	cp	r7, r30
    2a1c:	08 f0       	brcs	.+2      	; 0x2a20 <fat_free_clusters+0x2ca>
    2a1e:	80 e0       	ldi	r24, 0x00	; 0
    2a20:	cf 2e       	mov	r12, r31
    2a22:	c8 2a       	or	r12, r24
    2a24:	f8 89       	ldd	r31, Y+16	; 0x10
    2a26:	cf 0e       	add	r12, r31
    2a28:	d5 01       	movw	r26, r10
    2a2a:	ed 91       	ld	r30, X+
    2a2c:	fc 91       	ld	r31, X
    2a2e:	01 90       	ld	r0, Z+
    2a30:	f0 81       	ld	r31, Z
    2a32:	e0 2d       	mov	r30, r0
    2a34:	26 2d       	mov	r18, r6
    2a36:	35 2d       	mov	r19, r5
    2a38:	44 2d       	mov	r20, r4
    2a3a:	53 2d       	mov	r21, r3
    2a3c:	62 2d       	mov	r22, r2
    2a3e:	7d 2d       	mov	r23, r13
    2a40:	87 2d       	mov	r24, r7
    2a42:	9c 2d       	mov	r25, r12
    2a44:	8e 01       	movw	r16, r28
    2a46:	0f 5f       	subi	r16, 0xFF	; 255
    2a48:	1f 4f       	sbci	r17, 0xFF	; 255
    2a4a:	b2 e0       	ldi	r27, 0x02	; 2
    2a4c:	eb 2e       	mov	r14, r27
    2a4e:	f1 2c       	mov	r15, r1
    2a50:	09 95       	icall
    2a52:	88 23       	and	r24, r24
    2a54:	99 f1       	breq	.+102    	; 0x2abc <fat_free_clusters+0x366>
                return 0;

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);
    2a56:	89 80       	ldd	r8, Y+1	; 0x01
    2a58:	9a 80       	ldd	r9, Y+2	; 0x02

            if(cluster_num_next == FAT16_CLUSTER_FREE)
    2a5a:	81 14       	cp	r8, r1
    2a5c:	91 04       	cpc	r9, r1
    2a5e:	61 f1       	breq	.+88     	; 0x2ab8 <fat_free_clusters+0x362>
                return 1;
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
    2a60:	c4 01       	movw	r24, r8
    2a62:	40 96       	adiw	r24, 0x10	; 16
    2a64:	88 30       	cpi	r24, 0x08	; 8
    2a66:	91 05       	cpc	r25, r1
    2a68:	48 f1       	brcs	.+82     	; 0x2abc <fat_free_clusters+0x366>
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
            if(cluster_num_next >= FAT16_CLUSTER_LAST_MIN && cluster_num_next <= FAT16_CLUSTER_LAST_MAX)
    2a6a:	b8 ef       	ldi	r27, 0xF8	; 248
    2a6c:	8b 16       	cp	r8, r27
    2a6e:	bf ef       	ldi	r27, 0xFF	; 255
    2a70:	9b 06       	cpc	r9, r27
    2a72:	10 f0       	brcs	.+4      	; 0x2a78 <fat_free_clusters+0x322>
                cluster_num_next = 0;
    2a74:	88 24       	eor	r8, r8
    2a76:	99 24       	eor	r9, r9

            /* free cluster */
            fat_entry = HTOL16(FAT16_CLUSTER_FREE);
    2a78:	1a 82       	std	Y+2, r1	; 0x02
    2a7a:	19 82       	std	Y+1, r1	; 0x01
            fs->partition->device_write(fat_offset + cluster_num * sizeof(fat_entry), (uint8_t*) &fat_entry, sizeof(fat_entry));
    2a7c:	d5 01       	movw	r26, r10
    2a7e:	ed 91       	ld	r30, X+
    2a80:	fc 91       	ld	r31, X
    2a82:	04 80       	ldd	r0, Z+4	; 0x04
    2a84:	f5 81       	ldd	r31, Z+5	; 0x05
    2a86:	e0 2d       	mov	r30, r0
    2a88:	26 2d       	mov	r18, r6
    2a8a:	35 2d       	mov	r19, r5
    2a8c:	44 2d       	mov	r20, r4
    2a8e:	53 2d       	mov	r21, r3
    2a90:	62 2d       	mov	r22, r2
    2a92:	7d 2d       	mov	r23, r13
    2a94:	87 2d       	mov	r24, r7
    2a96:	9c 2d       	mov	r25, r12
    2a98:	8e 01       	movw	r16, r28
    2a9a:	0f 5f       	subi	r16, 0xFF	; 255
    2a9c:	1f 4f       	sbci	r17, 0xFF	; 255
    2a9e:	a2 e0       	ldi	r26, 0x02	; 2
    2aa0:	ea 2e       	mov	r14, r26
    2aa2:	f1 2c       	mov	r15, r1
    2aa4:	09 95       	icall

            /* We continue in any case here, even if freeing the cluster failed.
             * The cluster is lost, but maybe we can still free up some later ones.
             */

            cluster_num = cluster_num_next;
    2aa6:	94 01       	movw	r18, r8
    2aa8:	40 e0       	ldi	r20, 0x00	; 0
    2aaa:	50 e0       	ldi	r21, 0x00	; 0
    }
    else
#endif
    {
        uint16_t fat_entry;
        while(cluster_num)
    2aac:	21 15       	cp	r18, r1
    2aae:	31 05       	cpc	r19, r1
    2ab0:	41 05       	cpc	r20, r1
    2ab2:	51 05       	cpc	r21, r1
    2ab4:	09 f0       	breq	.+2      	; 0x2ab8 <fat_free_clusters+0x362>
    2ab6:	5a cf       	rjmp	.-332    	; 0x296c <fat_free_clusters+0x216>

            /* get next cluster of current cluster before freeing current cluster */
            uint16_t cluster_num_next = ltoh16(fat_entry);

            if(cluster_num_next == FAT16_CLUSTER_FREE)
                return 1;
    2ab8:	81 e0       	ldi	r24, 0x01	; 1
    2aba:	01 c0       	rjmp	.+2      	; 0x2abe <fat_free_clusters+0x368>
            if(cluster_num_next == FAT16_CLUSTER_BAD ||
               (cluster_num_next >= FAT16_CLUSTER_RESERVED_MIN &&
                cluster_num_next <= FAT16_CLUSTER_RESERVED_MAX
               )
              )
                return 0;
    2abc:	80 e0       	ldi	r24, 0x00	; 0
            cluster_num = cluster_num_next;
        }
    }

    return 1;
}
    2abe:	60 96       	adiw	r28, 0x10	; 16
    2ac0:	0f b6       	in	r0, 0x3f	; 63
    2ac2:	f8 94       	cli
    2ac4:	de bf       	out	0x3e, r29	; 62
    2ac6:	0f be       	out	0x3f, r0	; 63
    2ac8:	cd bf       	out	0x3d, r28	; 61
    2aca:	cf 91       	pop	r28
    2acc:	df 91       	pop	r29
    2ace:	1f 91       	pop	r17
    2ad0:	0f 91       	pop	r16
    2ad2:	ff 90       	pop	r15
    2ad4:	ef 90       	pop	r14
    2ad6:	df 90       	pop	r13
    2ad8:	cf 90       	pop	r12
    2ada:	bf 90       	pop	r11
    2adc:	af 90       	pop	r10
    2ade:	9f 90       	pop	r9
    2ae0:	8f 90       	pop	r8
    2ae2:	7f 90       	pop	r7
    2ae4:	6f 90       	pop	r6
    2ae6:	5f 90       	pop	r5
    2ae8:	4f 90       	pop	r4
    2aea:	3f 90       	pop	r3
    2aec:	2f 90       	pop	r2
    2aee:	08 95       	ret

00002af0 <fat_append_clusters>:
 * \param[in] cluster_num The cluster to which to append the new chain.
 * \param[in] count The number of clusters to allocate.
 * \returns 0 on failure, the number of the first new cluster on success.
 */
cluster_t fat_append_clusters(const struct fat_fs_struct* fs, cluster_t cluster_num, cluster_t count)
{
    2af0:	2f 92       	push	r2
    2af2:	3f 92       	push	r3
    2af4:	4f 92       	push	r4
    2af6:	5f 92       	push	r5
    2af8:	6f 92       	push	r6
    2afa:	7f 92       	push	r7
    2afc:	8f 92       	push	r8
    2afe:	9f 92       	push	r9
    2b00:	af 92       	push	r10
    2b02:	bf 92       	push	r11
    2b04:	cf 92       	push	r12
    2b06:	df 92       	push	r13
    2b08:	ef 92       	push	r14
    2b0a:	ff 92       	push	r15
    2b0c:	0f 93       	push	r16
    2b0e:	1f 93       	push	r17
    2b10:	df 93       	push	r29
    2b12:	cf 93       	push	r28
    2b14:	cd b7       	in	r28, 0x3d	; 61
    2b16:	de b7       	in	r29, 0x3e	; 62
    2b18:	a9 97       	sbiw	r28, 0x29	; 41
    2b1a:	0f b6       	in	r0, 0x3f	; 63
    2b1c:	f8 94       	cli
    2b1e:	de bf       	out	0x3e, r29	; 62
    2b20:	0f be       	out	0x3f, r0	; 63
    2b22:	cd bf       	out	0x3d, r28	; 61
    2b24:	3c 01       	movw	r6, r24
    2b26:	4c a3       	std	Y+36, r20	; 0x24
    2b28:	5d a3       	std	Y+37, r21	; 0x25
    2b2a:	6e a3       	std	Y+38, r22	; 0x26
    2b2c:	7f a3       	std	Y+39, r23	; 0x27
    if(!fs)
    2b2e:	00 97       	sbiw	r24, 0x00	; 0
    2b30:	09 f4       	brne	.+2      	; 0x2b34 <fat_append_clusters+0x44>
    2b32:	e1 c2       	rjmp	.+1474   	; 0x30f6 <fat_append_clusters+0x606>
        return 0;

    device_read_t device_read = fs->partition->device_read;
    2b34:	dc 01       	movw	r26, r24
    2b36:	ed 91       	ld	r30, X+
    2b38:	fc 91       	ld	r31, X
    2b3a:	11 97       	sbiw	r26, 0x01	; 1
    2b3c:	e0 80       	ld	r14, Z
    2b3e:	f1 80       	ldd	r15, Z+1	; 0x01
    2b40:	f9 a6       	std	Y+41, r15	; 0x29
    2b42:	e8 a6       	std	Y+40, r14	; 0x28
    device_write_t device_write = fs->partition->device_write;
    2b44:	44 81       	ldd	r20, Z+4	; 0x04
    2b46:	55 81       	ldd	r21, Z+5	; 0x05
    2b48:	5f 8b       	std	Y+23, r21	; 0x17
    2b4a:	4e 8b       	std	Y+22, r20	; 0x16
    offset_t fat_offset = fs->header.fat_offset;
    2b4c:	1a 96       	adiw	r26, 0x0a	; 10
    2b4e:	5c 91       	ld	r21, X
    2b50:	1a 97       	sbiw	r26, 0x0a	; 10
    2b52:	5c 8f       	std	Y+28, r21	; 0x1c
    2b54:	1b 96       	adiw	r26, 0x0b	; 11
    2b56:	8c 91       	ld	r24, X
    2b58:	1b 97       	sbiw	r26, 0x0b	; 11
    2b5a:	8d 8f       	std	Y+29, r24	; 0x1d
    2b5c:	1c 96       	adiw	r26, 0x0c	; 12
    2b5e:	9c 91       	ld	r25, X
    2b60:	1c 97       	sbiw	r26, 0x0c	; 12
    2b62:	9e 8f       	std	Y+30, r25	; 0x1e
    2b64:	1d 96       	adiw	r26, 0x0d	; 13
    2b66:	ac 91       	ld	r26, X
    2b68:	af 8f       	std	Y+31, r26	; 0x1f
    2b6a:	d3 01       	movw	r26, r6
    2b6c:	1e 96       	adiw	r26, 0x0e	; 14
    2b6e:	cc 90       	ld	r12, X
    2b70:	1e 97       	sbiw	r26, 0x0e	; 14
    2b72:	1f 96       	adiw	r26, 0x0f	; 15
    2b74:	5c 90       	ld	r5, X
    2b76:	1f 97       	sbiw	r26, 0x0f	; 15
    2b78:	50 96       	adiw	r26, 0x10	; 16
    2b7a:	4c 90       	ld	r4, X
    2b7c:	50 97       	sbiw	r26, 0x10	; 16
    2b7e:	51 96       	adiw	r26, 0x11	; 17
    2b80:	bc 91       	ld	r27, X
    2b82:	b8 a3       	std	Y+32, r27	; 0x20
    cluster_t cluster_next = 0;
    cluster_t cluster_max;
    uint16_t fat_entry16;
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    2b84:	41 e0       	ldi	r20, 0x01	; 1
    2b86:	4b a3       	std	Y+35, r20	; 0x23
    2b88:	80 85       	ldd	r24, Z+8	; 0x08
    2b8a:	8b 30       	cpi	r24, 0x0B	; 11
    2b8c:	69 f0       	breq	.+26     	; 0x2ba8 <fat_append_clusters+0xb8>
    2b8e:	1b a2       	std	Y+35, r1	; 0x23

    if(is_fat32)
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);
    2b90:	d3 01       	movw	r26, r6
    2b92:	52 96       	adiw	r26, 0x12	; 18
    2b94:	8d 91       	ld	r24, X+
    2b96:	9d 91       	ld	r25, X+
    2b98:	0d 90       	ld	r0, X+
    2b9a:	bc 91       	ld	r27, X
    2b9c:	a0 2d       	mov	r26, r0
    2b9e:	b6 95       	lsr	r27
    2ba0:	a7 95       	ror	r26
    2ba2:	97 95       	ror	r25
    2ba4:	87 95       	ror	r24
    2ba6:	0e c0       	rjmp	.+28     	; 0x2bc4 <fat_append_clusters+0xd4>
#if FAT_FAT32_SUPPORT
    uint32_t fat_entry32;
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);

    if(is_fat32)
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    2ba8:	d3 01       	movw	r26, r6
    2baa:	52 96       	adiw	r26, 0x12	; 18
    2bac:	8d 91       	ld	r24, X+
    2bae:	9d 91       	ld	r25, X+
    2bb0:	0d 90       	ld	r0, X+
    2bb2:	bc 91       	ld	r27, X
    2bb4:	a0 2d       	mov	r26, r0
    2bb6:	42 e0       	ldi	r20, 0x02	; 2
    2bb8:	b6 95       	lsr	r27
    2bba:	a7 95       	ror	r26
    2bbc:	97 95       	ror	r25
    2bbe:	87 95       	ror	r24
    2bc0:	4a 95       	dec	r20
    2bc2:	d1 f7       	brne	.-12     	; 0x2bb8 <fat_append_clusters+0xc8>
    2bc4:	8a 87       	std	Y+10, r24	; 0x0a
    2bc6:	9b 87       	std	Y+11, r25	; 0x0b
    2bc8:	ac 87       	std	Y+12, r26	; 0x0c
    2bca:	bd 87       	std	Y+13, r27	; 0x0d
        return 0;

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    2bcc:	80 2f       	mov	r24, r16
    2bce:	91 2f       	mov	r25, r17
    2bd0:	a2 2f       	mov	r26, r18
    2bd2:	b3 2f       	mov	r27, r19
    2bd4:	8a 8b       	std	Y+18, r24	; 0x12
    2bd6:	9b 8b       	std	Y+19, r25	; 0x13
    2bd8:	ac 8b       	std	Y+20, r26	; 0x14
    2bda:	bd 8b       	std	Y+21, r27	; 0x15
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    2bdc:	a4 e0       	ldi	r26, 0x04	; 4
    2bde:	ea 2e       	mov	r14, r26
    2be0:	f1 2c       	mov	r15, r1
    2be2:	01 2d       	mov	r16, r1
    2be4:	11 2d       	mov	r17, r1
    2be6:	e8 8e       	std	Y+24, r14	; 0x18
    2be8:	f9 8e       	std	Y+25, r15	; 0x19
    2bea:	0a 8f       	std	Y+26, r16	; 0x1a
    2bec:	1b 8f       	std	Y+27, r17	; 0x1b
    2bee:	02 e0       	ldi	r16, 0x02	; 2
    2bf0:	10 e0       	ldi	r17, 0x00	; 0
    2bf2:	20 e0       	ldi	r18, 0x00	; 0
    2bf4:	30 e0       	ldi	r19, 0x00	; 0
    2bf6:	0e 87       	std	Y+14, r16	; 0x0e
    2bf8:	1f 87       	std	Y+15, r17	; 0x0f
    2bfa:	28 8b       	std	Y+16, r18	; 0x10
    2bfc:	39 8b       	std	Y+17, r19	; 0x11

    device_read_t device_read = fs->partition->device_read;
    device_write_t device_write = fs->partition->device_write;
    offset_t fat_offset = fs->header.fat_offset;
    cluster_t count_left = count;
    cluster_t cluster_next = 0;
    2bfe:	88 24       	eor	r8, r8
    2c00:	99 24       	eor	r9, r9
    2c02:	54 01       	movw	r10, r8
    2c04:	7a a2       	std	Y+34, r7	; 0x22
    2c06:	69 a2       	std	Y+33, r6	; 0x21
    2c08:	6c 2c       	mov	r6, r12
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    2c0a:	6b c1       	rjmp	.+726    	; 0x2ee2 <fat_append_clusters+0x3f2>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    2c0c:	1b a1       	ldd	r17, Y+35	; 0x23
    2c0e:	11 23       	and	r17, r17
    2c10:	09 f4       	brne	.+2      	; 0x2c14 <fat_append_clusters+0x124>
    2c12:	74 c0       	rjmp	.+232    	; 0x2cfc <fat_append_clusters+0x20c>
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    2c14:	28 8d       	ldd	r18, Y+24	; 0x18
    2c16:	39 8d       	ldd	r19, Y+25	; 0x19
    2c18:	4a 8d       	ldd	r20, Y+26	; 0x1a
    2c1a:	5b 8d       	ldd	r21, Y+27	; 0x1b
    2c1c:	22 0f       	add	r18, r18
    2c1e:	33 1f       	adc	r19, r19
    2c20:	44 1f       	adc	r20, r20
    2c22:	55 1f       	adc	r21, r21
    2c24:	60 e0       	ldi	r22, 0x00	; 0
    2c26:	70 e0       	ldi	r23, 0x00	; 0
    2c28:	cb 01       	movw	r24, r22
    2c2a:	7c 8c       	ldd	r7, Y+28	; 0x1c
    2c2c:	72 0e       	add	r7, r18
    2c2e:	a1 e0       	ldi	r26, 0x01	; 1
    2c30:	72 16       	cp	r7, r18
    2c32:	08 f0       	brcs	.+2      	; 0x2c36 <fat_append_clusters+0x146>
    2c34:	a0 e0       	ldi	r26, 0x00	; 0
    2c36:	fd 8d       	ldd	r31, Y+29	; 0x1d
    2c38:	f3 0f       	add	r31, r19
    2c3a:	e1 e0       	ldi	r30, 0x01	; 1
    2c3c:	f3 17       	cp	r31, r19
    2c3e:	08 f0       	brcs	.+2      	; 0x2c42 <fat_append_clusters+0x152>
    2c40:	e0 e0       	ldi	r30, 0x00	; 0
    2c42:	3a 2e       	mov	r3, r26
    2c44:	3f 0e       	add	r3, r31
    2c46:	a1 e0       	ldi	r26, 0x01	; 1
    2c48:	3f 16       	cp	r3, r31
    2c4a:	08 f0       	brcs	.+2      	; 0x2c4e <fat_append_clusters+0x15e>
    2c4c:	a0 e0       	ldi	r26, 0x00	; 0
    2c4e:	ea 2b       	or	r30, r26
    2c50:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2c52:	a4 0f       	add	r26, r20
    2c54:	f1 e0       	ldi	r31, 0x01	; 1
    2c56:	a4 17       	cp	r26, r20
    2c58:	08 f0       	brcs	.+2      	; 0x2c5c <fat_append_clusters+0x16c>
    2c5a:	f0 e0       	ldi	r31, 0x00	; 0
    2c5c:	2e 2e       	mov	r2, r30
    2c5e:	2a 0e       	add	r2, r26
    2c60:	e1 e0       	ldi	r30, 0x01	; 1
    2c62:	2a 16       	cp	r2, r26
    2c64:	08 f0       	brcs	.+2      	; 0x2c68 <fat_append_clusters+0x178>
    2c66:	e0 e0       	ldi	r30, 0x00	; 0
    2c68:	fe 2b       	or	r31, r30
    2c6a:	af 8d       	ldd	r26, Y+31	; 0x1f
    2c6c:	a5 0f       	add	r26, r21
    2c6e:	e1 e0       	ldi	r30, 0x01	; 1
    2c70:	a5 17       	cp	r26, r21
    2c72:	08 f0       	brcs	.+2      	; 0x2c76 <fat_append_clusters+0x186>
    2c74:	e0 e0       	ldi	r30, 0x00	; 0
    2c76:	fa 0f       	add	r31, r26
    2c78:	ff 83       	std	Y+7, r31	; 0x07
    2c7a:	f1 e0       	ldi	r31, 0x01	; 1
    2c7c:	bf 81       	ldd	r27, Y+7	; 0x07
    2c7e:	ba 17       	cp	r27, r26
    2c80:	08 f0       	brcs	.+2      	; 0x2c84 <fat_append_clusters+0x194>
    2c82:	f0 e0       	ldi	r31, 0x00	; 0
    2c84:	ef 2b       	or	r30, r31
    2c86:	f1 e0       	ldi	r31, 0x01	; 1
    2c88:	66 16       	cp	r6, r22
    2c8a:	08 f0       	brcs	.+2      	; 0x2c8e <fat_append_clusters+0x19e>
    2c8c:	f0 e0       	ldi	r31, 0x00	; 0
    2c8e:	e6 0d       	add	r30, r6
    2c90:	e8 87       	std	Y+8, r30	; 0x08
    2c92:	e1 e0       	ldi	r30, 0x01	; 1
    2c94:	e8 84       	ldd	r14, Y+8	; 0x08
    2c96:	e6 14       	cp	r14, r6
    2c98:	08 f0       	brcs	.+2      	; 0x2c9c <fat_append_clusters+0x1ac>
    2c9a:	e0 e0       	ldi	r30, 0x00	; 0
    2c9c:	fe 2b       	or	r31, r30
    2c9e:	e1 e0       	ldi	r30, 0x01	; 1
    2ca0:	57 16       	cp	r5, r23
    2ca2:	08 f0       	brcs	.+2      	; 0x2ca6 <fat_append_clusters+0x1b6>
    2ca4:	e0 e0       	ldi	r30, 0x00	; 0
    2ca6:	f5 0d       	add	r31, r5
    2ca8:	f9 87       	std	Y+9, r31	; 0x09
    2caa:	f1 e0       	ldi	r31, 0x01	; 1
    2cac:	f9 84       	ldd	r15, Y+9	; 0x09
    2cae:	f5 14       	cp	r15, r5
    2cb0:	08 f0       	brcs	.+2      	; 0x2cb4 <fat_append_clusters+0x1c4>
    2cb2:	f0 e0       	ldi	r31, 0x00	; 0
    2cb4:	ef 2b       	or	r30, r31
    2cb6:	f1 e0       	ldi	r31, 0x01	; 1
    2cb8:	48 16       	cp	r4, r24
    2cba:	08 f0       	brcs	.+2      	; 0x2cbe <fat_append_clusters+0x1ce>
    2cbc:	f0 e0       	ldi	r31, 0x00	; 0
    2cbe:	ce 2e       	mov	r12, r30
    2cc0:	c4 0c       	add	r12, r4
    2cc2:	81 e0       	ldi	r24, 0x01	; 1
    2cc4:	c4 14       	cp	r12, r4
    2cc6:	08 f0       	brcs	.+2      	; 0x2cca <fat_append_clusters+0x1da>
    2cc8:	80 e0       	ldi	r24, 0x00	; 0
    2cca:	df 2e       	mov	r13, r31
    2ccc:	d8 2a       	or	r13, r24
    2cce:	08 a1       	ldd	r16, Y+32	; 0x20
    2cd0:	d0 0e       	add	r13, r16
    2cd2:	27 2d       	mov	r18, r7
    2cd4:	33 2d       	mov	r19, r3
    2cd6:	42 2d       	mov	r20, r2
    2cd8:	5f 81       	ldd	r21, Y+7	; 0x07
    2cda:	68 85       	ldd	r22, Y+8	; 0x08
    2cdc:	79 85       	ldd	r23, Y+9	; 0x09
    2cde:	c6 01       	movw	r24, r12
    2ce0:	8e 01       	movw	r16, r28
    2ce2:	0d 5f       	subi	r16, 0xFD	; 253
    2ce4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ce6:	e4 e0       	ldi	r30, 0x04	; 4
    2ce8:	ee 2e       	mov	r14, r30
    2cea:	f1 2c       	mov	r15, r1
    2cec:	a8 a5       	ldd	r26, Y+40	; 0x28
    2cee:	b9 a5       	ldd	r27, Y+41	; 0x29
    2cf0:	fd 01       	movw	r30, r26
    2cf2:	09 95       	icall
    2cf4:	88 23       	and	r24, r24
    2cf6:	09 f0       	breq	.+2      	; 0x2cfa <fat_append_clusters+0x20a>
    2cf8:	7b c0       	rjmp	.+246    	; 0x2df0 <fat_append_clusters+0x300>
    2cfa:	fd c1       	rjmp	.+1018   	; 0x30f6 <fat_append_clusters+0x606>
                return 0;
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    2cfc:	e8 8c       	ldd	r14, Y+24	; 0x18
    2cfe:	f9 8c       	ldd	r15, Y+25	; 0x19
    2d00:	0a 8d       	ldd	r16, Y+26	; 0x1a
    2d02:	1b 8d       	ldd	r17, Y+27	; 0x1b
    2d04:	a8 01       	movw	r20, r16
    2d06:	97 01       	movw	r18, r14
    2d08:	60 e0       	ldi	r22, 0x00	; 0
    2d0a:	70 e0       	ldi	r23, 0x00	; 0
    2d0c:	cb 01       	movw	r24, r22
    2d0e:	cc 8c       	ldd	r12, Y+28	; 0x1c
    2d10:	ce 0c       	add	r12, r14
    2d12:	a1 e0       	ldi	r26, 0x01	; 1
    2d14:	ce 14       	cp	r12, r14
    2d16:	08 f0       	brcs	.+2      	; 0x2d1a <fat_append_clusters+0x22a>
    2d18:	a0 e0       	ldi	r26, 0x00	; 0
    2d1a:	ed 8d       	ldd	r30, Y+29	; 0x1d
    2d1c:	e3 0f       	add	r30, r19
    2d1e:	f1 e0       	ldi	r31, 0x01	; 1
    2d20:	e3 17       	cp	r30, r19
    2d22:	08 f0       	brcs	.+2      	; 0x2d26 <fat_append_clusters+0x236>
    2d24:	f0 e0       	ldi	r31, 0x00	; 0
    2d26:	ae 0f       	add	r26, r30
    2d28:	af 83       	std	Y+7, r26	; 0x07
    2d2a:	a1 e0       	ldi	r26, 0x01	; 1
    2d2c:	ff 80       	ldd	r15, Y+7	; 0x07
    2d2e:	fe 16       	cp	r15, r30
    2d30:	08 f0       	brcs	.+2      	; 0x2d34 <fat_append_clusters+0x244>
    2d32:	a0 e0       	ldi	r26, 0x00	; 0
    2d34:	fa 2b       	or	r31, r26
    2d36:	ae 8d       	ldd	r26, Y+30	; 0x1e
    2d38:	a4 0f       	add	r26, r20
    2d3a:	e1 e0       	ldi	r30, 0x01	; 1
    2d3c:	a4 17       	cp	r26, r20
    2d3e:	08 f0       	brcs	.+2      	; 0x2d42 <fat_append_clusters+0x252>
    2d40:	e0 e0       	ldi	r30, 0x00	; 0
    2d42:	fa 0f       	add	r31, r26
    2d44:	f8 87       	std	Y+8, r31	; 0x08
    2d46:	f1 e0       	ldi	r31, 0x01	; 1
    2d48:	08 85       	ldd	r16, Y+8	; 0x08
    2d4a:	0a 17       	cp	r16, r26
    2d4c:	08 f0       	brcs	.+2      	; 0x2d50 <fat_append_clusters+0x260>
    2d4e:	f0 e0       	ldi	r31, 0x00	; 0
    2d50:	ef 2b       	or	r30, r31
    2d52:	ff 8d       	ldd	r31, Y+31	; 0x1f
    2d54:	f5 0f       	add	r31, r21
    2d56:	a1 e0       	ldi	r26, 0x01	; 1
    2d58:	f5 17       	cp	r31, r21
    2d5a:	08 f0       	brcs	.+2      	; 0x2d5e <fat_append_clusters+0x26e>
    2d5c:	a0 e0       	ldi	r26, 0x00	; 0
    2d5e:	ef 0f       	add	r30, r31
    2d60:	e9 87       	std	Y+9, r30	; 0x09
    2d62:	e1 e0       	ldi	r30, 0x01	; 1
    2d64:	19 85       	ldd	r17, Y+9	; 0x09
    2d66:	1f 17       	cp	r17, r31
    2d68:	08 f0       	brcs	.+2      	; 0x2d6c <fat_append_clusters+0x27c>
    2d6a:	e0 e0       	ldi	r30, 0x00	; 0
    2d6c:	ae 2b       	or	r26, r30
    2d6e:	e6 2f       	mov	r30, r22
    2d70:	e6 0d       	add	r30, r6
    2d72:	f1 e0       	ldi	r31, 0x01	; 1
    2d74:	e6 17       	cp	r30, r22
    2d76:	08 f0       	brcs	.+2      	; 0x2d7a <fat_append_clusters+0x28a>
    2d78:	f0 e0       	ldi	r31, 0x00	; 0
    2d7a:	7a 2e       	mov	r7, r26
    2d7c:	7e 0e       	add	r7, r30
    2d7e:	a1 e0       	ldi	r26, 0x01	; 1
    2d80:	7e 16       	cp	r7, r30
    2d82:	08 f0       	brcs	.+2      	; 0x2d86 <fat_append_clusters+0x296>
    2d84:	a0 e0       	ldi	r26, 0x00	; 0
    2d86:	fa 2b       	or	r31, r26
    2d88:	a7 2f       	mov	r26, r23
    2d8a:	a5 0d       	add	r26, r5
    2d8c:	e1 e0       	ldi	r30, 0x01	; 1
    2d8e:	a7 17       	cp	r26, r23
    2d90:	08 f0       	brcs	.+2      	; 0x2d94 <fat_append_clusters+0x2a4>
    2d92:	e0 e0       	ldi	r30, 0x00	; 0
    2d94:	2f 2e       	mov	r2, r31
    2d96:	2a 0e       	add	r2, r26
    2d98:	f1 e0       	ldi	r31, 0x01	; 1
    2d9a:	2a 16       	cp	r2, r26
    2d9c:	08 f0       	brcs	.+2      	; 0x2da0 <fat_append_clusters+0x2b0>
    2d9e:	f0 e0       	ldi	r31, 0x00	; 0
    2da0:	ef 2b       	or	r30, r31
    2da2:	f8 2f       	mov	r31, r24
    2da4:	f4 0d       	add	r31, r4
    2da6:	a1 e0       	ldi	r26, 0x01	; 1
    2da8:	f8 17       	cp	r31, r24
    2daa:	08 f0       	brcs	.+2      	; 0x2dae <fat_append_clusters+0x2be>
    2dac:	a0 e0       	ldi	r26, 0x00	; 0
    2dae:	3e 2e       	mov	r3, r30
    2db0:	3f 0e       	add	r3, r31
    2db2:	e1 e0       	ldi	r30, 0x01	; 1
    2db4:	3f 16       	cp	r3, r31
    2db6:	08 f0       	brcs	.+2      	; 0x2dba <fat_append_clusters+0x2ca>
    2db8:	e0 e0       	ldi	r30, 0x00	; 0
    2dba:	da 2e       	mov	r13, r26
    2dbc:	de 2a       	or	r13, r30
    2dbe:	88 a1       	ldd	r24, Y+32	; 0x20
    2dc0:	89 0f       	add	r24, r25
    2dc2:	d8 0e       	add	r13, r24
    2dc4:	2c 2d       	mov	r18, r12
    2dc6:	3f 81       	ldd	r19, Y+7	; 0x07
    2dc8:	48 85       	ldd	r20, Y+8	; 0x08
    2dca:	59 85       	ldd	r21, Y+9	; 0x09
    2dcc:	67 2d       	mov	r22, r7
    2dce:	72 2d       	mov	r23, r2
    2dd0:	83 2d       	mov	r24, r3
    2dd2:	9d 2d       	mov	r25, r13
    2dd4:	8e 01       	movw	r16, r28
    2dd6:	0f 5f       	subi	r16, 0xFF	; 255
    2dd8:	1f 4f       	sbci	r17, 0xFF	; 255
    2dda:	b2 e0       	ldi	r27, 0x02	; 2
    2ddc:	eb 2e       	mov	r14, r27
    2dde:	f1 2c       	mov	r15, r1
    2de0:	a8 a5       	ldd	r26, Y+40	; 0x28
    2de2:	b9 a5       	ldd	r27, Y+41	; 0x29
    2de4:	fd 01       	movw	r30, r26
    2de6:	09 95       	icall
    2de8:	88 23       	and	r24, r24
    2dea:	09 f0       	breq	.+2      	; 0x2dee <fat_append_clusters+0x2fe>
    2dec:	a2 c1       	rjmp	.+836    	; 0x3132 <fat_append_clusters+0x642>
    2dee:	83 c1       	rjmp	.+774    	; 0x30f6 <fat_append_clusters+0x606>

#if FAT_FAT32_SUPPORT
        if(is_fat32)
        {
            /* check if this is a free cluster */
            if(fat_entry32 != HTOL32(FAT32_CLUSTER_FREE))
    2df0:	8b 81       	ldd	r24, Y+3	; 0x03
    2df2:	9c 81       	ldd	r25, Y+4	; 0x04
    2df4:	ad 81       	ldd	r26, Y+5	; 0x05
    2df6:	be 81       	ldd	r27, Y+6	; 0x06
    2df8:	00 97       	sbiw	r24, 0x00	; 0
    2dfa:	a1 05       	cpc	r26, r1
    2dfc:	b1 05       	cpc	r27, r1
    2dfe:	09 f0       	breq	.+2      	; 0x2e02 <fat_append_clusters+0x312>
    2e00:	59 c0       	rjmp	.+178    	; 0x2eb4 <fat_append_clusters+0x3c4>
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    2e02:	81 14       	cp	r8, r1
    2e04:	91 04       	cpc	r9, r1
    2e06:	a1 04       	cpc	r10, r1
    2e08:	b1 04       	cpc	r11, r1
    2e0a:	69 f4       	brne	.+26     	; 0x2e26 <fat_append_clusters+0x336>
                fat_entry32 = HTOL32(FAT32_CLUSTER_LAST_MAX);
    2e0c:	af ef       	ldi	r26, 0xFF	; 255
    2e0e:	ea 2e       	mov	r14, r26
    2e10:	af ef       	ldi	r26, 0xFF	; 255
    2e12:	fa 2e       	mov	r15, r26
    2e14:	af ef       	ldi	r26, 0xFF	; 255
    2e16:	0a 2f       	mov	r16, r26
    2e18:	af e0       	ldi	r26, 0x0F	; 15
    2e1a:	1a 2f       	mov	r17, r26
    2e1c:	eb 82       	std	Y+3, r14	; 0x03
    2e1e:	fc 82       	std	Y+4, r15	; 0x04
    2e20:	0d 83       	std	Y+5, r16	; 0x05
    2e22:	1e 83       	std	Y+6, r17	; 0x06
    2e24:	04 c0       	rjmp	.+8      	; 0x2e2e <fat_append_clusters+0x33e>
            else
                fat_entry32 = htol32(cluster_next);
    2e26:	8b 82       	std	Y+3, r8	; 0x03
    2e28:	9c 82       	std	Y+4, r9	; 0x04
    2e2a:	ad 82       	std	Y+5, r10	; 0x05
    2e2c:	be 82       	std	Y+6, r11	; 0x06

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    2e2e:	27 2d       	mov	r18, r7
    2e30:	33 2d       	mov	r19, r3
    2e32:	42 2d       	mov	r20, r2
    2e34:	5f 81       	ldd	r21, Y+7	; 0x07
    2e36:	68 85       	ldd	r22, Y+8	; 0x08
    2e38:	79 85       	ldd	r23, Y+9	; 0x09
    2e3a:	c6 01       	movw	r24, r12
    2e3c:	8e 01       	movw	r16, r28
    2e3e:	0d 5f       	subi	r16, 0xFD	; 253
    2e40:	1f 4f       	sbci	r17, 0xFF	; 255
    2e42:	f4 e0       	ldi	r31, 0x04	; 4
    2e44:	ef 2e       	mov	r14, r31
    2e46:	f1 2c       	mov	r15, r1
    2e48:	1a c0       	rjmp	.+52     	; 0x2e7e <fat_append_clusters+0x38e>
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
                continue;

            /* allocate cluster */
            if(cluster_next == 0)
    2e4a:	81 14       	cp	r8, r1
    2e4c:	91 04       	cpc	r9, r1
    2e4e:	a1 04       	cpc	r10, r1
    2e50:	b1 04       	cpc	r11, r1
    2e52:	29 f4       	brne	.+10     	; 0x2e5e <fat_append_clusters+0x36e>
                fat_entry16 = HTOL16(FAT16_CLUSTER_LAST_MAX);
    2e54:	ef ef       	ldi	r30, 0xFF	; 255
    2e56:	ff ef       	ldi	r31, 0xFF	; 255
    2e58:	fa 83       	std	Y+2, r31	; 0x02
    2e5a:	e9 83       	std	Y+1, r30	; 0x01
    2e5c:	02 c0       	rjmp	.+4      	; 0x2e62 <fat_append_clusters+0x372>
            else
                fat_entry16 = htol16((uint16_t) cluster_next);
    2e5e:	9a 82       	std	Y+2, r9	; 0x02
    2e60:	89 82       	std	Y+1, r8	; 0x01

            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    2e62:	2c 2d       	mov	r18, r12
    2e64:	3f 81       	ldd	r19, Y+7	; 0x07
    2e66:	48 85       	ldd	r20, Y+8	; 0x08
    2e68:	59 85       	ldd	r21, Y+9	; 0x09
    2e6a:	67 2d       	mov	r22, r7
    2e6c:	72 2d       	mov	r23, r2
    2e6e:	83 2d       	mov	r24, r3
    2e70:	9d 2d       	mov	r25, r13
    2e72:	8e 01       	movw	r16, r28
    2e74:	0f 5f       	subi	r16, 0xFF	; 255
    2e76:	1f 4f       	sbci	r17, 0xFF	; 255
    2e78:	e2 e0       	ldi	r30, 0x02	; 2
    2e7a:	ee 2e       	mov	r14, r30
    2e7c:	f1 2c       	mov	r15, r1
    2e7e:	ae 89       	ldd	r26, Y+22	; 0x16
    2e80:	bf 89       	ldd	r27, Y+23	; 0x17
    2e82:	fd 01       	movw	r30, r26
    2e84:	09 95       	icall
    2e86:	88 23       	and	r24, r24
    2e88:	d1 f1       	breq	.+116    	; 0x2efe <fat_append_clusters+0x40e>
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    2e8a:	0a 89       	ldd	r16, Y+18	; 0x12
    2e8c:	1b 89       	ldd	r17, Y+19	; 0x13
    2e8e:	2c 89       	ldd	r18, Y+20	; 0x14
    2e90:	3d 89       	ldd	r19, Y+21	; 0x15
    2e92:	01 50       	subi	r16, 0x01	; 1
    2e94:	10 40       	sbci	r17, 0x00	; 0
    2e96:	20 40       	sbci	r18, 0x00	; 0
    2e98:	30 40       	sbci	r19, 0x00	; 0
    2e9a:	0a 8b       	std	Y+18, r16	; 0x12
    2e9c:	1b 8b       	std	Y+19, r17	; 0x13
    2e9e:	2c 8b       	std	Y+20, r18	; 0x14
    2ea0:	3d 8b       	std	Y+21, r19	; 0x15
    2ea2:	01 15       	cp	r16, r1
    2ea4:	11 05       	cpc	r17, r1
    2ea6:	21 05       	cpc	r18, r1
    2ea8:	31 05       	cpc	r19, r1
    2eaa:	a9 f1       	breq	.+106    	; 0x2f16 <fat_append_clusters+0x426>
    2eac:	8e 84       	ldd	r8, Y+14	; 0x0e
    2eae:	9f 84       	ldd	r9, Y+15	; 0x0f
    2eb0:	a8 88       	ldd	r10, Y+16	; 0x10
    2eb2:	b9 88       	ldd	r11, Y+17	; 0x11
        cluster_max = fs->header.fat_size / sizeof(fat_entry32);
    else
#endif
        cluster_max = fs->header.fat_size / sizeof(fat_entry16);

    for(cluster_t cluster_new = 2; cluster_new < cluster_max; ++cluster_new)
    2eb4:	2e 85       	ldd	r18, Y+14	; 0x0e
    2eb6:	3f 85       	ldd	r19, Y+15	; 0x0f
    2eb8:	48 89       	ldd	r20, Y+16	; 0x10
    2eba:	59 89       	ldd	r21, Y+17	; 0x11
    2ebc:	2f 5f       	subi	r18, 0xFF	; 255
    2ebe:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec0:	4f 4f       	sbci	r20, 0xFF	; 255
    2ec2:	5f 4f       	sbci	r21, 0xFF	; 255
    2ec4:	2e 87       	std	Y+14, r18	; 0x0e
    2ec6:	3f 87       	std	Y+15, r19	; 0x0f
    2ec8:	48 8b       	std	Y+16, r20	; 0x10
    2eca:	59 8b       	std	Y+17, r21	; 0x11
    2ecc:	88 8d       	ldd	r24, Y+24	; 0x18
    2ece:	99 8d       	ldd	r25, Y+25	; 0x19
    2ed0:	aa 8d       	ldd	r26, Y+26	; 0x1a
    2ed2:	bb 8d       	ldd	r27, Y+27	; 0x1b
    2ed4:	02 96       	adiw	r24, 0x02	; 2
    2ed6:	a1 1d       	adc	r26, r1
    2ed8:	b1 1d       	adc	r27, r1
    2eda:	88 8f       	std	Y+24, r24	; 0x18
    2edc:	99 8f       	std	Y+25, r25	; 0x19
    2ede:	aa 8f       	std	Y+26, r26	; 0x1a
    2ee0:	bb 8f       	std	Y+27, r27	; 0x1b
    2ee2:	ee 84       	ldd	r14, Y+14	; 0x0e
    2ee4:	ff 84       	ldd	r15, Y+15	; 0x0f
    2ee6:	08 89       	ldd	r16, Y+16	; 0x10
    2ee8:	19 89       	ldd	r17, Y+17	; 0x11
    2eea:	2a 85       	ldd	r18, Y+10	; 0x0a
    2eec:	3b 85       	ldd	r19, Y+11	; 0x0b
    2eee:	4c 85       	ldd	r20, Y+12	; 0x0c
    2ef0:	5d 85       	ldd	r21, Y+13	; 0x0d
    2ef2:	e2 16       	cp	r14, r18
    2ef4:	f3 06       	cpc	r15, r19
    2ef6:	04 07       	cpc	r16, r20
    2ef8:	15 07       	cpc	r17, r21
    2efa:	08 f4       	brcc	.+2      	; 0x2efe <fat_append_clusters+0x40e>
    2efc:	87 ce       	rjmp	.-754    	; 0x2c0c <fat_append_clusters+0x11c>
    2efe:	c6 2c       	mov	r12, r6
    2f00:	69 a0       	ldd	r6, Y+33	; 0x21
    2f02:	7a a0       	ldd	r7, Y+34	; 0x22
            break;
    }

    do
    {
        if(count_left > 0)
    2f04:	8a 89       	ldd	r24, Y+18	; 0x12
    2f06:	9b 89       	ldd	r25, Y+19	; 0x13
    2f08:	ac 89       	ldd	r26, Y+20	; 0x14
    2f0a:	bd 89       	ldd	r27, Y+21	; 0x15
    2f0c:	00 97       	sbiw	r24, 0x00	; 0
    2f0e:	a1 05       	cpc	r26, r1
    2f10:	b1 05       	cpc	r27, r1
    2f12:	41 f0       	breq	.+16     	; 0x2f24 <fat_append_clusters+0x434>
    2f14:	ec c0       	rjmp	.+472    	; 0x30ee <fat_append_clusters+0x5fe>
    2f16:	c6 2c       	mov	r12, r6
    2f18:	69 a0       	ldd	r6, Y+33	; 0x21
    2f1a:	7a a0       	ldd	r7, Y+34	; 0x22
            if(!device_write(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                break;
        }

        cluster_next = cluster_new;
        if(--count_left == 0)
    2f1c:	8e 84       	ldd	r8, Y+14	; 0x0e
    2f1e:	9f 84       	ldd	r9, Y+15	; 0x0f
    2f20:	a8 88       	ldd	r10, Y+16	; 0x10
    2f22:	b9 88       	ldd	r11, Y+17	; 0x11
            break;

        /* We allocated a new cluster chain. Now join
         * it with the existing one (if any).
         */
        if(cluster_num >= 2)
    2f24:	0c a1       	ldd	r16, Y+36	; 0x24
    2f26:	1d a1       	ldd	r17, Y+37	; 0x25
    2f28:	2e a1       	ldd	r18, Y+38	; 0x26
    2f2a:	3f a1       	ldd	r19, Y+39	; 0x27
    2f2c:	02 30       	cpi	r16, 0x02	; 2
    2f2e:	11 05       	cpc	r17, r1
    2f30:	21 05       	cpc	r18, r1
    2f32:	31 05       	cpc	r19, r1
    2f34:	08 f4       	brcc	.+2      	; 0x2f38 <fat_append_clusters+0x448>
    2f36:	e2 c0       	rjmp	.+452    	; 0x30fc <fat_append_clusters+0x60c>
        {
#if FAT_FAT32_SUPPORT
            if(is_fat32)
    2f38:	1b a1       	ldd	r17, Y+35	; 0x23
    2f3a:	11 23       	and	r17, r17
    2f3c:	09 f4       	brne	.+2      	; 0x2f40 <fat_append_clusters+0x450>
    2f3e:	6d c0       	rjmp	.+218    	; 0x301a <fat_append_clusters+0x52a>
            {
                fat_entry32 = htol32(cluster_next);
    2f40:	8b 82       	std	Y+3, r8	; 0x03
    2f42:	9c 82       	std	Y+4, r9	; 0x04
    2f44:	ad 82       	std	Y+5, r10	; 0x05
    2f46:	be 82       	std	Y+6, r11	; 0x06

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry32), (uint8_t*) &fat_entry32, sizeof(fat_entry32)))
    2f48:	0c a1       	ldd	r16, Y+36	; 0x24
    2f4a:	1d a1       	ldd	r17, Y+37	; 0x25
    2f4c:	2e a1       	ldd	r18, Y+38	; 0x26
    2f4e:	3f a1       	ldd	r19, Y+39	; 0x27
    2f50:	b2 e0       	ldi	r27, 0x02	; 2
    2f52:	00 0f       	add	r16, r16
    2f54:	11 1f       	adc	r17, r17
    2f56:	22 1f       	adc	r18, r18
    2f58:	33 1f       	adc	r19, r19
    2f5a:	ba 95       	dec	r27
    2f5c:	d1 f7       	brne	.-12     	; 0x2f52 <fat_append_clusters+0x462>
    2f5e:	40 e0       	ldi	r20, 0x00	; 0
    2f60:	50 e0       	ldi	r21, 0x00	; 0
    2f62:	ba 01       	movw	r22, r20
    2f64:	3c 8c       	ldd	r3, Y+28	; 0x1c
    2f66:	30 0e       	add	r3, r16
    2f68:	91 e0       	ldi	r25, 0x01	; 1
    2f6a:	30 16       	cp	r3, r16
    2f6c:	08 f0       	brcs	.+2      	; 0x2f70 <fat_append_clusters+0x480>
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2f72:	81 0f       	add	r24, r17
    2f74:	b1 e0       	ldi	r27, 0x01	; 1
    2f76:	81 17       	cp	r24, r17
    2f78:	08 f0       	brcs	.+2      	; 0x2f7c <fat_append_clusters+0x48c>
    2f7a:	b0 e0       	ldi	r27, 0x00	; 0
    2f7c:	d9 2e       	mov	r13, r25
    2f7e:	d8 0e       	add	r13, r24
    2f80:	91 e0       	ldi	r25, 0x01	; 1
    2f82:	d8 16       	cp	r13, r24
    2f84:	08 f0       	brcs	.+2      	; 0x2f88 <fat_append_clusters+0x498>
    2f86:	90 e0       	ldi	r25, 0x00	; 0
    2f88:	b9 2b       	or	r27, r25
    2f8a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2f8c:	82 0f       	add	r24, r18
    2f8e:	a1 e0       	ldi	r26, 0x01	; 1
    2f90:	82 17       	cp	r24, r18
    2f92:	08 f0       	brcs	.+2      	; 0x2f96 <fat_append_clusters+0x4a6>
    2f94:	a0 e0       	ldi	r26, 0x00	; 0
    2f96:	b8 0f       	add	r27, r24
    2f98:	91 e0       	ldi	r25, 0x01	; 1
    2f9a:	b8 17       	cp	r27, r24
    2f9c:	08 f0       	brcs	.+2      	; 0x2fa0 <fat_append_clusters+0x4b0>
    2f9e:	90 e0       	ldi	r25, 0x00	; 0
    2fa0:	a9 2b       	or	r26, r25
    2fa2:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2fa4:	83 0f       	add	r24, r19
    2fa6:	f1 e0       	ldi	r31, 0x01	; 1
    2fa8:	83 17       	cp	r24, r19
    2faa:	08 f0       	brcs	.+2      	; 0x2fae <fat_append_clusters+0x4be>
    2fac:	f0 e0       	ldi	r31, 0x00	; 0
    2fae:	a8 0f       	add	r26, r24
    2fb0:	91 e0       	ldi	r25, 0x01	; 1
    2fb2:	a8 17       	cp	r26, r24
    2fb4:	08 f0       	brcs	.+2      	; 0x2fb8 <fat_append_clusters+0x4c8>
    2fb6:	90 e0       	ldi	r25, 0x00	; 0
    2fb8:	f9 2b       	or	r31, r25
    2fba:	e1 e0       	ldi	r30, 0x01	; 1
    2fbc:	c4 16       	cp	r12, r20
    2fbe:	08 f0       	brcs	.+2      	; 0x2fc2 <fat_append_clusters+0x4d2>
    2fc0:	e0 e0       	ldi	r30, 0x00	; 0
    2fc2:	fc 0d       	add	r31, r12
    2fc4:	81 e0       	ldi	r24, 0x01	; 1
    2fc6:	fc 15       	cp	r31, r12
    2fc8:	08 f0       	brcs	.+2      	; 0x2fcc <fat_append_clusters+0x4dc>
    2fca:	80 e0       	ldi	r24, 0x00	; 0
    2fcc:	e8 2b       	or	r30, r24
    2fce:	81 e0       	ldi	r24, 0x01	; 1
    2fd0:	55 16       	cp	r5, r21
    2fd2:	08 f0       	brcs	.+2      	; 0x2fd6 <fat_append_clusters+0x4e6>
    2fd4:	80 e0       	ldi	r24, 0x00	; 0
    2fd6:	e5 0d       	add	r30, r5
    2fd8:	91 e0       	ldi	r25, 0x01	; 1
    2fda:	e5 15       	cp	r30, r5
    2fdc:	08 f0       	brcs	.+2      	; 0x2fe0 <fat_append_clusters+0x4f0>
    2fde:	90 e0       	ldi	r25, 0x00	; 0
    2fe0:	89 2b       	or	r24, r25
    2fe2:	91 e0       	ldi	r25, 0x01	; 1
    2fe4:	46 16       	cp	r4, r22
    2fe6:	08 f0       	brcs	.+2      	; 0x2fea <fat_append_clusters+0x4fa>
    2fe8:	90 e0       	ldi	r25, 0x00	; 0
    2fea:	84 0d       	add	r24, r4
    2fec:	21 e0       	ldi	r18, 0x01	; 1
    2fee:	84 15       	cp	r24, r4
    2ff0:	08 f0       	brcs	.+2      	; 0x2ff4 <fat_append_clusters+0x504>
    2ff2:	20 e0       	ldi	r18, 0x00	; 0
    2ff4:	92 2b       	or	r25, r18
    2ff6:	23 2d       	mov	r18, r3
    2ff8:	3d 2d       	mov	r19, r13
    2ffa:	4b 2f       	mov	r20, r27
    2ffc:	5a 2f       	mov	r21, r26
    2ffe:	6f 2f       	mov	r22, r31
    3000:	7e 2f       	mov	r23, r30
    3002:	a8 a1       	ldd	r26, Y+32	; 0x20
    3004:	9a 0f       	add	r25, r26
    3006:	8e 01       	movw	r16, r28
    3008:	0d 5f       	subi	r16, 0xFD	; 253
    300a:	1f 4f       	sbci	r17, 0xFF	; 255
    300c:	a4 e0       	ldi	r26, 0x04	; 4
    300e:	ea 2e       	mov	r14, r26
    3010:	f1 2c       	mov	r15, r1
    3012:	ee 89       	ldd	r30, Y+22	; 0x16
    3014:	ff 89       	ldd	r31, Y+23	; 0x17
    3016:	09 95       	icall
    3018:	68 c0       	rjmp	.+208    	; 0x30ea <fat_append_clusters+0x5fa>
                    break;
            }
            else
#endif
            {
                fat_entry16 = htol16((uint16_t) cluster_next);
    301a:	9a 82       	std	Y+2, r9	; 0x02
    301c:	89 82       	std	Y+1, r8	; 0x01

                if(!device_write(fat_offset + cluster_num * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
    301e:	0c a1       	ldd	r16, Y+36	; 0x24
    3020:	1d a1       	ldd	r17, Y+37	; 0x25
    3022:	2e a1       	ldd	r18, Y+38	; 0x26
    3024:	3f a1       	ldd	r19, Y+39	; 0x27
    3026:	00 0f       	add	r16, r16
    3028:	11 1f       	adc	r17, r17
    302a:	22 1f       	adc	r18, r18
    302c:	33 1f       	adc	r19, r19
    302e:	40 e0       	ldi	r20, 0x00	; 0
    3030:	50 e0       	ldi	r21, 0x00	; 0
    3032:	ba 01       	movw	r22, r20
    3034:	3c 8c       	ldd	r3, Y+28	; 0x1c
    3036:	30 0e       	add	r3, r16
    3038:	91 e0       	ldi	r25, 0x01	; 1
    303a:	30 16       	cp	r3, r16
    303c:	08 f0       	brcs	.+2      	; 0x3040 <fat_append_clusters+0x550>
    303e:	90 e0       	ldi	r25, 0x00	; 0
    3040:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3042:	81 0f       	add	r24, r17
    3044:	b1 e0       	ldi	r27, 0x01	; 1
    3046:	81 17       	cp	r24, r17
    3048:	08 f0       	brcs	.+2      	; 0x304c <fat_append_clusters+0x55c>
    304a:	b0 e0       	ldi	r27, 0x00	; 0
    304c:	d9 2e       	mov	r13, r25
    304e:	d8 0e       	add	r13, r24
    3050:	91 e0       	ldi	r25, 0x01	; 1
    3052:	d8 16       	cp	r13, r24
    3054:	08 f0       	brcs	.+2      	; 0x3058 <fat_append_clusters+0x568>
    3056:	90 e0       	ldi	r25, 0x00	; 0
    3058:	b9 2b       	or	r27, r25
    305a:	8e 8d       	ldd	r24, Y+30	; 0x1e
    305c:	82 0f       	add	r24, r18
    305e:	a1 e0       	ldi	r26, 0x01	; 1
    3060:	82 17       	cp	r24, r18
    3062:	08 f0       	brcs	.+2      	; 0x3066 <fat_append_clusters+0x576>
    3064:	a0 e0       	ldi	r26, 0x00	; 0
    3066:	b8 0f       	add	r27, r24
    3068:	91 e0       	ldi	r25, 0x01	; 1
    306a:	b8 17       	cp	r27, r24
    306c:	08 f0       	brcs	.+2      	; 0x3070 <fat_append_clusters+0x580>
    306e:	90 e0       	ldi	r25, 0x00	; 0
    3070:	a9 2b       	or	r26, r25
    3072:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3074:	83 0f       	add	r24, r19
    3076:	f1 e0       	ldi	r31, 0x01	; 1
    3078:	83 17       	cp	r24, r19
    307a:	08 f0       	brcs	.+2      	; 0x307e <fat_append_clusters+0x58e>
    307c:	f0 e0       	ldi	r31, 0x00	; 0
    307e:	a8 0f       	add	r26, r24
    3080:	91 e0       	ldi	r25, 0x01	; 1
    3082:	a8 17       	cp	r26, r24
    3084:	08 f0       	brcs	.+2      	; 0x3088 <fat_append_clusters+0x598>
    3086:	90 e0       	ldi	r25, 0x00	; 0
    3088:	f9 2b       	or	r31, r25
    308a:	e1 e0       	ldi	r30, 0x01	; 1
    308c:	c4 16       	cp	r12, r20
    308e:	08 f0       	brcs	.+2      	; 0x3092 <fat_append_clusters+0x5a2>
    3090:	e0 e0       	ldi	r30, 0x00	; 0
    3092:	fc 0d       	add	r31, r12
    3094:	81 e0       	ldi	r24, 0x01	; 1
    3096:	fc 15       	cp	r31, r12
    3098:	08 f0       	brcs	.+2      	; 0x309c <fat_append_clusters+0x5ac>
    309a:	80 e0       	ldi	r24, 0x00	; 0
    309c:	e8 2b       	or	r30, r24
    309e:	81 e0       	ldi	r24, 0x01	; 1
    30a0:	55 16       	cp	r5, r21
    30a2:	08 f0       	brcs	.+2      	; 0x30a6 <fat_append_clusters+0x5b6>
    30a4:	80 e0       	ldi	r24, 0x00	; 0
    30a6:	e5 0d       	add	r30, r5
    30a8:	91 e0       	ldi	r25, 0x01	; 1
    30aa:	e5 15       	cp	r30, r5
    30ac:	08 f0       	brcs	.+2      	; 0x30b0 <fat_append_clusters+0x5c0>
    30ae:	90 e0       	ldi	r25, 0x00	; 0
    30b0:	89 2b       	or	r24, r25
    30b2:	91 e0       	ldi	r25, 0x01	; 1
    30b4:	46 16       	cp	r4, r22
    30b6:	08 f0       	brcs	.+2      	; 0x30ba <fat_append_clusters+0x5ca>
    30b8:	90 e0       	ldi	r25, 0x00	; 0
    30ba:	84 0d       	add	r24, r4
    30bc:	21 e0       	ldi	r18, 0x01	; 1
    30be:	84 15       	cp	r24, r4
    30c0:	08 f0       	brcs	.+2      	; 0x30c4 <fat_append_clusters+0x5d4>
    30c2:	20 e0       	ldi	r18, 0x00	; 0
    30c4:	92 2b       	or	r25, r18
    30c6:	23 2d       	mov	r18, r3
    30c8:	3d 2d       	mov	r19, r13
    30ca:	4b 2f       	mov	r20, r27
    30cc:	5a 2f       	mov	r21, r26
    30ce:	6f 2f       	mov	r22, r31
    30d0:	7e 2f       	mov	r23, r30
    30d2:	f8 a1       	ldd	r31, Y+32	; 0x20
    30d4:	9f 0f       	add	r25, r31
    30d6:	8e 01       	movw	r16, r28
    30d8:	0f 5f       	subi	r16, 0xFF	; 255
    30da:	1f 4f       	sbci	r17, 0xFF	; 255
    30dc:	e2 e0       	ldi	r30, 0x02	; 2
    30de:	ee 2e       	mov	r14, r30
    30e0:	f1 2c       	mov	r15, r1
    30e2:	ae 89       	ldd	r26, Y+22	; 0x16
    30e4:	bf 89       	ldd	r27, Y+23	; 0x17
    30e6:	fd 01       	movw	r30, r26
    30e8:	09 95       	icall
    30ea:	88 23       	and	r24, r24
    30ec:	39 f4       	brne	.+14     	; 0x30fc <fat_append_clusters+0x60c>
    } while(0);

    /* No space left on device or writing error.
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);
    30ee:	c3 01       	movw	r24, r6
    30f0:	b5 01       	movw	r22, r10
    30f2:	a4 01       	movw	r20, r8
    30f4:	30 db       	rcall	.-2464   	; 0x2756 <fat_free_clusters>
        }
        else
#endif
        {
            if(!device_read(fat_offset + cluster_new * sizeof(fat_entry16), (uint8_t*) &fat_entry16, sizeof(fat_entry16)))
                return 0;
    30f6:	88 24       	eor	r8, r8
    30f8:	99 24       	eor	r9, r9
    30fa:	54 01       	movw	r10, r8
     * Free up all clusters already allocated.
     */
    fat_free_clusters(fs, cluster_next);

    return 0;
}
    30fc:	b4 01       	movw	r22, r8
    30fe:	c5 01       	movw	r24, r10
    3100:	a9 96       	adiw	r28, 0x29	; 41
    3102:	0f b6       	in	r0, 0x3f	; 63
    3104:	f8 94       	cli
    3106:	de bf       	out	0x3e, r29	; 62
    3108:	0f be       	out	0x3f, r0	; 63
    310a:	cd bf       	out	0x3d, r28	; 61
    310c:	cf 91       	pop	r28
    310e:	df 91       	pop	r29
    3110:	1f 91       	pop	r17
    3112:	0f 91       	pop	r16
    3114:	ff 90       	pop	r15
    3116:	ef 90       	pop	r14
    3118:	df 90       	pop	r13
    311a:	cf 90       	pop	r12
    311c:	bf 90       	pop	r11
    311e:	af 90       	pop	r10
    3120:	9f 90       	pop	r9
    3122:	8f 90       	pop	r8
    3124:	7f 90       	pop	r7
    3126:	6f 90       	pop	r6
    3128:	5f 90       	pop	r5
    312a:	4f 90       	pop	r4
    312c:	3f 90       	pop	r3
    312e:	2f 90       	pop	r2
    3130:	08 95       	ret
        }
        else
#endif
        {
            /* check if this is a free cluster */
            if(fat_entry16 != HTOL16(FAT16_CLUSTER_FREE))
    3132:	89 81       	ldd	r24, Y+1	; 0x01
    3134:	9a 81       	ldd	r25, Y+2	; 0x02
    3136:	00 97       	sbiw	r24, 0x00	; 0
    3138:	09 f0       	breq	.+2      	; 0x313c <fat_append_clusters+0x64c>
    313a:	bc ce       	rjmp	.-648    	; 0x2eb4 <fat_append_clusters+0x3c4>
    313c:	86 ce       	rjmp	.-756    	; 0x2e4a <fat_append_clusters+0x35a>

0000313e <fat_clear_cluster_callback>:
 * Callback function for clearing a cluster.
 */
uintptr_t fat_clear_cluster_callback(uint8_t* buffer, offset_t offset, void* p)
{
    return 16;
}
    313e:	80 e1       	ldi	r24, 0x10	; 16
    3140:	90 e0       	ldi	r25, 0x00	; 0
    3142:	08 95       	ret

00003144 <fat_cluster_offset>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster whose offset to calculate.
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    3144:	2f 92       	push	r2
    3146:	3f 92       	push	r3
    3148:	4f 92       	push	r4
    314a:	5f 92       	push	r5
    314c:	6f 92       	push	r6
    314e:	7f 92       	push	r7
    3150:	8f 92       	push	r8
    3152:	9f 92       	push	r9
    3154:	af 92       	push	r10
    3156:	bf 92       	push	r11
    3158:	cf 92       	push	r12
    315a:	df 92       	push	r13
    315c:	ef 92       	push	r14
    315e:	ff 92       	push	r15
    3160:	0f 93       	push	r16
    3162:	1f 93       	push	r17
    3164:	cf 93       	push	r28
    3166:	df 93       	push	r29
    3168:	ec 01       	movw	r28, r24
    if(!fs || cluster_num < 2)
    316a:	00 97       	sbiw	r24, 0x00	; 0
    316c:	09 f4       	brne	.+2      	; 0x3170 <fat_cluster_offset+0x2c>
    316e:	76 c0       	rjmp	.+236    	; 0x325c <fat_cluster_offset+0x118>
    3170:	42 30       	cpi	r20, 0x02	; 2
    3172:	51 05       	cpc	r21, r1
    3174:	61 05       	cpc	r22, r1
    3176:	71 05       	cpc	r23, r1
    3178:	08 f4       	brcc	.+2      	; 0x317c <fat_cluster_offset+0x38>
    317a:	70 c0       	rjmp	.+224    	; 0x325c <fat_cluster_offset+0x118>
        return 0;

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
    317c:	42 50       	subi	r20, 0x02	; 2
    317e:	50 40       	sbci	r21, 0x00	; 0
    3180:	60 40       	sbci	r22, 0x00	; 0
    3182:	70 40       	sbci	r23, 0x00	; 0
    3184:	5a 01       	movw	r10, r20
    3186:	6b 01       	movw	r12, r22
    3188:	28 8c       	ldd	r2, Y+24	; 0x18
    318a:	39 8c       	ldd	r3, Y+25	; 0x19
    318c:	9a 01       	movw	r18, r20
    318e:	a6 01       	movw	r20, r12
    3190:	60 e0       	ldi	r22, 0x00	; 0
    3192:	70 e0       	ldi	r23, 0x00	; 0
    3194:	80 e0       	ldi	r24, 0x00	; 0
    3196:	90 e0       	ldi	r25, 0x00	; 0
    3198:	51 01       	movw	r10, r2
    319a:	cc 24       	eor	r12, r12
    319c:	dd 24       	eor	r13, r13
    319e:	ee 24       	eor	r14, r14
    31a0:	ff 24       	eor	r15, r15
    31a2:	00 e0       	ldi	r16, 0x00	; 0
    31a4:	10 e0       	ldi	r17, 0x00	; 0
    31a6:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
    31aa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    31ac:	eb 8d       	ldd	r30, Y+27	; 0x1b
    31ae:	fc 8c       	ldd	r15, Y+28	; 0x1c
    31b0:	2d 8c       	ldd	r2, Y+29	; 0x1d
    31b2:	ae 8c       	ldd	r10, Y+30	; 0x1e
    31b4:	bf 8d       	ldd	r27, Y+31	; 0x1f
    31b6:	a8 a1       	ldd	r26, Y+32	; 0x20
    31b8:	09 a1       	ldd	r16, Y+33	; 0x21
    31ba:	f2 0f       	add	r31, r18
    31bc:	11 e0       	ldi	r17, 0x01	; 1
    31be:	f2 17       	cp	r31, r18
    31c0:	08 f0       	brcs	.+2      	; 0x31c4 <fat_cluster_offset+0x80>
    31c2:	10 e0       	ldi	r17, 0x00	; 0
    31c4:	e3 0f       	add	r30, r19
    31c6:	21 e0       	ldi	r18, 0x01	; 1
    31c8:	e3 17       	cp	r30, r19
    31ca:	08 f0       	brcs	.+2      	; 0x31ce <fat_cluster_offset+0x8a>
    31cc:	20 e0       	ldi	r18, 0x00	; 0
    31ce:	31 2f       	mov	r19, r17
    31d0:	3e 0f       	add	r19, r30
    31d2:	11 e0       	ldi	r17, 0x01	; 1
    31d4:	3e 17       	cp	r19, r30
    31d6:	08 f0       	brcs	.+2      	; 0x31da <fat_cluster_offset+0x96>
    31d8:	10 e0       	ldi	r17, 0x00	; 0
    31da:	21 2b       	or	r18, r17
    31dc:	14 2f       	mov	r17, r20
    31de:	1f 0d       	add	r17, r15
    31e0:	e1 e0       	ldi	r30, 0x01	; 1
    31e2:	14 17       	cp	r17, r20
    31e4:	08 f0       	brcs	.+2      	; 0x31e8 <fat_cluster_offset+0xa4>
    31e6:	e0 e0       	ldi	r30, 0x00	; 0
    31e8:	42 2f       	mov	r20, r18
    31ea:	41 0f       	add	r20, r17
    31ec:	21 e0       	ldi	r18, 0x01	; 1
    31ee:	41 17       	cp	r20, r17
    31f0:	08 f0       	brcs	.+2      	; 0x31f4 <fat_cluster_offset+0xb0>
    31f2:	20 e0       	ldi	r18, 0x00	; 0
    31f4:	e2 2b       	or	r30, r18
    31f6:	25 0e       	add	r2, r21
    31f8:	21 e0       	ldi	r18, 0x01	; 1
    31fa:	25 16       	cp	r2, r21
    31fc:	08 f0       	brcs	.+2      	; 0x3200 <fat_cluster_offset+0xbc>
    31fe:	20 e0       	ldi	r18, 0x00	; 0
    3200:	5e 2f       	mov	r21, r30
    3202:	52 0d       	add	r21, r2
    3204:	e1 e0       	ldi	r30, 0x01	; 1
    3206:	52 15       	cp	r21, r2
    3208:	08 f0       	brcs	.+2      	; 0x320c <fat_cluster_offset+0xc8>
    320a:	e0 e0       	ldi	r30, 0x00	; 0
    320c:	2e 2b       	or	r18, r30
    320e:	a6 0e       	add	r10, r22
    3210:	e1 e0       	ldi	r30, 0x01	; 1
    3212:	a6 16       	cp	r10, r22
    3214:	08 f0       	brcs	.+2      	; 0x3218 <fat_cluster_offset+0xd4>
    3216:	e0 e0       	ldi	r30, 0x00	; 0
    3218:	62 2f       	mov	r22, r18
    321a:	6a 0d       	add	r22, r10
    321c:	21 e0       	ldi	r18, 0x01	; 1
    321e:	6a 15       	cp	r22, r10
    3220:	08 f0       	brcs	.+2      	; 0x3224 <fat_cluster_offset+0xe0>
    3222:	20 e0       	ldi	r18, 0x00	; 0
    3224:	e2 2b       	or	r30, r18
    3226:	b7 0f       	add	r27, r23
    3228:	21 e0       	ldi	r18, 0x01	; 1
    322a:	b7 17       	cp	r27, r23
    322c:	08 f0       	brcs	.+2      	; 0x3230 <fat_cluster_offset+0xec>
    322e:	20 e0       	ldi	r18, 0x00	; 0
    3230:	7e 2f       	mov	r23, r30
    3232:	7b 0f       	add	r23, r27
    3234:	e1 e0       	ldi	r30, 0x01	; 1
    3236:	7b 17       	cp	r23, r27
    3238:	08 f0       	brcs	.+2      	; 0x323c <fat_cluster_offset+0xf8>
    323a:	e0 e0       	ldi	r30, 0x00	; 0
    323c:	2e 2b       	or	r18, r30
    323e:	a8 0f       	add	r26, r24
    3240:	e1 e0       	ldi	r30, 0x01	; 1
    3242:	a8 17       	cp	r26, r24
    3244:	08 f0       	brcs	.+2      	; 0x3248 <fat_cluster_offset+0x104>
    3246:	e0 e0       	ldi	r30, 0x00	; 0
    3248:	82 2f       	mov	r24, r18
    324a:	8a 0f       	add	r24, r26
    324c:	21 e0       	ldi	r18, 0x01	; 1
    324e:	8a 17       	cp	r24, r26
    3250:	08 f0       	brcs	.+2      	; 0x3254 <fat_cluster_offset+0x110>
    3252:	20 e0       	ldi	r18, 0x00	; 0
    3254:	e2 2b       	or	r30, r18
    3256:	90 0f       	add	r25, r16
    3258:	e9 0f       	add	r30, r25
    325a:	08 c0       	rjmp	.+16     	; 0x326c <fat_cluster_offset+0x128>
 * \returns The cluster offset.
 */
offset_t fat_cluster_offset(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(!fs || cluster_num < 2)
        return 0;
    325c:	f0 e0       	ldi	r31, 0x00	; 0
    325e:	30 e0       	ldi	r19, 0x00	; 0
    3260:	40 e0       	ldi	r20, 0x00	; 0
    3262:	50 e0       	ldi	r21, 0x00	; 0
    3264:	60 e0       	ldi	r22, 0x00	; 0
    3266:	70 e0       	ldi	r23, 0x00	; 0
    3268:	80 e0       	ldi	r24, 0x00	; 0
    326a:	e0 e0       	ldi	r30, 0x00	; 0

    return fs->header.cluster_zero_offset + (offset_t) (cluster_num - 2) * fs->header.cluster_size;
}
    326c:	2f 2f       	mov	r18, r31
    326e:	9e 2f       	mov	r25, r30
    3270:	df 91       	pop	r29
    3272:	cf 91       	pop	r28
    3274:	1f 91       	pop	r17
    3276:	0f 91       	pop	r16
    3278:	ff 90       	pop	r15
    327a:	ef 90       	pop	r14
    327c:	df 90       	pop	r13
    327e:	cf 90       	pop	r12
    3280:	bf 90       	pop	r11
    3282:	af 90       	pop	r10
    3284:	9f 90       	pop	r9
    3286:	8f 90       	pop	r8
    3288:	7f 90       	pop	r7
    328a:	6f 90       	pop	r6
    328c:	5f 90       	pop	r5
    328e:	4f 90       	pop	r4
    3290:	3f 90       	pop	r3
    3292:	2f 90       	pop	r2
    3294:	08 95       	ret

00003296 <fat_dir_entry_read_callback>:
/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
{
    3296:	8f 92       	push	r8
    3298:	9f 92       	push	r9
    329a:	af 92       	push	r10
    329c:	bf 92       	push	r11
    329e:	cf 92       	push	r12
    32a0:	df 92       	push	r13
    32a2:	ef 92       	push	r14
    32a4:	ff 92       	push	r15
    32a6:	0f 93       	push	r16
    32a8:	1f 93       	push	r17
    32aa:	df 93       	push	r29
    32ac:	cf 93       	push	r28
    32ae:	cd b7       	in	r28, 0x3d	; 61
    32b0:	de b7       	in	r29, 0x3e	; 62
    32b2:	2d 97       	sbiw	r28, 0x0d	; 13
    32b4:	0f b6       	in	r0, 0x3f	; 63
    32b6:	f8 94       	cli
    32b8:	de bf       	out	0x3e, r29	; 62
    32ba:	0f be       	out	0x3f, r0	; 63
    32bc:	cd bf       	out	0x3d, r28	; 61
    32be:	fc 01       	movw	r30, r24
    struct fat_read_dir_callback_arg* arg = p;
    32c0:	67 01       	movw	r12, r14
    struct fat_dir_entry_struct* dir_entry = arg->dir_entry;
    32c2:	d7 01       	movw	r26, r14
    32c4:	ed 90       	ld	r14, X+
    32c6:	fc 90       	ld	r15, X
    32c8:	11 97       	sbiw	r26, 0x01	; 1

    arg->bytes_read += 32;
    32ca:	12 96       	adiw	r26, 0x02	; 2
    32cc:	8d 91       	ld	r24, X+
    32ce:	9c 91       	ld	r25, X
    32d0:	13 97       	sbiw	r26, 0x03	; 3
    32d2:	80 96       	adiw	r24, 0x20	; 32
    32d4:	13 96       	adiw	r26, 0x03	; 3
    32d6:	9c 93       	st	X, r25
    32d8:	8e 93       	st	-X, r24
    32da:	12 97       	sbiw	r26, 0x02	; 2

    /* skip deleted or empty entries */
    if(buffer[0] == FAT_DIRENTRY_DELETED || !buffer[0])
    32dc:	80 81       	ld	r24, Z
    32de:	85 3e       	cpi	r24, 0xE5	; 229
    32e0:	09 f4       	brne	.+2      	; 0x32e4 <fat_dir_entry_read_callback+0x4e>
    32e2:	03 c1       	rjmp	.+518    	; 0x34ea <fat_dir_entry_read_callback+0x254>
    32e4:	88 23       	and	r24, r24
    32e6:	09 f4       	brne	.+2      	; 0x32ea <fat_dir_entry_read_callback+0x54>
    32e8:	00 c1       	rjmp	.+512    	; 0x34ea <fat_dir_entry_read_callback+0x254>
        return 1;

    if(!dir_entry->entry_offset)
    32ea:	d7 01       	movw	r26, r14
    32ec:	99 96       	adiw	r26, 0x29	; 41
    32ee:	8c 91       	ld	r24, X
    32f0:	99 97       	sbiw	r26, 0x29	; 41
    32f2:	9a 96       	adiw	r26, 0x2a	; 42
    32f4:	9c 91       	ld	r25, X
    32f6:	9a 97       	sbiw	r26, 0x2a	; 42
    32f8:	89 2b       	or	r24, r25
    32fa:	9b 96       	adiw	r26, 0x2b	; 43
    32fc:	9c 91       	ld	r25, X
    32fe:	9b 97       	sbiw	r26, 0x2b	; 43
    3300:	89 2b       	or	r24, r25
    3302:	9c 96       	adiw	r26, 0x2c	; 44
    3304:	9c 91       	ld	r25, X
    3306:	9c 97       	sbiw	r26, 0x2c	; 44
    3308:	89 2b       	or	r24, r25
    330a:	9d 96       	adiw	r26, 0x2d	; 45
    330c:	9c 91       	ld	r25, X
    330e:	9d 97       	sbiw	r26, 0x2d	; 45
    3310:	89 2b       	or	r24, r25
    3312:	9e 96       	adiw	r26, 0x2e	; 46
    3314:	9c 91       	ld	r25, X
    3316:	9e 97       	sbiw	r26, 0x2e	; 46
    3318:	89 2b       	or	r24, r25
    331a:	9f 96       	adiw	r26, 0x2f	; 47
    331c:	9c 91       	ld	r25, X
    331e:	9f 97       	sbiw	r26, 0x2f	; 47
    3320:	89 2b       	or	r24, r25
    3322:	d0 96       	adiw	r26, 0x30	; 48
    3324:	9c 91       	ld	r25, X
    3326:	d0 97       	sbiw	r26, 0x30	; 48
    3328:	89 2b       	or	r24, r25
    332a:	c1 f4       	brne	.+48     	; 0x335c <fat_dir_entry_read_callback+0xc6>
        dir_entry->entry_offset = offset;
    332c:	99 96       	adiw	r26, 0x29	; 41
    332e:	0c 93       	st	X, r16
    3330:	99 97       	sbiw	r26, 0x29	; 41
    3332:	9a 96       	adiw	r26, 0x2a	; 42
    3334:	1c 93       	st	X, r17
    3336:	9a 97       	sbiw	r26, 0x2a	; 42
    3338:	9b 96       	adiw	r26, 0x2b	; 43
    333a:	2c 93       	st	X, r18
    333c:	9b 97       	sbiw	r26, 0x2b	; 43
    333e:	9c 96       	adiw	r26, 0x2c	; 44
    3340:	3c 93       	st	X, r19
    3342:	9c 97       	sbiw	r26, 0x2c	; 44
    3344:	9d 96       	adiw	r26, 0x2d	; 45
    3346:	4c 93       	st	X, r20
    3348:	9d 97       	sbiw	r26, 0x2d	; 45
    334a:	9e 96       	adiw	r26, 0x2e	; 46
    334c:	5c 93       	st	X, r21
    334e:	9e 97       	sbiw	r26, 0x2e	; 46
    3350:	9f 96       	adiw	r26, 0x2f	; 47
    3352:	6c 93       	st	X, r22
    3354:	9f 97       	sbiw	r26, 0x2f	; 47
    3356:	d0 96       	adiw	r26, 0x30	; 48
    3358:	7c 93       	st	X, r23
    335a:	d0 97       	sbiw	r26, 0x30	; 48
 * \returns 0 on failure, 1 on success and 2 if the
 *          directory entry is complete.
 */
uint8_t fat_interpret_dir_entry(struct fat_dir_entry_struct* dir_entry, const uint8_t* raw_entry)
{
    if(!dir_entry || !raw_entry || !raw_entry[0])
    335c:	e1 14       	cp	r14, r1
    335e:	f1 04       	cpc	r15, r1
    3360:	09 f4       	brne	.+2      	; 0x3364 <fat_dir_entry_read_callback+0xce>
    3362:	c1 c0       	rjmp	.+386    	; 0x34e6 <fat_dir_entry_read_callback+0x250>
    3364:	30 97       	sbiw	r30, 0x00	; 0
    3366:	09 f4       	brne	.+2      	; 0x336a <fat_dir_entry_read_callback+0xd4>
    3368:	be c0       	rjmp	.+380    	; 0x34e6 <fat_dir_entry_read_callback+0x250>
    336a:	20 81       	ld	r18, Z
    336c:	22 23       	and	r18, r18
    336e:	09 f4       	brne	.+2      	; 0x3372 <fat_dir_entry_read_callback+0xdc>
    3370:	ba c0       	rjmp	.+372    	; 0x34e6 <fat_dir_entry_read_callback+0x250>
        return 0;

    char* long_name = dir_entry->long_name;
    if(raw_entry[11] == 0x0f)
    3372:	83 85       	ldd	r24, Z+11	; 0x0b
    3374:	8f 30       	cpi	r24, 0x0F	; 15
    3376:	c1 f5       	brne	.+112    	; 0x33e8 <fat_dir_entry_read_callback+0x152>
    {
        /* Lfn supports unicode, but we do not, for now.
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
    3378:	30 e0       	ldi	r19, 0x00	; 0
    337a:	2f 73       	andi	r18, 0x3F	; 63
    337c:	30 70       	andi	r19, 0x00	; 0
    337e:	21 50       	subi	r18, 0x01	; 1
    3380:	30 40       	sbci	r19, 0x00	; 0
    3382:	4d e0       	ldi	r20, 0x0D	; 13
    3384:	50 e0       	ldi	r21, 0x00	; 0
    3386:	24 9f       	mul	r18, r20
    3388:	c0 01       	movw	r24, r0
    338a:	25 9f       	mul	r18, r21
    338c:	90 0d       	add	r25, r0
    338e:	34 9f       	mul	r19, r20
    3390:	90 0d       	add	r25, r0
    3392:	11 24       	eor	r1, r1
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
    3394:	9e 01       	movw	r18, r28
    3396:	2f 5f       	subi	r18, 0xFF	; 255
    3398:	3f 4f       	sbci	r19, 0xFF	; 255
    339a:	65 e6       	ldi	r22, 0x65	; 101
    339c:	71 e0       	ldi	r23, 0x01	; 1
    339e:	4d e0       	ldi	r20, 0x0D	; 13
    33a0:	db 01       	movw	r26, r22
    33a2:	0d 90       	ld	r0, X+
    33a4:	bd 01       	movw	r22, r26
    33a6:	d9 01       	movw	r26, r18
    33a8:	0d 92       	st	X+, r0
    33aa:	9d 01       	movw	r18, r26
    33ac:	41 50       	subi	r20, 0x01	; 1
    33ae:	c1 f7       	brne	.-16     	; 0x33a0 <fat_dir_entry_read_callback+0x10a>
    33b0:	9e 01       	movw	r18, r28
    33b2:	2f 5f       	subi	r18, 0xFF	; 255
    33b4:	3f 4f       	sbci	r19, 0xFF	; 255

/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    33b6:	e8 0e       	add	r14, r24
    33b8:	f9 1e       	adc	r15, r25
    33ba:	ac 01       	movw	r20, r24
    33bc:	43 5f       	subi	r20, 0xF3	; 243
    33be:	5f 4f       	sbci	r21, 0xFF	; 255
    33c0:	0f c0       	rjmp	.+30     	; 0x33e0 <fat_dir_entry_read_callback+0x14a>
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
            long_name[char_offset + i] = raw_entry[char_mapping[i]];
    33c2:	d9 01       	movw	r26, r18
    33c4:	6d 91       	ld	r22, X+
    33c6:	9d 01       	movw	r18, r26
    33c8:	df 01       	movw	r26, r30
    33ca:	a6 0f       	add	r26, r22
    33cc:	b1 1d       	adc	r27, r1
    33ce:	6c 91       	ld	r22, X
    33d0:	d7 01       	movw	r26, r14
    33d2:	6d 93       	st	X+, r22
    33d4:	7d 01       	movw	r14, r26
    33d6:	01 96       	adiw	r24, 0x01	; 1
         * So we assume pure ascii and read only every
         * second byte.
         */
        uint16_t char_offset = ((raw_entry[0] & 0x3f) - 1) * 13;
        const uint8_t char_mapping[] = { 1, 3, 5, 7, 9, 14, 16, 18, 20, 22, 24, 28, 30 };
        for(uint8_t i = 0; i <= 12 && char_offset + i < sizeof(dir_entry->long_name) - 1; ++i)
    33d8:	84 17       	cp	r24, r20
    33da:	95 07       	cpc	r25, r21
    33dc:	09 f4       	brne	.+2      	; 0x33e0 <fat_dir_entry_read_callback+0x14a>
    33de:	85 c0       	rjmp	.+266    	; 0x34ea <fat_dir_entry_read_callback+0x254>
    33e0:	8f 31       	cpi	r24, 0x1F	; 31
    33e2:	91 05       	cpc	r25, r1
    33e4:	70 f3       	brcs	.-36     	; 0x33c2 <fat_dir_entry_read_callback+0x12c>
    33e6:	81 c0       	rjmp	.+258    	; 0x34ea <fat_dir_entry_read_callback+0x254>
        return 1;
    }
    else
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
    33e8:	d7 01       	movw	r26, r14
    33ea:	8c 91       	ld	r24, X
    33ec:	88 23       	and	r24, r24
    33ee:	09 f0       	breq	.+2      	; 0x33f2 <fat_dir_entry_read_callback+0x15c>
    33f0:	52 c0       	rjmp	.+164    	; 0x3496 <fat_dir_entry_read_callback+0x200>
    33f2:	8f 01       	movw	r16, r30
    33f4:	c7 01       	movw	r24, r14
    33f6:	9f 01       	movw	r18, r30
    33f8:	60 e0       	ldi	r22, 0x00	; 0
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
            {
                if(raw_entry[i] == ' ')
    33fa:	d9 01       	movw	r26, r18
    33fc:	7d 91       	ld	r23, X+
    33fe:	9d 01       	movw	r18, r26
    3400:	70 32       	cpi	r23, 0x20	; 32
    3402:	a9 f0       	breq	.+42     	; 0x342e <fat_dir_entry_read_callback+0x198>
                    break;
                long_name[i] = raw_entry[i];
    3404:	dc 01       	movw	r26, r24
    3406:	7c 93       	st	X, r23
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    3408:	44 85       	ldd	r20, Z+12	; 0x0c
    340a:	43 ff       	sbrs	r20, 3
    340c:	0c c0       	rjmp	.+24     	; 0x3426 <fat_dir_entry_read_callback+0x190>

/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    340e:	a9 01       	movw	r20, r18
    3410:	41 50       	subi	r20, 0x01	; 1
    3412:	50 40       	sbci	r21, 0x00	; 0
                /* Windows NT and later versions do not store LFN entries
                 * for 8.3 names which have a lowercase basename, extension
                 * or both when everything else is uppercase. They use two
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
    3414:	da 01       	movw	r26, r20
    3416:	4c 91       	ld	r20, X
    3418:	41 34       	cpi	r20, 0x41	; 65
    341a:	28 f0       	brcs	.+10     	; 0x3426 <fat_dir_entry_read_callback+0x190>
    341c:	4b 35       	cpi	r20, 0x5B	; 91
    341e:	18 f4       	brcc	.+6      	; 0x3426 <fat_dir_entry_read_callback+0x190>
                    long_name[i] += 'a' - 'A';
    3420:	70 5e       	subi	r23, 0xE0	; 224
    3422:	dc 01       	movw	r26, r24
    3424:	7c 93       	st	X, r23
    {
        /* if we do not have a long name, take the short one */
        if(long_name[0] == '\0')
        {
            uint8_t i;
            for(i = 0; i < 8; ++i)
    3426:	6f 5f       	subi	r22, 0xFF	; 255
    3428:	01 96       	adiw	r24, 0x01	; 1
    342a:	68 30       	cpi	r22, 0x08	; 8
    342c:	31 f7       	brne	.-52     	; 0x33fa <fat_dir_entry_read_callback+0x164>
                 * extra bits to signal a lowercase basename or extension.
                 */
                if((raw_entry[12] & 0x08) && raw_entry[i] >= 'A' && raw_entry[i] <= 'Z')
                    long_name[i] += 'a' - 'A';
            }
            if(long_name[0] == 0x05)
    342e:	d7 01       	movw	r26, r14
    3430:	8c 91       	ld	r24, X
    3432:	85 30       	cpi	r24, 0x05	; 5
    3434:	11 f4       	brne	.+4      	; 0x343a <fat_dir_entry_read_callback+0x1a4>
                long_name[0] = (char) FAT_DIRENTRY_DELETED;
    3436:	85 ee       	ldi	r24, 0xE5	; 229
    3438:	8c 93       	st	X, r24

            if(raw_entry[8] != ' ')
    343a:	80 85       	ldd	r24, Z+8	; 0x08
    343c:	80 32       	cpi	r24, 0x20	; 32
    343e:	39 f1       	breq	.+78     	; 0x348e <fat_dir_entry_read_callback+0x1f8>
            {
                long_name[i++] = '.';
    3440:	c7 01       	movw	r24, r14
    3442:	86 0f       	add	r24, r22
    3444:	91 1d       	adc	r25, r1
    3446:	2e e2       	ldi	r18, 0x2E	; 46
    3448:	dc 01       	movw	r26, r24
    344a:	2c 93       	st	X, r18

/**
 * \ingroup fat_fs
 * Callback function for reading a directory entry.
 */
uint8_t fat_dir_entry_read_callback(uint8_t* buffer, offset_t offset, void* p)
    344c:	46 2f       	mov	r20, r22
    344e:	4c 5f       	subi	r20, 0xFC	; 252
            if(long_name[0] == 0x05)
                long_name[0] = (char) FAT_DIRENTRY_DELETED;

            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';
    3450:	6f 5f       	subi	r22, 0xFF	; 255

                uint8_t j = 8;
                for(; j < 11; ++j)
                {
                    if(raw_entry[j] == ' ')
    3452:	d8 01       	movw	r26, r16
    3454:	18 96       	adiw	r26, 0x08	; 8
    3456:	2c 91       	ld	r18, X
    3458:	18 97       	sbiw	r26, 0x08	; 8
    345a:	20 32       	cpi	r18, 0x20	; 32
    345c:	c1 f0       	breq	.+48     	; 0x348e <fat_dir_entry_read_callback+0x1f8>
                        break;
                    long_name[i] = raw_entry[j];
    345e:	c7 01       	movw	r24, r14
    3460:	86 0f       	add	r24, r22
    3462:	91 1d       	adc	r25, r1
    3464:	dc 01       	movw	r26, r24
    3466:	2c 93       	st	X, r18

                    /* See above for the lowercase 8.3 name handling of
                     * Windows NT and later.
                     */
                    if((raw_entry[12] & 0x10) && raw_entry[j] >= 'A' && raw_entry[j] <= 'Z')
    3468:	34 85       	ldd	r19, Z+12	; 0x0c
    346a:	34 ff       	sbrs	r19, 4
    346c:	0b c0       	rjmp	.+22     	; 0x3484 <fat_dir_entry_read_callback+0x1ee>
    346e:	d8 01       	movw	r26, r16
    3470:	18 96       	adiw	r26, 0x08	; 8
    3472:	3c 91       	ld	r19, X
    3474:	18 97       	sbiw	r26, 0x08	; 8
    3476:	31 34       	cpi	r19, 0x41	; 65
    3478:	28 f0       	brcs	.+10     	; 0x3484 <fat_dir_entry_read_callback+0x1ee>
    347a:	3b 35       	cpi	r19, 0x5B	; 91
    347c:	18 f4       	brcc	.+6      	; 0x3484 <fat_dir_entry_read_callback+0x1ee>
                        long_name[i] += 'a' - 'A';
    347e:	20 5e       	subi	r18, 0xE0	; 224
    3480:	dc 01       	movw	r26, r24
    3482:	2c 93       	st	X, r18

                    ++i;
    3484:	6f 5f       	subi	r22, 0xFF	; 255
    3486:	0f 5f       	subi	r16, 0xFF	; 255
    3488:	1f 4f       	sbci	r17, 0xFF	; 255
            if(raw_entry[8] != ' ')
            {
                long_name[i++] = '.';

                uint8_t j = 8;
                for(; j < 11; ++j)
    348a:	64 17       	cp	r22, r20
    348c:	11 f7       	brne	.-60     	; 0x3452 <fat_dir_entry_read_callback+0x1bc>

                    ++i;
                }
            } 

            long_name[i] = '\0';
    348e:	d7 01       	movw	r26, r14
    3490:	a6 0f       	add	r26, r22
    3492:	b1 1d       	adc	r27, r1
    3494:	1c 92       	st	X, r1
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
    3496:	83 85       	ldd	r24, Z+11	; 0x0b
    3498:	d7 01       	movw	r26, r14
    349a:	90 96       	adiw	r26, 0x20	; 32
    349c:	8c 93       	st	X, r24
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
    349e:	84 89       	ldd	r24, Z+20	; 0x14
    34a0:	95 89       	ldd	r25, Z+21	; 0x15
    34a2:	a0 e0       	ldi	r26, 0x00	; 0
    34a4:	b0 e0       	ldi	r27, 0x00	; 0
    34a6:	5c 01       	movw	r10, r24
    34a8:	99 24       	eor	r9, r9
    34aa:	88 24       	eor	r8, r8
            long_name[i] = '\0';
        }
        
        /* extract properties of file and store them within the structure */
        dir_entry->attributes = raw_entry[11];
        dir_entry->cluster = ltoh16(*((uint16_t*) &raw_entry[26]));
    34ac:	22 8d       	ldd	r18, Z+26	; 0x1a
    34ae:	33 8d       	ldd	r19, Z+27	; 0x1b
    34b0:	40 e0       	ldi	r20, 0x00	; 0
    34b2:	50 e0       	ldi	r21, 0x00	; 0
#if FAT_FAT32_SUPPORT
        dir_entry->cluster |= ((cluster_t) ltoh16(*((uint16_t*) &raw_entry[20]))) << 16;
    34b4:	82 2a       	or	r8, r18
    34b6:	93 2a       	or	r9, r19
    34b8:	a4 2a       	or	r10, r20
    34ba:	b5 2a       	or	r11, r21
    34bc:	d7 01       	movw	r26, r14
    34be:	91 96       	adiw	r26, 0x21	; 33
    34c0:	8d 92       	st	X+, r8
    34c2:	9d 92       	st	X+, r9
    34c4:	ad 92       	st	X+, r10
    34c6:	bc 92       	st	X, r11
    34c8:	94 97       	sbiw	r26, 0x24	; 36
#endif
        dir_entry->file_size = ltoh32(*((uint32_t*) &raw_entry[28]));
    34ca:	84 8d       	ldd	r24, Z+28	; 0x1c
    34cc:	95 8d       	ldd	r25, Z+29	; 0x1d
    34ce:	a6 8d       	ldd	r26, Z+30	; 0x1e
    34d0:	b7 8d       	ldd	r27, Z+31	; 0x1f
    34d2:	f7 01       	movw	r30, r14
    34d4:	85 a3       	std	Z+37, r24	; 0x25
    34d6:	96 a3       	std	Z+38, r25	; 0x26
    34d8:	a7 a3       	std	Z+39, r26	; 0x27
    34da:	b0 a7       	std	Z+40, r27	; 0x28
        {
            return 1;
        }
        case 2: /* directory entry complete, finish */
        {
            arg->finished = 1;
    34dc:	81 e0       	ldi	r24, 0x01	; 1
    34de:	d6 01       	movw	r26, r12
    34e0:	14 96       	adiw	r26, 0x04	; 4
    34e2:	8c 93       	st	X, r24
    34e4:	14 97       	sbiw	r26, 0x04	; 4
    
    switch(fat_interpret_dir_entry(dir_entry, buffer))
    {
        case 0: /* failure */
        {
            return 0;
    34e6:	80 e0       	ldi	r24, 0x00	; 0
    34e8:	01 c0       	rjmp	.+2      	; 0x34ec <fat_dir_entry_read_callback+0x256>
        }
        case 1: /* buffer successfully parsed, continue */
        {
            return 1;
    34ea:	81 e0       	ldi	r24, 0x01	; 1
            return 0;
        }
    }

    return 0;
}
    34ec:	2d 96       	adiw	r28, 0x0d	; 13
    34ee:	0f b6       	in	r0, 0x3f	; 63
    34f0:	f8 94       	cli
    34f2:	de bf       	out	0x3e, r29	; 62
    34f4:	0f be       	out	0x3f, r0	; 63
    34f6:	cd bf       	out	0x3d, r28	; 61
    34f8:	cf 91       	pop	r28
    34fa:	df 91       	pop	r29
    34fc:	1f 91       	pop	r17
    34fe:	0f 91       	pop	r16
    3500:	ff 90       	pop	r15
    3502:	ef 90       	pop	r14
    3504:	df 90       	pop	r13
    3506:	cf 90       	pop	r12
    3508:	bf 90       	pop	r11
    350a:	af 90       	pop	r10
    350c:	9f 90       	pop	r9
    350e:	8f 90       	pop	r8
    3510:	08 95       	ret

00003512 <fat_clear_cluster>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] cluster_num The cluster to clear.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    3512:	af 92       	push	r10
    3514:	bf 92       	push	r11
    3516:	cf 92       	push	r12
    3518:	df 92       	push	r13
    351a:	ef 92       	push	r14
    351c:	ff 92       	push	r15
    351e:	0f 93       	push	r16
    3520:	1f 93       	push	r17
    3522:	df 93       	push	r29
    3524:	cf 93       	push	r28
    3526:	cd b7       	in	r28, 0x3d	; 61
    3528:	de b7       	in	r29, 0x3e	; 62
    352a:	60 97       	sbiw	r28, 0x10	; 16
    352c:	0f b6       	in	r0, 0x3f	; 63
    352e:	f8 94       	cli
    3530:	de bf       	out	0x3e, r29	; 62
    3532:	0f be       	out	0x3f, r0	; 63
    3534:	cd bf       	out	0x3d, r28	; 61
    3536:	7c 01       	movw	r14, r24
    if(cluster_num < 2)
    3538:	42 30       	cpi	r20, 0x02	; 2
    353a:	51 05       	cpc	r21, r1
    353c:	61 05       	cpc	r22, r1
    353e:	71 05       	cpc	r23, r1
    3540:	e0 f0       	brcs	.+56     	; 0x357a <fat_clear_cluster+0x68>
        return 0;

    offset_t cluster_offset = fat_cluster_offset(fs, cluster_num);
    3542:	00 de       	rcall	.-1024   	; 0x3144 <fat_cluster_offset>

    uint8_t zero[16];
    memset(zero, 0, sizeof(zero));
    3544:	8e 01       	movw	r16, r28
    3546:	0f 5f       	subi	r16, 0xFF	; 255
    3548:	1f 4f       	sbci	r17, 0xFF	; 255
    354a:	e0 e1       	ldi	r30, 0x10	; 16
    354c:	d8 01       	movw	r26, r16
    354e:	1d 92       	st	X+, r1
    3550:	ea 95       	dec	r30
    3552:	e9 f7       	brne	.-6      	; 0x354e <fat_clear_cluster+0x3c>
    return fs->partition->device_write_interval(cluster_offset,
    3554:	d7 01       	movw	r26, r14
    3556:	ed 91       	ld	r30, X+
    3558:	fc 91       	ld	r31, X
    355a:	11 97       	sbiw	r26, 0x01	; 1
    355c:	58 96       	adiw	r26, 0x18	; 24
    355e:	ed 90       	ld	r14, X+
    3560:	fc 90       	ld	r15, X
    3562:	59 97       	sbiw	r26, 0x19	; 25
    3564:	06 80       	ldd	r0, Z+6	; 0x06
    3566:	f7 81       	ldd	r31, Z+7	; 0x07
    3568:	e0 2d       	mov	r30, r0
    356a:	af e9       	ldi	r26, 0x9F	; 159
    356c:	ca 2e       	mov	r12, r26
    356e:	a8 e1       	ldi	r26, 0x18	; 24
    3570:	da 2e       	mov	r13, r26
    3572:	aa 24       	eor	r10, r10
    3574:	bb 24       	eor	r11, r11
    3576:	09 95       	icall
    3578:	01 c0       	rjmp	.+2      	; 0x357c <fat_clear_cluster+0x6a>
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_clear_cluster(const struct fat_fs_struct* fs, cluster_t cluster_num)
{
    if(cluster_num < 2)
        return 0;
    357a:	80 e0       	ldi	r24, 0x00	; 0
                                                zero,
                                                fs->header.cluster_size,
                                                fat_clear_cluster_callback,
                                                0
                                               );
}
    357c:	60 96       	adiw	r28, 0x10	; 16
    357e:	0f b6       	in	r0, 0x3f	; 63
    3580:	f8 94       	cli
    3582:	de bf       	out	0x3e, r29	; 62
    3584:	0f be       	out	0x3f, r0	; 63
    3586:	cd bf       	out	0x3d, r28	; 61
    3588:	cf 91       	pop	r28
    358a:	df 91       	pop	r29
    358c:	1f 91       	pop	r17
    358e:	0f 91       	pop	r16
    3590:	ff 90       	pop	r15
    3592:	ef 90       	pop	r14
    3594:	df 90       	pop	r13
    3596:	cf 90       	pop	r12
    3598:	bf 90       	pop	r11
    359a:	af 90       	pop	r10
    359c:	08 95       	ret

0000359e <fat_write_dir_entry>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
{
    359e:	2f 92       	push	r2
    35a0:	3f 92       	push	r3
    35a2:	4f 92       	push	r4
    35a4:	5f 92       	push	r5
    35a6:	6f 92       	push	r6
    35a8:	7f 92       	push	r7
    35aa:	8f 92       	push	r8
    35ac:	9f 92       	push	r9
    35ae:	af 92       	push	r10
    35b0:	bf 92       	push	r11
    35b2:	cf 92       	push	r12
    35b4:	df 92       	push	r13
    35b6:	ef 92       	push	r14
    35b8:	ff 92       	push	r15
    35ba:	0f 93       	push	r16
    35bc:	1f 93       	push	r17
    35be:	df 93       	push	r29
    35c0:	cf 93       	push	r28
    35c2:	cd b7       	in	r28, 0x3d	; 61
    35c4:	de b7       	in	r29, 0x3e	; 62
    35c6:	a5 97       	sbiw	r28, 0x25	; 37
    35c8:	0f b6       	in	r0, 0x3f	; 63
    35ca:	f8 94       	cli
    35cc:	de bf       	out	0x3e, r29	; 62
    35ce:	0f be       	out	0x3f, r0	; 63
    35d0:	cd bf       	out	0x3d, r28	; 61
    35d2:	6b 01       	movw	r12, r22
    if(!fs || !dir_entry)
    35d4:	00 97       	sbiw	r24, 0x00	; 0
    35d6:	09 f4       	brne	.+2      	; 0x35da <fat_write_dir_entry+0x3c>
    35d8:	b0 c1       	rjmp	.+864    	; 0x393a <fat_write_dir_entry+0x39c>
    35da:	61 15       	cp	r22, r1
    35dc:	71 05       	cpc	r23, r1
    35de:	09 f4       	brne	.+2      	; 0x35e2 <fat_write_dir_entry+0x44>
    35e0:	ac c1       	rjmp	.+856    	; 0x393a <fat_write_dir_entry+0x39c>
        fat_set_file_modification_date(dir_entry, year, month, day);
        fat_set_file_modification_time(dir_entry, hour, min, sec);
    }
#endif

    device_write_t device_write = fs->partition->device_write;
    35e2:	dc 01       	movw	r26, r24
    35e4:	ed 91       	ld	r30, X+
    35e6:	fc 91       	ld	r31, X
    35e8:	24 81       	ldd	r18, Z+4	; 0x04
    35ea:	35 81       	ldd	r19, Z+5	; 0x05
    35ec:	3d a3       	std	Y+37, r19	; 0x25
    35ee:	2c a3       	std	Y+36, r18	; 0x24
    offset_t offset = dir_entry->entry_offset;
    35f0:	db 01       	movw	r26, r22
    35f2:	99 96       	adiw	r26, 0x29	; 41
    35f4:	bc 91       	ld	r27, X
    35f6:	ba a3       	std	Y+34, r27	; 0x22
    35f8:	fb 01       	movw	r30, r22
    35fa:	22 a4       	ldd	r2, Z+42	; 0x2a
    35fc:	33 a4       	ldd	r3, Z+43	; 0x2b
    35fe:	44 a4       	ldd	r4, Z+44	; 0x2c
    3600:	55 a4       	ldd	r5, Z+45	; 0x2d
    3602:	66 a4       	ldd	r6, Z+46	; 0x2e
    3604:	77 a4       	ldd	r7, Z+47	; 0x2f
    3606:	f0 a9       	ldd	r31, Z+48	; 0x30
    3608:	fb a3       	std	Y+35, r31	; 0x23
    const char* name = dir_entry->long_name;
    360a:	b6 2e       	mov	r11, r22
    360c:	ad 2c       	mov	r10, r13
    uint8_t name_len = strlen(name);
    360e:	db 01       	movw	r26, r22
    3610:	0d 90       	ld	r0, X+
    3612:	00 20       	and	r0, r0
    3614:	e9 f7       	brne	.-6      	; 0x3610 <fat_write_dir_entry+0x72>
    3616:	11 97       	sbiw	r26, 0x01	; 1
    3618:	0a 2f       	mov	r16, r26
    361a:	06 1b       	sub	r16, r22
    uint8_t lfn_entry_count = (name_len + 12) / 13;
    361c:	80 2f       	mov	r24, r16
    361e:	90 e0       	ldi	r25, 0x00	; 0
    3620:	0c 96       	adiw	r24, 0x0c	; 12
    3622:	6d e0       	ldi	r22, 0x0D	; 13
    3624:	70 e0       	ldi	r23, 0x00	; 0
    3626:	0e 94 7f 32 	call	0x64fe	; 0x64fe <__divmodhi4>
    362a:	69 a3       	std	Y+33, r22	; 0x21
    uint8_t buffer[32];

    /* write 8.3 entry */

    /* generate 8.3 file name */
    memset(&buffer[0], ' ', 11);
    362c:	ce 01       	movw	r24, r28
    362e:	01 96       	adiw	r24, 0x01	; 1
    3630:	60 e2       	ldi	r22, 0x20	; 32
    3632:	70 e0       	ldi	r23, 0x00	; 0
    3634:	4b e0       	ldi	r20, 0x0B	; 11
    3636:	50 e0       	ldi	r21, 0x00	; 0
    3638:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <memset>
    char* name_ext = strrchr(name, '.');
    363c:	c6 01       	movw	r24, r12
    363e:	6e e2       	ldi	r22, 0x2E	; 46
    3640:	70 e0       	ldi	r23, 0x00	; 0
    3642:	0e 94 2c 33 	call	0x6658	; 0x6658 <strrchr>
    if(name_ext && *++name_ext)
    3646:	00 97       	sbiw	r24, 0x00	; 0
    3648:	f9 f0       	breq	.+62     	; 0x3688 <fat_write_dir_entry+0xea>
    364a:	9c 01       	movw	r18, r24
    364c:	2f 5f       	subi	r18, 0xFF	; 255
    364e:	3f 4f       	sbci	r19, 0xFF	; 255
    3650:	dc 01       	movw	r26, r24
    3652:	11 96       	adiw	r26, 0x01	; 1
    3654:	8c 91       	ld	r24, X
    3656:	11 97       	sbiw	r26, 0x01	; 1
    3658:	88 23       	and	r24, r24
    365a:	b1 f0       	breq	.+44     	; 0x3688 <fat_write_dir_entry+0xea>
    {
        uint8_t name_ext_len = strlen(name_ext);
    365c:	f9 01       	movw	r30, r18
    365e:	01 90       	ld	r0, Z+
    3660:	00 20       	and	r0, r0
    3662:	e9 f7       	brne	.-6      	; 0x365e <fat_write_dir_entry+0xc0>
    3664:	31 97       	sbiw	r30, 0x01	; 1
    3666:	e2 1b       	sub	r30, r18
    3668:	f3 0b       	sbc	r31, r19
        name_len -= name_ext_len + 1;
    366a:	8e 2f       	mov	r24, r30
    366c:	80 95       	com	r24
    366e:	08 0f       	add	r16, r24

        if(name_ext_len > 3)
            name_ext_len = 3;
        
        memcpy(&buffer[8], name_ext, name_ext_len);
    3670:	be 01       	movw	r22, r28
    3672:	67 5f       	subi	r22, 0xF7	; 247
    3674:	7f 4f       	sbci	r23, 0xFF	; 255
    3676:	4e 2f       	mov	r20, r30
    3678:	e4 30       	cpi	r30, 0x04	; 4
    367a:	08 f0       	brcs	.+2      	; 0x367e <fat_write_dir_entry+0xe0>
    367c:	43 e0       	ldi	r20, 0x03	; 3
    367e:	cb 01       	movw	r24, r22
    3680:	b9 01       	movw	r22, r18
    3682:	50 e0       	ldi	r21, 0x00	; 0
    3684:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <memcpy>
    3688:	ce 01       	movw	r24, r28
    368a:	01 96       	adiw	r24, 0x01	; 1
    }
    
    if(name_len <= 8)
    368c:	09 30       	cpi	r16, 0x09	; 9
    368e:	88 f4       	brcc	.+34     	; 0x36b2 <fat_write_dir_entry+0x114>
    {
        memcpy(buffer, name, name_len);
    3690:	6b 2d       	mov	r22, r11
    3692:	7a 2d       	mov	r23, r10
    3694:	40 2f       	mov	r20, r16
    3696:	50 e0       	ldi	r21, 0x00	; 0
    3698:	0e 94 eb 32 	call	0x65d6	; 0x65d6 <memcpy>
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    369c:	f6 01       	movw	r30, r12
    369e:	80 81       	ld	r24, Z
    36a0:	8e 32       	cpi	r24, 0x2E	; 46
    36a2:	39 f5       	brne	.+78     	; 0x36f2 <fat_write_dir_entry+0x154>
           ((name[1] == '.' && name[2] == '\0') ||
    36a4:	81 81       	ldd	r24, Z+1	; 0x01
         *
         * Theoretically it would be possible to leave
         * the 8.3 entry alone if the basename and the
         * extension have no mixed capitalization.
         */
        if(name[0] == '.' &&
    36a6:	8e 32       	cpi	r24, 0x2E	; 46
    36a8:	09 f4       	brne	.+2      	; 0x36ac <fat_write_dir_entry+0x10e>
           ((name[1] == '.' && name[2] == '\0') ||
    36aa:	82 81       	ldd	r24, Z+2	; 0x02
    36ac:	88 23       	and	r24, r24
    36ae:	01 f1       	breq	.+64     	; 0x36f0 <fat_write_dir_entry+0x152>
    36b0:	20 c0       	rjmp	.+64     	; 0x36f2 <fat_write_dir_entry+0x154>
          )
            lfn_entry_count = 0;
    }
    else
    {
        memcpy(buffer, name, 8);
    36b2:	fc 01       	movw	r30, r24
    36b4:	95 01       	movw	r18, r10
    36b6:	83 2f       	mov	r24, r19
    36b8:	9a 2d       	mov	r25, r10
    36ba:	dc 01       	movw	r26, r24
    36bc:	88 e0       	ldi	r24, 0x08	; 8
    36be:	0d 90       	ld	r0, X+
    36c0:	01 92       	st	Z+, r0
    36c2:	81 50       	subi	r24, 0x01	; 1
    36c4:	e1 f7       	brne	.-8      	; 0x36be <fat_write_dir_entry+0x120>

        /* Minimize 8.3 name clashes by appending
         * the lower byte of the cluster number.
         */
        uint8_t num = dir_entry->cluster & 0xff;
    36c6:	d6 01       	movw	r26, r12
    36c8:	91 96       	adiw	r26, 0x21	; 33
    36ca:	8c 91       	ld	r24, X
    36cc:	91 97       	sbiw	r26, 0x21	; 33
    36ce:	98 2f       	mov	r25, r24
    36d0:	92 95       	swap	r25
    36d2:	9f 70       	andi	r25, 0x0F	; 15

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
    36d4:	80 3a       	cpi	r24, 0xA0	; 160
    36d6:	10 f4       	brcc	.+4      	; 0x36dc <fat_write_dir_entry+0x13e>
    36d8:	90 5d       	subi	r25, 0xD0	; 208
    36da:	01 c0       	rjmp	.+2      	; 0x36de <fat_write_dir_entry+0x140>
    36dc:	9f 59       	subi	r25, 0x9F	; 159
    36de:	9f 83       	std	Y+7, r25	; 0x07
        num &= 0x0f;
    36e0:	8f 70       	andi	r24, 0x0F	; 15
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    36e2:	8a 30       	cpi	r24, 0x0A	; 10
    36e4:	10 f4       	brcc	.+4      	; 0x36ea <fat_write_dir_entry+0x14c>
    36e6:	80 5d       	subi	r24, 0xD0	; 208
    36e8:	01 c0       	rjmp	.+2      	; 0x36ec <fat_write_dir_entry+0x14e>
    36ea:	8f 59       	subi	r24, 0x9F	; 159
    36ec:	88 87       	std	Y+8, r24	; 0x08
    36ee:	01 c0       	rjmp	.+2      	; 0x36f2 <fat_write_dir_entry+0x154>
         */
        if(name[0] == '.' &&
           ((name[1] == '.' && name[2] == '\0') ||
            name[1] == '\0')
          )
            lfn_entry_count = 0;
    36f0:	19 a2       	std	Y+33, r1	; 0x21

        buffer[6] = (num < 0xa0) ? ('0' + (num >> 4)) : ('a' + (num >> 4));
        num &= 0x0f;
        buffer[7] = (num < 0x0a) ? ('0' + num) : ('a' + num);
    }
    if(buffer[0] == FAT_DIRENTRY_DELETED)
    36f2:	89 81       	ldd	r24, Y+1	; 0x01
    36f4:	85 3e       	cpi	r24, 0xE5	; 229
    36f6:	11 f4       	brne	.+4      	; 0x36fc <fat_write_dir_entry+0x15e>
        buffer[0] = 0x05;
    36f8:	85 e0       	ldi	r24, 0x05	; 5
    36fa:	89 83       	std	Y+1, r24	; 0x01

    /* fill directory entry buffer */
    memset(&buffer[11], 0, sizeof(buffer) - 11);
    36fc:	85 e1       	ldi	r24, 0x15	; 21
    36fe:	fe 01       	movw	r30, r28
    3700:	3c 96       	adiw	r30, 0x0c	; 12
    3702:	df 01       	movw	r26, r30
    3704:	1d 92       	st	X+, r1
    3706:	8a 95       	dec	r24
    3708:	e9 f7       	brne	.-6      	; 0x3704 <fat_write_dir_entry+0x166>
    buffer[0x0b] = dir_entry->attributes;
    370a:	f6 01       	movw	r30, r12
    370c:	80 a1       	ldd	r24, Z+32	; 0x20
    370e:	8c 87       	std	Y+12, r24	; 0x0c
#if FAT_DATETIME_SUPPORT
    *((uint16_t*) &buffer[0x16]) = htol16(dir_entry->modification_time);
    *((uint16_t*) &buffer[0x18]) = htol16(dir_entry->modification_date);
#endif
#if FAT_FAT32_SUPPORT
    *((uint16_t*) &buffer[0x14]) = htol16((uint16_t) (dir_entry->cluster >> 16));
    3710:	9e 01       	movw	r18, r28
    3712:	2f 5f       	subi	r18, 0xFF	; 255
    3714:	3f 4f       	sbci	r19, 0xFF	; 255
    3716:	81 a1       	ldd	r24, Z+33	; 0x21
    3718:	92 a1       	ldd	r25, Z+34	; 0x22
    371a:	a3 a1       	ldd	r26, Z+35	; 0x23
    371c:	b4 a1       	ldd	r27, Z+36	; 0x24
    371e:	f9 01       	movw	r30, r18
    3720:	b5 8b       	std	Z+21, r27	; 0x15
    3722:	a4 8b       	std	Z+20, r26	; 0x14
#endif
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    3724:	93 8f       	std	Z+27, r25	; 0x1b
    3726:	82 8f       	std	Z+26, r24	; 0x1a
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);
    3728:	f6 01       	movw	r30, r12
    372a:	85 a1       	ldd	r24, Z+37	; 0x25
    372c:	96 a1       	ldd	r25, Z+38	; 0x26
    372e:	a7 a1       	ldd	r26, Z+39	; 0x27
    3730:	b0 a5       	ldd	r27, Z+40	; 0x28
    3732:	8d 8f       	std	Y+29, r24	; 0x1d
    3734:	9e 8f       	std	Y+30, r25	; 0x1e
    3736:	af 8f       	std	Y+31, r26	; 0x1f
    3738:	b8 a3       	std	Y+32, r27	; 0x20

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
    373a:	f9 a1       	ldd	r31, Y+33	; 0x21
    373c:	0f 2f       	mov	r16, r31
    373e:	10 e0       	ldi	r17, 0x00	; 0
    3740:	f5 e0       	ldi	r31, 0x05	; 5
    3742:	00 0f       	add	r16, r16
    3744:	11 1f       	adc	r17, r17
    3746:	fa 95       	dec	r31
    3748:	e1 f7       	brne	.-8      	; 0x3742 <fat_write_dir_entry+0x1a4>
    374a:	20 e0       	ldi	r18, 0x00	; 0
    374c:	30 e0       	ldi	r19, 0x00	; 0
    374e:	40 e0       	ldi	r20, 0x00	; 0
    3750:	50 e0       	ldi	r21, 0x00	; 0
    3752:	ba 01       	movw	r22, r20
    3754:	aa a0       	ldd	r10, Y+34	; 0x22
    3756:	a0 0e       	add	r10, r16
    3758:	91 e0       	ldi	r25, 0x01	; 1
    375a:	a0 16       	cp	r10, r16
    375c:	08 f0       	brcs	.+2      	; 0x3760 <fat_write_dir_entry+0x1c2>
    375e:	90 e0       	ldi	r25, 0x00	; 0
    3760:	81 2f       	mov	r24, r17
    3762:	82 0d       	add	r24, r2
    3764:	b1 e0       	ldi	r27, 0x01	; 1
    3766:	81 17       	cp	r24, r17
    3768:	08 f0       	brcs	.+2      	; 0x376c <fat_write_dir_entry+0x1ce>
    376a:	b0 e0       	ldi	r27, 0x00	; 0
    376c:	b9 2e       	mov	r11, r25
    376e:	b8 0e       	add	r11, r24
    3770:	91 e0       	ldi	r25, 0x01	; 1
    3772:	b8 16       	cp	r11, r24
    3774:	08 f0       	brcs	.+2      	; 0x3778 <fat_write_dir_entry+0x1da>
    3776:	90 e0       	ldi	r25, 0x00	; 0
    3778:	b9 2b       	or	r27, r25
    377a:	a1 e0       	ldi	r26, 0x01	; 1
    377c:	32 16       	cp	r3, r18
    377e:	08 f0       	brcs	.+2      	; 0x3782 <fat_write_dir_entry+0x1e4>
    3780:	a0 e0       	ldi	r26, 0x00	; 0
    3782:	b3 0d       	add	r27, r3
    3784:	81 e0       	ldi	r24, 0x01	; 1
    3786:	b3 15       	cp	r27, r3
    3788:	08 f0       	brcs	.+2      	; 0x378c <fat_write_dir_entry+0x1ee>
    378a:	80 e0       	ldi	r24, 0x00	; 0
    378c:	a8 2b       	or	r26, r24
    378e:	f1 e0       	ldi	r31, 0x01	; 1
    3790:	43 16       	cp	r4, r19
    3792:	08 f0       	brcs	.+2      	; 0x3796 <fat_write_dir_entry+0x1f8>
    3794:	f0 e0       	ldi	r31, 0x00	; 0
    3796:	a4 0d       	add	r26, r4
    3798:	81 e0       	ldi	r24, 0x01	; 1
    379a:	a4 15       	cp	r26, r4
    379c:	08 f0       	brcs	.+2      	; 0x37a0 <fat_write_dir_entry+0x202>
    379e:	80 e0       	ldi	r24, 0x00	; 0
    37a0:	f8 2b       	or	r31, r24
    37a2:	e1 e0       	ldi	r30, 0x01	; 1
    37a4:	54 16       	cp	r5, r20
    37a6:	08 f0       	brcs	.+2      	; 0x37aa <fat_write_dir_entry+0x20c>
    37a8:	e0 e0       	ldi	r30, 0x00	; 0
    37aa:	f5 0d       	add	r31, r5
    37ac:	81 e0       	ldi	r24, 0x01	; 1
    37ae:	f5 15       	cp	r31, r5
    37b0:	08 f0       	brcs	.+2      	; 0x37b4 <fat_write_dir_entry+0x216>
    37b2:	80 e0       	ldi	r24, 0x00	; 0
    37b4:	e8 2b       	or	r30, r24
    37b6:	81 e0       	ldi	r24, 0x01	; 1
    37b8:	65 16       	cp	r6, r21
    37ba:	08 f0       	brcs	.+2      	; 0x37be <fat_write_dir_entry+0x220>
    37bc:	80 e0       	ldi	r24, 0x00	; 0
    37be:	e6 0d       	add	r30, r6
    37c0:	91 e0       	ldi	r25, 0x01	; 1
    37c2:	e6 15       	cp	r30, r6
    37c4:	08 f0       	brcs	.+2      	; 0x37c8 <fat_write_dir_entry+0x22a>
    37c6:	90 e0       	ldi	r25, 0x00	; 0
    37c8:	89 2b       	or	r24, r25
    37ca:	91 e0       	ldi	r25, 0x01	; 1
    37cc:	76 16       	cp	r7, r22
    37ce:	08 f0       	brcs	.+2      	; 0x37d2 <fat_write_dir_entry+0x234>
    37d0:	90 e0       	ldi	r25, 0x00	; 0
    37d2:	87 0d       	add	r24, r7
    37d4:	21 e0       	ldi	r18, 0x01	; 1
    37d6:	87 15       	cp	r24, r7
    37d8:	08 f0       	brcs	.+2      	; 0x37dc <fat_write_dir_entry+0x23e>
    37da:	20 e0       	ldi	r18, 0x00	; 0
    37dc:	92 2b       	or	r25, r18
    37de:	95 01       	movw	r18, r10
    37e0:	4b 2f       	mov	r20, r27
    37e2:	5a 2f       	mov	r21, r26
    37e4:	6f 2f       	mov	r22, r31
    37e6:	7e 2f       	mov	r23, r30
    37e8:	ab a1       	ldd	r26, Y+35	; 0x23
    37ea:	9a 0f       	add	r25, r26
    37ec:	8e 01       	movw	r16, r28
    37ee:	0f 5f       	subi	r16, 0xFF	; 255
    37f0:	1f 4f       	sbci	r17, 0xFF	; 255
    37f2:	e0 e2       	ldi	r30, 0x20	; 32
    37f4:	ee 2e       	mov	r14, r30
    37f6:	f1 2c       	mov	r15, r1
    37f8:	ec a1       	ldd	r30, Y+36	; 0x24
    37fa:	fd a1       	ldd	r31, Y+37	; 0x25
    37fc:	09 95       	icall
    37fe:	88 23       	and	r24, r24
    3800:	09 f4       	brne	.+2      	; 0x3804 <fat_write_dir_entry+0x266>
    3802:	9b c0       	rjmp	.+310    	; 0x393a <fat_write_dir_entry+0x39c>
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    3804:	b9 80       	ldd	r11, Y+1	; 0x01
    3806:	fe 01       	movw	r30, r28
    3808:	32 96       	adiw	r30, 0x02	; 2
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
    380a:	ce 01       	movw	r24, r28
    380c:	0c 96       	adiw	r24, 0x0c	; 12
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    380e:	2b 2d       	mov	r18, r11
    3810:	27 95       	ror	r18
    3812:	22 27       	eor	r18, r18
    3814:	27 95       	ror	r18
    3816:	b6 94       	lsr	r11
    3818:	b2 2a       	or	r11, r18
    381a:	21 91       	ld	r18, Z+
    381c:	b2 0e       	add	r11, r18
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    
    /* calculate checksum of 8.3 name */
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
    381e:	e8 17       	cp	r30, r24
    3820:	f9 07       	cpc	r31, r25
    3822:	a9 f7       	brne	.-22     	; 0x380e <fat_write_dir_entry+0x270>
    3824:	a9 a0       	ldd	r10, Y+33	; 0x21
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    {
        memset(buffer, 0xff, sizeof(buffer));
    3826:	4e 01       	movw	r8, r28
    3828:	08 94       	sec
    382a:	81 1c       	adc	r8, r1
    382c:	91 1c       	adc	r9, r1
    382e:	80 c0       	rjmp	.+256    	; 0x3930 <fat_write_dir_entry+0x392>
    3830:	c4 01       	movw	r24, r8
    3832:	6f ef       	ldi	r22, 0xFF	; 255
    3834:	70 e0       	ldi	r23, 0x00	; 0
    3836:	40 e2       	ldi	r20, 0x20	; 32
    3838:	50 e0       	ldi	r21, 0x00	; 0
    383a:	0e 94 f4 32 	call	0x65e8	; 0x65e8 <memset>
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
    383e:	8a 2d       	mov	r24, r10
    3840:	90 e0       	ldi	r25, 0x00	; 0
    3842:	01 97       	sbiw	r24, 0x01	; 1
    3844:	2d e0       	ldi	r18, 0x0D	; 13
    3846:	30 e0       	ldi	r19, 0x00	; 0
    3848:	82 9f       	mul	r24, r18
    384a:	f0 01       	movw	r30, r0
    384c:	83 9f       	mul	r24, r19
    384e:	f0 0d       	add	r31, r0
    3850:	92 9f       	mul	r25, r18
    3852:	f0 0d       	add	r31, r0
    3854:	11 24       	eor	r1, r1
    3856:	ec 0d       	add	r30, r12
    3858:	fd 1d       	adc	r31, r13
        uint8_t i = 1;
    385a:	21 e0       	ldi	r18, 0x01	; 1
 *
 * \param[in] fs The filesystem on which to operate.
 * \param[in] dir_entry The directory entry to write.
 * \returns 0 on failure, 1 on success.
 */
uint8_t fat_write_dir_entry(const struct fat_fs_struct* fs, struct fat_dir_entry_struct* dir_entry)
    385c:	af 01       	movw	r20, r30
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
        {
            buffer[i++] = *long_name_curr;
    385e:	c4 01       	movw	r24, r8
    3860:	82 0f       	add	r24, r18
    3862:	91 1d       	adc	r25, r1
    3864:	30 81       	ld	r19, Z
    3866:	dc 01       	movw	r26, r24
    3868:	3c 93       	st	X, r19
    386a:	2f 5f       	subi	r18, 0xFF	; 255
            buffer[i++] = 0;
    386c:	c4 01       	movw	r24, r8
    386e:	82 0f       	add	r24, r18
    3870:	91 1d       	adc	r25, r1
    3872:	dc 01       	movw	r26, r24
    3874:	1c 92       	st	X, r1
    3876:	2f 5f       	subi	r18, 0xFF	; 255

            switch(i)
    3878:	2b 30       	cpi	r18, 0x0B	; 11
    387a:	19 f0       	breq	.+6      	; 0x3882 <fat_write_dir_entry+0x2e4>
    387c:	2a 31       	cpi	r18, 0x1A	; 26
    387e:	21 f4       	brne	.+8      	; 0x3888 <fat_write_dir_entry+0x2ea>
    3880:	02 c0       	rjmp	.+4      	; 0x3886 <fat_write_dir_entry+0x2e8>
            {
                case 0x0b:
                    i = 0x0e;
    3882:	2e e0       	ldi	r18, 0x0E	; 14
    3884:	01 c0       	rjmp	.+2      	; 0x3888 <fat_write_dir_entry+0x2ea>
                    break;
                case 0x1a:
                    i = 0x1c;
    3886:	2c e1       	ldi	r18, 0x1C	; 28
                    break;
    3888:	31 96       	adiw	r30, 0x01	; 1
            }

            if(!*long_name_curr++)
    388a:	da 01       	movw	r26, r20
    388c:	8c 91       	ld	r24, X
    388e:	88 23       	and	r24, r24
    3890:	11 f0       	breq	.+4      	; 0x3896 <fat_write_dir_entry+0x2f8>
        memset(buffer, 0xff, sizeof(buffer));
        
        /* set file name */
        const char* long_name_curr = name + (lfn_entry - 1) * 13;
        uint8_t i = 1;
        while(i < 0x1f)
    3892:	2f 31       	cpi	r18, 0x1F	; 31
    3894:	18 f3       	brcs	.-58     	; 0x385c <fat_write_dir_entry+0x2be>
            if(!*long_name_curr++)
                break;
        }
        
        /* set index of lfn entry */
        buffer[0x00] = lfn_entry;
    3896:	a9 82       	std	Y+1, r10	; 0x01
        if(lfn_entry == lfn_entry_count)
    3898:	b9 a1       	ldd	r27, Y+33	; 0x21
    389a:	ab 16       	cp	r10, r27
    389c:	19 f4       	brne	.+6      	; 0x38a4 <fat_write_dir_entry+0x306>
            buffer[0x00] |= FAT_DIRENTRY_LFNLAST;
    389e:	8a 2d       	mov	r24, r10
    38a0:	80 64       	ori	r24, 0x40	; 64
    38a2:	89 83       	std	Y+1, r24	; 0x01

        /* mark as lfn entry */
        buffer[0x0b] = 0x0f;
    38a4:	ef e0       	ldi	r30, 0x0F	; 15
    38a6:	ec 87       	std	Y+12, r30	; 0x0c

        /* set 8.3 checksum */
        buffer[0x0d] = checksum;
    38a8:	be 86       	std	Y+14, r11	; 0x0e

        /* clear reserved bytes */
        buffer[0x0c] = 0;
    38aa:	1d 86       	std	Y+13, r1	; 0x0d
        buffer[0x1a] = 0;
    38ac:	1b 8e       	std	Y+27, r1	; 0x1b
        buffer[0x1b] = 0;
    38ae:	1c 8e       	std	Y+28, r1	; 0x1c

        /* write entry */
        device_write(offset, buffer, sizeof(buffer));
    38b0:	2a a1       	ldd	r18, Y+34	; 0x22
    38b2:	32 2d       	mov	r19, r2
    38b4:	43 2d       	mov	r20, r3
    38b6:	54 2d       	mov	r21, r4
    38b8:	65 2d       	mov	r22, r5
    38ba:	76 2d       	mov	r23, r6
    38bc:	87 2d       	mov	r24, r7
    38be:	9b a1       	ldd	r25, Y+35	; 0x23
    38c0:	84 01       	movw	r16, r8
    38c2:	b0 e2       	ldi	r27, 0x20	; 32
    38c4:	eb 2e       	mov	r14, r27
    38c6:	f1 2c       	mov	r15, r1
    38c8:	ac a1       	ldd	r26, Y+36	; 0x24
    38ca:	bd a1       	ldd	r27, Y+37	; 0x25
    38cc:	fd 01       	movw	r30, r26
    38ce:	09 95       	icall
    
        offset += sizeof(buffer);
    38d0:	7a a1       	ldd	r23, Y+34	; 0x22
    38d2:	70 5e       	subi	r23, 0xE0	; 224
    38d4:	61 e0       	ldi	r22, 0x01	; 1
    38d6:	ba a1       	ldd	r27, Y+34	; 0x22
    38d8:	7b 17       	cp	r23, r27
    38da:	08 f0       	brcs	.+2      	; 0x38de <fat_write_dir_entry+0x340>
    38dc:	60 e0       	ldi	r22, 0x00	; 0
    38de:	62 0d       	add	r22, r2
    38e0:	51 e0       	ldi	r21, 0x01	; 1
    38e2:	62 15       	cp	r22, r2
    38e4:	08 f0       	brcs	.+2      	; 0x38e8 <fat_write_dir_entry+0x34a>
    38e6:	50 e0       	ldi	r21, 0x00	; 0
    38e8:	53 0d       	add	r21, r3
    38ea:	41 e0       	ldi	r20, 0x01	; 1
    38ec:	53 15       	cp	r21, r3
    38ee:	08 f0       	brcs	.+2      	; 0x38f2 <fat_write_dir_entry+0x354>
    38f0:	40 e0       	ldi	r20, 0x00	; 0
    38f2:	44 0d       	add	r20, r4
    38f4:	31 e0       	ldi	r19, 0x01	; 1
    38f6:	44 15       	cp	r20, r4
    38f8:	08 f0       	brcs	.+2      	; 0x38fc <fat_write_dir_entry+0x35e>
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	35 0d       	add	r19, r5
    38fe:	21 e0       	ldi	r18, 0x01	; 1
    3900:	35 15       	cp	r19, r5
    3902:	08 f0       	brcs	.+2      	; 0x3906 <fat_write_dir_entry+0x368>
    3904:	20 e0       	ldi	r18, 0x00	; 0
    3906:	26 0d       	add	r18, r6
    3908:	91 e0       	ldi	r25, 0x01	; 1
    390a:	26 15       	cp	r18, r6
    390c:	08 f0       	brcs	.+2      	; 0x3910 <fat_write_dir_entry+0x372>
    390e:	90 e0       	ldi	r25, 0x00	; 0
    3910:	97 0d       	add	r25, r7
    3912:	81 e0       	ldi	r24, 0x01	; 1
    3914:	97 15       	cp	r25, r7
    3916:	08 f0       	brcs	.+2      	; 0x391a <fat_write_dir_entry+0x37c>
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	7a a3       	std	Y+34, r23	; 0x22
    391c:	26 2e       	mov	r2, r22
    391e:	35 2e       	mov	r3, r21
    3920:	44 2e       	mov	r4, r20
    3922:	53 2e       	mov	r5, r19
    3924:	62 2e       	mov	r6, r18
    3926:	79 2e       	mov	r7, r25
    3928:	eb a1       	ldd	r30, Y+35	; 0x23
    392a:	e8 0f       	add	r30, r24
    392c:	eb a3       	std	Y+35, r30	; 0x23
    uint8_t checksum = buffer[0];
    for(uint8_t i = 1; i < 11; ++i)
        checksum = ((checksum >> 1) | (checksum << 7)) + buffer[i];
    
    /* write lfn entries */
    for(uint8_t lfn_entry = lfn_entry_count; lfn_entry > 0; --lfn_entry)
    392e:	aa 94       	dec	r10
    3930:	aa 20       	and	r10, r10
    3932:	09 f0       	breq	.+2      	; 0x3936 <fat_write_dir_entry+0x398>
    3934:	7d cf       	rjmp	.-262    	; 0x3830 <fat_write_dir_entry+0x292>
        device_write(offset, buffer, sizeof(buffer));
    
        offset += sizeof(buffer);
    }
    
    return 1;
    3936:	81 e0       	ldi	r24, 0x01	; 1
    3938:	01 c0       	rjmp	.+2      	; 0x393c <fat_write_dir_entry+0x39e>
    *((uint16_t*) &buffer[0x1a]) = htol16(dir_entry->cluster);
    *((uint32_t*) &buffer[0x1c]) = htol32(dir_entry->file_size);

    /* write to disk */
    if(!device_write(offset + (uint16_t) lfn_entry_count * 32, buffer, sizeof(buffer)))
        return 0;
    393a:	80 e0       	ldi	r24, 0x00	; 0
    
        offset += sizeof(buffer);
    }
    
    return 1;
}
    393c:	a5 96       	adiw	r28, 0x25	; 37
    393e:	0f b6       	in	r0, 0x3f	; 63
    3940:	f8 94       	cli
    3942:	de bf       	out	0x3e, r29	; 62
    3944:	0f be       	out	0x3f, r0	; 63
    3946:	cd bf       	out	0x3d, r28	; 61
    3948:	cf 91       	pop	r28
    394a:	df 91       	pop	r29
    394c:	1f 91       	pop	r17
    394e:	0f 91       	pop	r16
    3950:	ff 90       	pop	r15
    3952:	ef 90       	pop	r14
    3954:	df 90       	pop	r13
    3956:	cf 90       	pop	r12
    3958:	bf 90       	pop	r11
    395a:	af 90       	pop	r10
    395c:	9f 90       	pop	r9
    395e:	8f 90       	pop	r8
    3960:	7f 90       	pop	r7
    3962:	6f 90       	pop	r6
    3964:	5f 90       	pop	r5
    3966:	4f 90       	pop	r4
    3968:	3f 90       	pop	r3
    396a:	2f 90       	pop	r2
    396c:	08 95       	ret

0000396e <fat_find_offset_for_dir_entry.clone.0>:
 * \param[in] fs The filesystem on which to operate.
 * \param[in] parent The directory in which to search.
 * \param[in] dir_entry The directory entry for which to search space.
 * \returns 0 on failure, a device offset on success.
 */
offset_t fat_find_offset_for_dir_entry(const struct fat_fs_struct* fs, const struct fat_dir_struct* parent, const struct fat_dir_entry_struct* dir_entry)
    396e:	2f 92       	push	r2
    3970:	3f 92       	push	r3
    3972:	4f 92       	push	r4
    3974:	5f 92       	push	r5
    3976:	6f 92       	push	r6
    3978:	7f 92       	push	r7
    397a:	8f 92       	push	r8
    397c:	9f 92       	push	r9
    397e:	af 92       	push	r10
    3980:	bf 92       	push	r11
    3982:	cf 92       	push	r12
    3984:	df 92       	push	r13
    3986:	ef 92       	push	r14
    3988:	ff 92       	push	r15
    398a:	0f 93       	push	r16
    398c:	1f 93       	push	r17
    398e:	df 93       	push	r29
    3990:	cf 93       	push	r28
    3992:	cd b7       	in	r28, 0x3d	; 61
    3994:	de b7       	in	r29, 0x3e	; 62
    3996:	65 97       	sbiw	r28, 0x15	; 21
    3998:	0f b6       	in	r0, 0x3f	; 63
    399a:	f8 94       	cli
    399c:	de bf       	out	0x3e, r29	; 62
    399e:	0f be       	out	0x3f, r0	; 63
    39a0:	cd bf       	out	0x3d, r28	; 61
    39a2:	9b 83       	std	Y+3, r25	; 0x03
    39a4:	8a 83       	std	Y+2, r24	; 0x02
    39a6:	9b 01       	movw	r18, r22
{
    if(!fs || !dir_entry)
    39a8:	00 97       	sbiw	r24, 0x00	; 0
    39aa:	09 f4       	brne	.+2      	; 0x39ae <fat_find_offset_for_dir_entry.clone.0+0x40>
    39ac:	37 c2       	rjmp	.+1134   	; 0x3e1c <fat_find_offset_for_dir_entry.clone.0+0x4ae>
    39ae:	41 15       	cp	r20, r1
    39b0:	51 05       	cpc	r21, r1
    39b2:	09 f4       	brne	.+2      	; 0x39b6 <fat_find_offset_for_dir_entry.clone.0+0x48>
    39b4:	33 c2       	rjmp	.+1126   	; 0x3e1c <fat_find_offset_for_dir_entry.clone.0+0x4ae>
        return 0;

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    39b6:	fa 01       	movw	r30, r20
    39b8:	01 90       	ld	r0, Z+
    39ba:	00 20       	and	r0, r0
    39bc:	e9 f7       	brne	.-6      	; 0x39b8 <fat_find_offset_for_dir_entry.clone.0+0x4a>
    39be:	cf 01       	movw	r24, r30
    39c0:	84 1b       	sub	r24, r20
    39c2:	95 0b       	sbc	r25, r21
    39c4:	0b 96       	adiw	r24, 0x0b	; 11
    39c6:	6d e0       	ldi	r22, 0x0D	; 13
    39c8:	70 e0       	ldi	r23, 0x00	; 0
    39ca:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__udivmodhi4>
    39ce:	6f 5f       	subi	r22, 0xFF	; 255
    39d0:	6d 8b       	std	Y+21, r22	; 0x15
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    39d2:	d9 01       	movw	r26, r18
    39d4:	8d 91       	ld	r24, X+
    39d6:	9d 91       	ld	r25, X+
    39d8:	0d 90       	ld	r0, X+
    39da:	bc 91       	ld	r27, X
    39dc:	a0 2d       	mov	r26, r0
    39de:	8c 83       	std	Y+4, r24	; 0x04
    39e0:	9d 83       	std	Y+5, r25	; 0x05
    39e2:	ae 83       	std	Y+6, r26	; 0x06
    39e4:	bf 83       	std	Y+7, r27	; 0x07
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
#if FAT_FAT32_SUPPORT
    uint8_t is_fat32 = (fs->partition->type == PARTITION_TYPE_FAT32);
    39e6:	aa 81       	ldd	r26, Y+2	; 0x02
    39e8:	bb 81       	ldd	r27, Y+3	; 0x03
    39ea:	ed 91       	ld	r30, X+
    39ec:	fc 91       	ld	r31, X
    39ee:	11 97       	sbiw	r26, 0x01	; 1
    39f0:	80 85       	ldd	r24, Z+8	; 0x08
#endif

    if(cluster_num == 0)
    39f2:	2c 81       	ldd	r18, Y+4	; 0x04
    39f4:	3d 81       	ldd	r19, Y+5	; 0x05
    39f6:	4e 81       	ldd	r20, Y+6	; 0x06
    39f8:	5f 81       	ldd	r21, Y+7	; 0x07
    39fa:	21 15       	cp	r18, r1
    39fc:	31 05       	cpc	r19, r1
    39fe:	41 05       	cpc	r20, r1
    3a00:	51 05       	cpc	r21, r1
    3a02:	d1 f5       	brne	.+116    	; 0x3a78 <fat_find_offset_for_dir_entry.clone.0+0x10a>
    {
#if FAT_FAT32_SUPPORT
        if(is_fat32)
    3a04:	8b 30       	cpi	r24, 0x0B	; 11
    3a06:	59 f4       	brne	.+22     	; 0x3a1e <fat_find_offset_for_dir_entry.clone.0+0xb0>
        {
            cluster_num = fs->header.root_dir_cluster;
    3a08:	9a 96       	adiw	r26, 0x2a	; 42
    3a0a:	8d 91       	ld	r24, X+
    3a0c:	9d 91       	ld	r25, X+
    3a0e:	0d 90       	ld	r0, X+
    3a10:	bc 91       	ld	r27, X
    3a12:	a0 2d       	mov	r26, r0
    3a14:	8c 83       	std	Y+4, r24	; 0x04
    3a16:	9d 83       	std	Y+5, r25	; 0x05
    3a18:	ae 83       	std	Y+6, r26	; 0x06
    3a1a:	bf 83       	std	Y+7, r27	; 0x07
    3a1c:	2d c0       	rjmp	.+90     	; 0x3a78 <fat_find_offset_for_dir_entry.clone.0+0x10a>
        }
        else
#endif
        {
            /* we read/write from the root directory entry */
            offset = fs->header.root_dir_offset;
    3a1e:	ea 81       	ldd	r30, Y+2	; 0x02
    3a20:	fb 81       	ldd	r31, Y+3	; 0x03
    3a22:	22 a0       	ldd	r2, Z+34	; 0x22
    3a24:	d3 a0       	ldd	r13, Z+35	; 0x23
    3a26:	c4 a0       	ldd	r12, Z+36	; 0x24
    3a28:	b5 a0       	ldd	r11, Z+37	; 0x25
    3a2a:	a6 a0       	ldd	r10, Z+38	; 0x26
    3a2c:	97 a0       	ldd	r9, Z+39	; 0x27
    3a2e:	80 a4       	ldd	r8, Z+40	; 0x28
    3a30:	71 a4       	ldd	r7, Z+41	; 0x29
            offset_to = fs->header.cluster_zero_offset;
    3a32:	f2 8d       	ldd	r31, Z+26	; 0x1a
    3a34:	fd 87       	std	Y+13, r31	; 0x0d
    3a36:	aa 81       	ldd	r26, Y+2	; 0x02
    3a38:	bb 81       	ldd	r27, Y+3	; 0x03
    3a3a:	5b 96       	adiw	r26, 0x1b	; 27
    3a3c:	bc 91       	ld	r27, X
    3a3e:	be 87       	std	Y+14, r27	; 0x0e
    3a40:	ea 81       	ldd	r30, Y+2	; 0x02
    3a42:	fb 81       	ldd	r31, Y+3	; 0x03
    3a44:	f4 8d       	ldd	r31, Z+28	; 0x1c
    3a46:	ff 87       	std	Y+15, r31	; 0x0f
    3a48:	aa 81       	ldd	r26, Y+2	; 0x02
    3a4a:	bb 81       	ldd	r27, Y+3	; 0x03
    3a4c:	5d 96       	adiw	r26, 0x1d	; 29
    3a4e:	bc 91       	ld	r27, X
    3a50:	b8 8b       	std	Y+16, r27	; 0x10
    3a52:	ea 81       	ldd	r30, Y+2	; 0x02
    3a54:	fb 81       	ldd	r31, Y+3	; 0x03
    3a56:	f6 8d       	ldd	r31, Z+30	; 0x1e
    3a58:	f9 8b       	std	Y+17, r31	; 0x11
    3a5a:	aa 81       	ldd	r26, Y+2	; 0x02
    3a5c:	bb 81       	ldd	r27, Y+3	; 0x03
    3a5e:	5f 96       	adiw	r26, 0x1f	; 31
    3a60:	bc 91       	ld	r27, X
    3a62:	ba 8b       	std	Y+18, r27	; 0x12
    3a64:	ea 81       	ldd	r30, Y+2	; 0x02
    3a66:	fb 81       	ldd	r31, Y+3	; 0x03
    3a68:	f0 a1       	ldd	r31, Z+32	; 0x20
    3a6a:	fb 8b       	std	Y+19, r31	; 0x13
    3a6c:	aa 81       	ldd	r26, Y+2	; 0x02
    3a6e:	bb 81       	ldd	r27, Y+3	; 0x03
    3a70:	91 96       	adiw	r26, 0x21	; 33
    3a72:	bc 91       	ld	r27, X
    3a74:	bc 8b       	std	Y+20, r27	; 0x14
    3a76:	10 c0       	rjmp	.+32     	; 0x3a98 <fat_find_offset_for_dir_entry.clone.0+0x12a>
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    offset_t offset = 0;
    offset_t offset_to = 0;
    3a78:	1d 86       	std	Y+13, r1	; 0x0d
    3a7a:	1e 86       	std	Y+14, r1	; 0x0e
    3a7c:	1f 86       	std	Y+15, r1	; 0x0f
    3a7e:	18 8a       	std	Y+16, r1	; 0x10
    3a80:	19 8a       	std	Y+17, r1	; 0x11
    3a82:	1a 8a       	std	Y+18, r1	; 0x12
    3a84:	1b 8a       	std	Y+19, r1	; 0x13
    3a86:	1c 8a       	std	Y+20, r1	; 0x14

    /* search for a place where to write the directory entry to disk */
    uint8_t free_dir_entries_needed = (strlen(dir_entry->long_name) + 12) / 13 + 1;
    uint8_t free_dir_entries_found = 0;
    cluster_t cluster_num = parent->dir_entry.cluster;
    offset_t dir_entry_offset = 0;
    3a88:	22 24       	eor	r2, r2
    3a8a:	dd 24       	eor	r13, r13
    3a8c:	cc 24       	eor	r12, r12
    3a8e:	bb 24       	eor	r11, r11
    3a90:	aa 24       	eor	r10, r10
    3a92:	99 24       	eor	r9, r9
    3a94:	88 24       	eor	r8, r8
    3a96:	77 24       	eor	r7, r7
        }
        else
        {
            offset += 32;
            dir_entry_offset = offset;
            free_dir_entries_found = 0;
    3a98:	52 2c       	mov	r5, r2
    3a9a:	4d 2c       	mov	r4, r13
    3a9c:	3c 2c       	mov	r3, r12
    3a9e:	b8 86       	std	Y+8, r11	; 0x08
    3aa0:	a9 86       	std	Y+9, r10	; 0x09
    3aa2:	9a 86       	std	Y+10, r9	; 0x0a
    3aa4:	8b 86       	std	Y+11, r8	; 0x0b
    3aa6:	67 2c       	mov	r6, r7
    3aa8:	1c 86       	std	Y+12, r1	; 0x0c
        }
    }
    
    while(1)
    {
        if(offset == offset_to)
    3aaa:	ed 85       	ldd	r30, Y+13	; 0x0d
    3aac:	2e 16       	cp	r2, r30
    3aae:	09 f0       	breq	.+2      	; 0x3ab2 <fat_find_offset_for_dir_entry.clone.0+0x144>
    3ab0:	2d c1       	rjmp	.+602    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
    3ab2:	fe 85       	ldd	r31, Y+14	; 0x0e
    3ab4:	df 16       	cp	r13, r31
    3ab6:	09 f0       	breq	.+2      	; 0x3aba <fat_find_offset_for_dir_entry.clone.0+0x14c>
    3ab8:	29 c1       	rjmp	.+594    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
    3aba:	2f 85       	ldd	r18, Y+15	; 0x0f
    3abc:	c2 16       	cp	r12, r18
    3abe:	09 f0       	breq	.+2      	; 0x3ac2 <fat_find_offset_for_dir_entry.clone.0+0x154>
    3ac0:	25 c1       	rjmp	.+586    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
    3ac2:	38 89       	ldd	r19, Y+16	; 0x10
    3ac4:	b3 16       	cp	r11, r19
    3ac6:	09 f0       	breq	.+2      	; 0x3aca <fat_find_offset_for_dir_entry.clone.0+0x15c>
    3ac8:	21 c1       	rjmp	.+578    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
    3aca:	49 89       	ldd	r20, Y+17	; 0x11
    3acc:	a4 16       	cp	r10, r20
    3ace:	09 f0       	breq	.+2      	; 0x3ad2 <fat_find_offset_for_dir_entry.clone.0+0x164>
    3ad0:	1d c1       	rjmp	.+570    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
    3ad2:	5a 89       	ldd	r21, Y+18	; 0x12
    3ad4:	95 16       	cp	r9, r21
    3ad6:	09 f0       	breq	.+2      	; 0x3ada <fat_find_offset_for_dir_entry.clone.0+0x16c>
    3ad8:	19 c1       	rjmp	.+562    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
    3ada:	8b 89       	ldd	r24, Y+19	; 0x13
    3adc:	88 16       	cp	r8, r24
    3ade:	09 f0       	breq	.+2      	; 0x3ae2 <fat_find_offset_for_dir_entry.clone.0+0x174>
    3ae0:	15 c1       	rjmp	.+554    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
    3ae2:	9c 89       	ldd	r25, Y+20	; 0x14
    3ae4:	79 16       	cp	r7, r25
    3ae6:	09 f0       	breq	.+2      	; 0x3aea <fat_find_offset_for_dir_entry.clone.0+0x17c>
    3ae8:	11 c1       	rjmp	.+546    	; 0x3d0c <fat_find_offset_for_dir_entry.clone.0+0x39e>
        {
            if(cluster_num == 0)
    3aea:	2c 81       	ldd	r18, Y+4	; 0x04
    3aec:	3d 81       	ldd	r19, Y+5	; 0x05
    3aee:	4e 81       	ldd	r20, Y+6	; 0x06
    3af0:	5f 81       	ldd	r21, Y+7	; 0x07
    3af2:	21 15       	cp	r18, r1
    3af4:	31 05       	cpc	r19, r1
    3af6:	41 05       	cpc	r20, r1
    3af8:	51 05       	cpc	r21, r1
    3afa:	09 f4       	brne	.+2      	; 0x3afe <fat_find_offset_for_dir_entry.clone.0+0x190>
    3afc:	8f c1       	rjmp	.+798    	; 0x3e1c <fat_find_offset_for_dir_entry.clone.0+0x4ae>
                /* We iterated through the whole root directory and
                 * could not find enough space for the directory entry.
                 */
                return 0;

            if(offset)
    3afe:	d2 28       	or	r13, r2
    3b00:	dc 28       	or	r13, r12
    3b02:	db 28       	or	r13, r11
    3b04:	da 28       	or	r13, r10
    3b06:	d9 28       	or	r13, r9
    3b08:	d8 28       	or	r13, r8
    3b0a:	d7 28       	or	r13, r7
    3b0c:	09 f4       	brne	.+2      	; 0x3b10 <fat_find_offset_for_dir_entry.clone.0+0x1a2>
    3b0e:	ab c0       	rjmp	.+342    	; 0x3c66 <fat_find_offset_for_dir_entry.clone.0+0x2f8>
            {
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
    3b10:	8a 81       	ldd	r24, Y+2	; 0x02
    3b12:	9b 81       	ldd	r25, Y+3	; 0x03
    3b14:	ba 01       	movw	r22, r20
    3b16:	a9 01       	movw	r20, r18
    3b18:	0e 94 40 12 	call	0x2480	; 0x2480 <fat_get_next_cluster>
                if(!cluster_next)
    3b1c:	61 15       	cp	r22, r1
    3b1e:	71 05       	cpc	r23, r1
    3b20:	81 05       	cpc	r24, r1
    3b22:	91 05       	cpc	r25, r1
    3b24:	09 f0       	breq	.+2      	; 0x3b28 <fat_find_offset_for_dir_entry.clone.0+0x1ba>
    3b26:	9b c0       	rjmp	.+310    	; 0x3c5e <fat_find_offset_for_dir_entry.clone.0+0x2f0>
                {
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
    3b28:	8a 81       	ldd	r24, Y+2	; 0x02
    3b2a:	9b 81       	ldd	r25, Y+3	; 0x03
    3b2c:	4c 81       	ldd	r20, Y+4	; 0x04
    3b2e:	5d 81       	ldd	r21, Y+5	; 0x05
    3b30:	6e 81       	ldd	r22, Y+6	; 0x06
    3b32:	7f 81       	ldd	r23, Y+7	; 0x07
    3b34:	01 e0       	ldi	r16, 0x01	; 1
    3b36:	10 e0       	ldi	r17, 0x00	; 0
    3b38:	20 e0       	ldi	r18, 0x00	; 0
    3b3a:	30 e0       	ldi	r19, 0x00	; 0
    3b3c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <fat_append_clusters>
    3b40:	6c 83       	std	Y+4, r22	; 0x04
    3b42:	7d 83       	std	Y+5, r23	; 0x05
    3b44:	8e 83       	std	Y+6, r24	; 0x06
    3b46:	9f 83       	std	Y+7, r25	; 0x07
                    if(!cluster_next)
    3b48:	61 15       	cp	r22, r1
    3b4a:	71 05       	cpc	r23, r1
    3b4c:	81 05       	cpc	r24, r1
    3b4e:	91 05       	cpc	r25, r1
    3b50:	09 f4       	brne	.+2      	; 0x3b54 <fat_find_offset_for_dir_entry.clone.0+0x1e6>
    3b52:	64 c1       	rjmp	.+712    	; 0x3e1c <fat_find_offset_for_dir_entry.clone.0+0x4ae>
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;
    3b54:	dc 01       	movw	r26, r24
    3b56:	cb 01       	movw	r24, r22
    3b58:	02 97       	sbiw	r24, 0x02	; 2
    3b5a:	a1 09       	sbc	r26, r1
    3b5c:	b1 09       	sbc	r27, r1
    3b5e:	5c 01       	movw	r10, r24
    3b60:	6d 01       	movw	r12, r26
    3b62:	aa 81       	ldd	r26, Y+2	; 0x02
    3b64:	bb 81       	ldd	r27, Y+3	; 0x03
    3b66:	58 96       	adiw	r26, 0x18	; 24
    3b68:	2d 90       	ld	r2, X+
    3b6a:	3c 90       	ld	r3, X
    3b6c:	59 97       	sbiw	r26, 0x19	; 25
    3b6e:	95 01       	movw	r18, r10
    3b70:	a6 01       	movw	r20, r12
    3b72:	60 e0       	ldi	r22, 0x00	; 0
    3b74:	70 e0       	ldi	r23, 0x00	; 0
    3b76:	80 e0       	ldi	r24, 0x00	; 0
    3b78:	90 e0       	ldi	r25, 0x00	; 0
    3b7a:	51 01       	movw	r10, r2
    3b7c:	cc 24       	eor	r12, r12
    3b7e:	dd 24       	eor	r13, r13
    3b80:	ee 24       	eor	r14, r14
    3b82:	ff 24       	eor	r15, r15
    3b84:	00 e0       	ldi	r16, 0x00	; 0
    3b86:	10 e0       	ldi	r17, 0x00	; 0
    3b88:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
                    cluster_next = fat_append_clusters(fs, cluster_num, 1);
                    if(!cluster_next)
                        return 0;

                    /* we appended a new cluster and know it is free */
                    dir_entry_offset = fs->header.cluster_zero_offset +
    3b8c:	ea 81       	ldd	r30, Y+2	; 0x02
    3b8e:	fb 81       	ldd	r31, Y+3	; 0x03
    3b90:	52 8c       	ldd	r5, Z+26	; 0x1a
    3b92:	b3 8d       	ldd	r27, Z+27	; 0x1b
    3b94:	a4 8d       	ldd	r26, Z+28	; 0x1c
    3b96:	a5 8c       	ldd	r10, Z+29	; 0x1d
    3b98:	96 8c       	ldd	r9, Z+30	; 0x1e
    3b9a:	b7 8c       	ldd	r11, Z+31	; 0x1f
    3b9c:	c0 a0       	ldd	r12, Z+32	; 0x20
    3b9e:	d1 a0       	ldd	r13, Z+33	; 0x21
    3ba0:	52 0e       	add	r5, r18
    3ba2:	11 e0       	ldi	r17, 0x01	; 1
    3ba4:	52 16       	cp	r5, r18
    3ba6:	08 f0       	brcs	.+2      	; 0x3baa <fat_find_offset_for_dir_entry.clone.0+0x23c>
    3ba8:	10 e0       	ldi	r17, 0x00	; 0
    3baa:	b3 0f       	add	r27, r19
    3bac:	21 e0       	ldi	r18, 0x01	; 1
    3bae:	b3 17       	cp	r27, r19
    3bb0:	08 f0       	brcs	.+2      	; 0x3bb4 <fat_find_offset_for_dir_entry.clone.0+0x246>
    3bb2:	20 e0       	ldi	r18, 0x00	; 0
    3bb4:	41 2e       	mov	r4, r17
    3bb6:	4b 0e       	add	r4, r27
    3bb8:	31 e0       	ldi	r19, 0x01	; 1
    3bba:	4b 16       	cp	r4, r27
    3bbc:	08 f0       	brcs	.+2      	; 0x3bc0 <fat_find_offset_for_dir_entry.clone.0+0x252>
    3bbe:	30 e0       	ldi	r19, 0x00	; 0
    3bc0:	23 2b       	or	r18, r19
    3bc2:	a4 0f       	add	r26, r20
    3bc4:	31 e0       	ldi	r19, 0x01	; 1
    3bc6:	a4 17       	cp	r26, r20
    3bc8:	08 f0       	brcs	.+2      	; 0x3bcc <fat_find_offset_for_dir_entry.clone.0+0x25e>
    3bca:	30 e0       	ldi	r19, 0x00	; 0
    3bcc:	32 2e       	mov	r3, r18
    3bce:	3a 0e       	add	r3, r26
    3bd0:	21 e0       	ldi	r18, 0x01	; 1
    3bd2:	3a 16       	cp	r3, r26
    3bd4:	08 f0       	brcs	.+2      	; 0x3bd8 <fat_find_offset_for_dir_entry.clone.0+0x26a>
    3bd6:	20 e0       	ldi	r18, 0x00	; 0
    3bd8:	32 2b       	or	r19, r18
    3bda:	fa 2d       	mov	r31, r10
    3bdc:	f5 0f       	add	r31, r21
    3bde:	21 e0       	ldi	r18, 0x01	; 1
    3be0:	f5 17       	cp	r31, r21
    3be2:	08 f0       	brcs	.+2      	; 0x3be6 <fat_find_offset_for_dir_entry.clone.0+0x278>
    3be4:	20 e0       	ldi	r18, 0x00	; 0
    3be6:	a3 2f       	mov	r26, r19
    3be8:	af 0f       	add	r26, r31
    3bea:	31 e0       	ldi	r19, 0x01	; 1
    3bec:	af 17       	cp	r26, r31
    3bee:	08 f0       	brcs	.+2      	; 0x3bf2 <fat_find_offset_for_dir_entry.clone.0+0x284>
    3bf0:	30 e0       	ldi	r19, 0x00	; 0
    3bf2:	23 2b       	or	r18, r19
    3bf4:	e9 2d       	mov	r30, r9
    3bf6:	e6 0f       	add	r30, r22
    3bf8:	31 e0       	ldi	r19, 0x01	; 1
    3bfa:	e6 17       	cp	r30, r22
    3bfc:	08 f0       	brcs	.+2      	; 0x3c00 <fat_find_offset_for_dir_entry.clone.0+0x292>
    3bfe:	30 e0       	ldi	r19, 0x00	; 0
    3c00:	62 2f       	mov	r22, r18
    3c02:	6e 0f       	add	r22, r30
    3c04:	21 e0       	ldi	r18, 0x01	; 1
    3c06:	6e 17       	cp	r22, r30
    3c08:	08 f0       	brcs	.+2      	; 0x3c0c <fat_find_offset_for_dir_entry.clone.0+0x29e>
    3c0a:	20 e0       	ldi	r18, 0x00	; 0
    3c0c:	32 2b       	or	r19, r18
    3c0e:	57 2f       	mov	r21, r23
    3c10:	5b 0d       	add	r21, r11
    3c12:	21 e0       	ldi	r18, 0x01	; 1
    3c14:	57 17       	cp	r21, r23
    3c16:	08 f0       	brcs	.+2      	; 0x3c1a <fat_find_offset_for_dir_entry.clone.0+0x2ac>
    3c18:	20 e0       	ldi	r18, 0x00	; 0
    3c1a:	35 0f       	add	r19, r21
    3c1c:	41 e0       	ldi	r20, 0x01	; 1
    3c1e:	35 17       	cp	r19, r21
    3c20:	08 f0       	brcs	.+2      	; 0x3c24 <fat_find_offset_for_dir_entry.clone.0+0x2b6>
    3c22:	40 e0       	ldi	r20, 0x00	; 0
    3c24:	24 2b       	or	r18, r20
    3c26:	48 2f       	mov	r20, r24
    3c28:	4c 0d       	add	r20, r12
    3c2a:	51 e0       	ldi	r21, 0x01	; 1
    3c2c:	48 17       	cp	r20, r24
    3c2e:	08 f0       	brcs	.+2      	; 0x3c32 <fat_find_offset_for_dir_entry.clone.0+0x2c4>
    3c30:	50 e0       	ldi	r21, 0x00	; 0
    3c32:	82 2f       	mov	r24, r18
    3c34:	84 0f       	add	r24, r20
    3c36:	21 e0       	ldi	r18, 0x01	; 1
    3c38:	84 17       	cp	r24, r20
    3c3a:	08 f0       	brcs	.+2      	; 0x3c3e <fat_find_offset_for_dir_entry.clone.0+0x2d0>
    3c3c:	20 e0       	ldi	r18, 0x00	; 0
    3c3e:	65 2e       	mov	r6, r21
    3c40:	62 2a       	or	r6, r18
    3c42:	d9 0e       	add	r13, r25
    3c44:	a8 87       	std	Y+8, r26	; 0x08
    3c46:	69 87       	std	Y+9, r22	; 0x09
    3c48:	3a 87       	std	Y+10, r19	; 0x0a
    3c4a:	8b 87       	std	Y+11, r24	; 0x0b
    3c4c:	6d 0c       	add	r6, r13
                                       (offset_t) (cluster_next - 2) * fs->header.cluster_size;

                    /* clear cluster to avoid garbage directory entries */
                    fat_clear_cluster(fs, cluster_next);
    3c4e:	8a 81       	ldd	r24, Y+2	; 0x02
    3c50:	9b 81       	ldd	r25, Y+3	; 0x03
    3c52:	4c 81       	ldd	r20, Y+4	; 0x04
    3c54:	5d 81       	ldd	r21, Y+5	; 0x05
    3c56:	6e 81       	ldd	r22, Y+6	; 0x06
    3c58:	7f 81       	ldd	r23, Y+7	; 0x07
    3c5a:	5b dc       	rcall	.-1866   	; 0x3512 <fat_clear_cluster>
    3c5c:	e7 c0       	rjmp	.+462    	; 0x3e2c <fat_find_offset_for_dir_entry.clone.0+0x4be>
                /* We reached a cluster boundary and have to
                 * switch to the next cluster.
                 */

                cluster_t cluster_next = fat_get_next_cluster(fs, cluster_num);
                if(!cluster_next)
    3c5e:	6c 83       	std	Y+4, r22	; 0x04
    3c60:	7d 83       	std	Y+5, r23	; 0x05
    3c62:	8e 83       	std	Y+6, r24	; 0x06
    3c64:	9f 83       	std	Y+7, r25	; 0x07
                    break;
                }
                cluster_num = cluster_next;
            }

            offset = fat_cluster_offset(fs, cluster_num);
    3c66:	8a 81       	ldd	r24, Y+2	; 0x02
    3c68:	9b 81       	ldd	r25, Y+3	; 0x03
    3c6a:	4c 81       	ldd	r20, Y+4	; 0x04
    3c6c:	5d 81       	ldd	r21, Y+5	; 0x05
    3c6e:	6e 81       	ldd	r22, Y+6	; 0x06
    3c70:	7f 81       	ldd	r23, Y+7	; 0x07
    3c72:	68 da       	rcall	.-2864   	; 0x3144 <fat_cluster_offset>
    3c74:	22 2e       	mov	r2, r18
    3c76:	d3 2e       	mov	r13, r19
    3c78:	c4 2e       	mov	r12, r20
    3c7a:	b5 2e       	mov	r11, r21
    3c7c:	a6 2e       	mov	r10, r22
    3c7e:	97 2e       	mov	r9, r23
    3c80:	88 2e       	mov	r8, r24
    3c82:	79 2e       	mov	r7, r25
            offset_to = offset + fs->header.cluster_size;
    3c84:	aa 81       	ldd	r26, Y+2	; 0x02
    3c86:	bb 81       	ldd	r27, Y+3	; 0x03
    3c88:	58 96       	adiw	r26, 0x18	; 24
    3c8a:	2d 91       	ld	r18, X+
    3c8c:	3c 91       	ld	r19, X
    3c8e:	59 97       	sbiw	r26, 0x19	; 25
    3c90:	e2 2d       	mov	r30, r2
    3c92:	e2 0f       	add	r30, r18
    3c94:	f1 e0       	ldi	r31, 0x01	; 1
    3c96:	e2 15       	cp	r30, r2
    3c98:	08 f0       	brcs	.+2      	; 0x3c9c <fat_find_offset_for_dir_entry.clone.0+0x32e>
    3c9a:	f0 e0       	ldi	r31, 0x00	; 0
    3c9c:	9d 2d       	mov	r25, r13
    3c9e:	93 0f       	add	r25, r19
    3ca0:	21 e0       	ldi	r18, 0x01	; 1
    3ca2:	9d 15       	cp	r25, r13
    3ca4:	08 f0       	brcs	.+2      	; 0x3ca8 <fat_find_offset_for_dir_entry.clone.0+0x33a>
    3ca6:	20 e0       	ldi	r18, 0x00	; 0
    3ca8:	6f 2f       	mov	r22, r31
    3caa:	69 0f       	add	r22, r25
    3cac:	81 e0       	ldi	r24, 0x01	; 1
    3cae:	69 17       	cp	r22, r25
    3cb0:	08 f0       	brcs	.+2      	; 0x3cb4 <fat_find_offset_for_dir_entry.clone.0+0x346>
    3cb2:	80 e0       	ldi	r24, 0x00	; 0
    3cb4:	82 2b       	or	r24, r18
    3cb6:	8c 0d       	add	r24, r12
    3cb8:	51 e0       	ldi	r21, 0x01	; 1
    3cba:	8c 15       	cp	r24, r12
    3cbc:	08 f0       	brcs	.+2      	; 0x3cc0 <fat_find_offset_for_dir_entry.clone.0+0x352>
    3cbe:	50 e0       	ldi	r21, 0x00	; 0
    3cc0:	5b 0d       	add	r21, r11
    3cc2:	41 e0       	ldi	r20, 0x01	; 1
    3cc4:	5b 15       	cp	r21, r11
    3cc6:	08 f0       	brcs	.+2      	; 0x3cca <fat_find_offset_for_dir_entry.clone.0+0x35c>
    3cc8:	40 e0       	ldi	r20, 0x00	; 0
    3cca:	4a 0d       	add	r20, r10
    3ccc:	31 e0       	ldi	r19, 0x01	; 1
    3cce:	4a 15       	cp	r20, r10
    3cd0:	08 f0       	brcs	.+2      	; 0x3cd4 <fat_find_offset_for_dir_entry.clone.0+0x366>
    3cd2:	30 e0       	ldi	r19, 0x00	; 0
    3cd4:	39 0d       	add	r19, r9
    3cd6:	21 e0       	ldi	r18, 0x01	; 1
    3cd8:	39 15       	cp	r19, r9
    3cda:	08 f0       	brcs	.+2      	; 0x3cde <fat_find_offset_for_dir_entry.clone.0+0x370>
    3cdc:	20 e0       	ldi	r18, 0x00	; 0
    3cde:	28 0d       	add	r18, r8
    3ce0:	91 e0       	ldi	r25, 0x01	; 1
    3ce2:	28 15       	cp	r18, r8
    3ce4:	08 f0       	brcs	.+2      	; 0x3ce8 <fat_find_offset_for_dir_entry.clone.0+0x37a>
    3ce6:	90 e0       	ldi	r25, 0x00	; 0
    3ce8:	ed 87       	std	Y+13, r30	; 0x0d
    3cea:	6e 87       	std	Y+14, r22	; 0x0e
    3cec:	8f 87       	std	Y+15, r24	; 0x0f
    3cee:	58 8b       	std	Y+16, r21	; 0x10
    3cf0:	49 8b       	std	Y+17, r20	; 0x11
    3cf2:	3a 8b       	std	Y+18, r19	; 0x12
    3cf4:	2b 8b       	std	Y+19, r18	; 0x13
    3cf6:	97 0d       	add	r25, r7
    3cf8:	9c 8b       	std	Y+20, r25	; 0x14
            dir_entry_offset = offset;
    3cfa:	52 2c       	mov	r5, r2
    3cfc:	4d 2c       	mov	r4, r13
    3cfe:	3c 2c       	mov	r3, r12
    3d00:	b8 86       	std	Y+8, r11	; 0x08
    3d02:	a9 86       	std	Y+9, r10	; 0x09
    3d04:	9a 86       	std	Y+10, r9	; 0x0a
    3d06:	8b 86       	std	Y+11, r8	; 0x0b
    3d08:	67 2c       	mov	r6, r7
            free_dir_entries_found = 0;
    3d0a:	1c 86       	std	Y+12, r1	; 0x0c
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
    3d0c:	aa 81       	ldd	r26, Y+2	; 0x02
    3d0e:	bb 81       	ldd	r27, Y+3	; 0x03
    3d10:	ed 91       	ld	r30, X+
    3d12:	fc 91       	ld	r31, X
    3d14:	01 90       	ld	r0, Z+
    3d16:	f0 81       	ld	r31, Z
    3d18:	e0 2d       	mov	r30, r0
    3d1a:	22 2d       	mov	r18, r2
    3d1c:	3d 2d       	mov	r19, r13
    3d1e:	4c 2d       	mov	r20, r12
    3d20:	5b 2d       	mov	r21, r11
    3d22:	6a 2d       	mov	r22, r10
    3d24:	79 2d       	mov	r23, r9
    3d26:	88 2d       	mov	r24, r8
    3d28:	97 2d       	mov	r25, r7
    3d2a:	8e 01       	movw	r16, r28
    3d2c:	0f 5f       	subi	r16, 0xFF	; 255
    3d2e:	1f 4f       	sbci	r17, 0xFF	; 255
    3d30:	a1 e0       	ldi	r26, 0x01	; 1
    3d32:	ea 2e       	mov	r14, r26
    3d34:	f1 2c       	mov	r15, r1
    3d36:	09 95       	icall
    3d38:	88 23       	and	r24, r24
    3d3a:	09 f4       	brne	.+2      	; 0x3d3e <fat_find_offset_for_dir_entry.clone.0+0x3d0>
    3d3c:	6f c0       	rjmp	.+222    	; 0x3e1c <fat_find_offset_for_dir_entry.clone.0+0x4ae>
            return 0;

        /* check if we found a free directory entry */
        if(first_char == FAT_DIRENTRY_DELETED || !first_char)
    3d3e:	89 81       	ldd	r24, Y+1	; 0x01
    3d40:	85 3e       	cpi	r24, 0xE5	; 229
    3d42:	11 f0       	breq	.+4      	; 0x3d48 <fat_find_offset_for_dir_entry.clone.0+0x3da>
    3d44:	88 23       	and	r24, r24
    3d46:	a1 f5       	brne	.+104    	; 0x3db0 <fat_find_offset_for_dir_entry.clone.0+0x442>
        {
            /* check if we have the needed number of available entries */
            ++free_dir_entries_found;
    3d48:	bc 85       	ldd	r27, Y+12	; 0x0c
    3d4a:	bf 5f       	subi	r27, 0xFF	; 255
    3d4c:	bc 87       	std	Y+12, r27	; 0x0c
            if(free_dir_entries_found >= free_dir_entries_needed)
    3d4e:	ed 89       	ldd	r30, Y+21	; 0x15
    3d50:	be 17       	cp	r27, r30
    3d52:	08 f0       	brcs	.+2      	; 0x3d56 <fat_find_offset_for_dir_entry.clone.0+0x3e8>
    3d54:	6b c0       	rjmp	.+214    	; 0x3e2c <fat_find_offset_for_dir_entry.clone.0+0x4be>
                break;

            offset += 32;
    3d56:	72 2d       	mov	r23, r2
    3d58:	70 5e       	subi	r23, 0xE0	; 224
    3d5a:	61 e0       	ldi	r22, 0x01	; 1
    3d5c:	72 15       	cp	r23, r2
    3d5e:	08 f0       	brcs	.+2      	; 0x3d62 <fat_find_offset_for_dir_entry.clone.0+0x3f4>
    3d60:	60 e0       	ldi	r22, 0x00	; 0
    3d62:	6d 0d       	add	r22, r13
    3d64:	51 e0       	ldi	r21, 0x01	; 1
    3d66:	6d 15       	cp	r22, r13
    3d68:	08 f0       	brcs	.+2      	; 0x3d6c <fat_find_offset_for_dir_entry.clone.0+0x3fe>
    3d6a:	50 e0       	ldi	r21, 0x00	; 0
    3d6c:	5c 0d       	add	r21, r12
    3d6e:	41 e0       	ldi	r20, 0x01	; 1
    3d70:	5c 15       	cp	r21, r12
    3d72:	08 f0       	brcs	.+2      	; 0x3d76 <fat_find_offset_for_dir_entry.clone.0+0x408>
    3d74:	40 e0       	ldi	r20, 0x00	; 0
    3d76:	4b 0d       	add	r20, r11
    3d78:	31 e0       	ldi	r19, 0x01	; 1
    3d7a:	4b 15       	cp	r20, r11
    3d7c:	08 f0       	brcs	.+2      	; 0x3d80 <fat_find_offset_for_dir_entry.clone.0+0x412>
    3d7e:	30 e0       	ldi	r19, 0x00	; 0
    3d80:	3a 0d       	add	r19, r10
    3d82:	21 e0       	ldi	r18, 0x01	; 1
    3d84:	3a 15       	cp	r19, r10
    3d86:	08 f0       	brcs	.+2      	; 0x3d8a <fat_find_offset_for_dir_entry.clone.0+0x41c>
    3d88:	20 e0       	ldi	r18, 0x00	; 0
    3d8a:	29 0d       	add	r18, r9
    3d8c:	91 e0       	ldi	r25, 0x01	; 1
    3d8e:	29 15       	cp	r18, r9
    3d90:	08 f0       	brcs	.+2      	; 0x3d94 <fat_find_offset_for_dir_entry.clone.0+0x426>
    3d92:	90 e0       	ldi	r25, 0x00	; 0
    3d94:	98 0d       	add	r25, r8
    3d96:	81 e0       	ldi	r24, 0x01	; 1
    3d98:	98 15       	cp	r25, r8
    3d9a:	08 f0       	brcs	.+2      	; 0x3d9e <fat_find_offset_for_dir_entry.clone.0+0x430>
    3d9c:	80 e0       	ldi	r24, 0x00	; 0
    3d9e:	27 2e       	mov	r2, r23
    3da0:	d6 2e       	mov	r13, r22
    3da2:	c5 2e       	mov	r12, r21
    3da4:	b4 2e       	mov	r11, r20
    3da6:	a3 2e       	mov	r10, r19
    3da8:	92 2e       	mov	r9, r18
    3daa:	89 2e       	mov	r8, r25
    3dac:	78 0e       	add	r7, r24
    3dae:	7d ce       	rjmp	.-774    	; 0x3aaa <fat_find_offset_for_dir_entry.clone.0+0x13c>
        }
        else
        {
            offset += 32;
    3db0:	52 2d       	mov	r21, r2
    3db2:	50 5e       	subi	r21, 0xE0	; 224
    3db4:	81 e0       	ldi	r24, 0x01	; 1
    3db6:	52 15       	cp	r21, r2
    3db8:	08 f0       	brcs	.+2      	; 0x3dbc <fat_find_offset_for_dir_entry.clone.0+0x44e>
    3dba:	80 e0       	ldi	r24, 0x00	; 0
    3dbc:	48 2e       	mov	r4, r24
    3dbe:	4d 0c       	add	r4, r13
    3dc0:	81 e0       	ldi	r24, 0x01	; 1
    3dc2:	4d 14       	cp	r4, r13
    3dc4:	08 f0       	brcs	.+2      	; 0x3dc8 <fat_find_offset_for_dir_entry.clone.0+0x45a>
    3dc6:	80 e0       	ldi	r24, 0x00	; 0
    3dc8:	38 2e       	mov	r3, r24
    3dca:	3c 0c       	add	r3, r12
    3dcc:	41 e0       	ldi	r20, 0x01	; 1
    3dce:	3c 14       	cp	r3, r12
    3dd0:	08 f0       	brcs	.+2      	; 0x3dd4 <fat_find_offset_for_dir_entry.clone.0+0x466>
    3dd2:	40 e0       	ldi	r20, 0x00	; 0
    3dd4:	4b 0d       	add	r20, r11
    3dd6:	31 e0       	ldi	r19, 0x01	; 1
    3dd8:	4b 15       	cp	r20, r11
    3dda:	08 f0       	brcs	.+2      	; 0x3dde <fat_find_offset_for_dir_entry.clone.0+0x470>
    3ddc:	30 e0       	ldi	r19, 0x00	; 0
    3dde:	3a 0d       	add	r19, r10
    3de0:	21 e0       	ldi	r18, 0x01	; 1
    3de2:	3a 15       	cp	r19, r10
    3de4:	08 f0       	brcs	.+2      	; 0x3de8 <fat_find_offset_for_dir_entry.clone.0+0x47a>
    3de6:	20 e0       	ldi	r18, 0x00	; 0
    3de8:	29 0d       	add	r18, r9
    3dea:	91 e0       	ldi	r25, 0x01	; 1
    3dec:	29 15       	cp	r18, r9
    3dee:	08 f0       	brcs	.+2      	; 0x3df2 <fat_find_offset_for_dir_entry.clone.0+0x484>
    3df0:	90 e0       	ldi	r25, 0x00	; 0
    3df2:	98 0d       	add	r25, r8
    3df4:	81 e0       	ldi	r24, 0x01	; 1
    3df6:	98 15       	cp	r25, r8
    3df8:	08 f0       	brcs	.+2      	; 0x3dfc <fat_find_offset_for_dir_entry.clone.0+0x48e>
    3dfa:	80 e0       	ldi	r24, 0x00	; 0
    3dfc:	55 2e       	mov	r5, r21
    3dfe:	48 87       	std	Y+8, r20	; 0x08
    3e00:	39 87       	std	Y+9, r19	; 0x09
    3e02:	2a 87       	std	Y+10, r18	; 0x0a
    3e04:	9b 87       	std	Y+11, r25	; 0x0b
    3e06:	68 2e       	mov	r6, r24
    3e08:	67 0c       	add	r6, r7
    3e0a:	25 2e       	mov	r2, r21
    3e0c:	d4 2c       	mov	r13, r4
    3e0e:	c3 2c       	mov	r12, r3
    3e10:	b4 2e       	mov	r11, r20
    3e12:	a3 2e       	mov	r10, r19
    3e14:	92 2e       	mov	r9, r18
    3e16:	89 2e       	mov	r8, r25
    3e18:	76 2c       	mov	r7, r6
    3e1a:	46 ce       	rjmp	.-884    	; 0x3aa8 <fat_find_offset_for_dir_entry.clone.0+0x13a>
        }
        
        /* read next lfn or 8.3 entry */
        uint8_t first_char;
        if(!fs->partition->device_read(offset, &first_char, sizeof(first_char)))
            return 0;
    3e1c:	55 24       	eor	r5, r5
    3e1e:	44 24       	eor	r4, r4
    3e20:	33 24       	eor	r3, r3
    3e22:	18 86       	std	Y+8, r1	; 0x08
    3e24:	19 86       	std	Y+9, r1	; 0x09
    3e26:	1a 86       	std	Y+10, r1	; 0x0a
    3e28:	1b 86       	std	Y+11, r1	; 0x0b
    3e2a:	66 24       	eor	r6, r6
            free_dir_entries_found = 0;
        }
    }

    return dir_entry_offset;
}
    3e2c:	25 2d       	mov	r18, r5
    3e2e:	34 2d       	mov	r19, r4
    3e30:	43 2d       	mov	r20, r3
    3e32:	58 85       	ldd	r21, Y+8	; 0x08
    3e34:	69 85       	ldd	r22, Y+9	; 0x09
    3e36:	7a 85       	ldd	r23, Y+10	; 0x0a
    3e38:	8b 85       	ldd	r24, Y+11	; 0x0b
    3e3a:	96 2d       	mov	r25, r6
    3e3c:	65 96       	adiw	r28, 0x15	; 21
    3e3e:	0f b6       	in	r0, 0x3f	; 63
    3e40:	f8 94       	cli
    3e42:	de bf       	out	0x3e, r29	; 62
    3e44:	0f be       	out	0x3f, r0	; 63
    3e46:	cd bf       	out	0x3d, r28	; 61
    3e48:	cf 91       	pop	r28
    3e4a:	df 91       	pop	r29
    3e4c:	1f 91       	pop	r17
    3e4e:	0f 91       	pop	r16
    3e50:	ff 90       	pop	r15
    3e52:	ef 90       	pop	r14
    3e54:	df 90       	pop	r13
    3e56:	cf 90       	pop	r12
    3e58:	bf 90       	pop	r11
    3e5a:	af 90       	pop	r10
    3e5c:	9f 90       	pop	r9
    3e5e:	8f 90       	pop	r8
    3e60:	7f 90       	pop	r7
    3e62:	6f 90       	pop	r6
    3e64:	5f 90       	pop	r5
    3e66:	4f 90       	pop	r4
    3e68:	3f 90       	pop	r3
    3e6a:	2f 90       	pop	r2
    3e6c:	08 95       	ret

00003e6e <fat_open>:
 * \param[in] partition Discriptor of partition on which the filesystem resides.
 * \returns 0 on error, a FAT filesystem descriptor on success.
 * \see fat_close
 */
struct fat_fs_struct* fat_open(struct partition_struct* partition)
{
    3e6e:	2f 92       	push	r2
    3e70:	3f 92       	push	r3
    3e72:	4f 92       	push	r4
    3e74:	5f 92       	push	r5
    3e76:	6f 92       	push	r6
    3e78:	7f 92       	push	r7
    3e7a:	8f 92       	push	r8
    3e7c:	9f 92       	push	r9
    3e7e:	af 92       	push	r10
    3e80:	bf 92       	push	r11
    3e82:	cf 92       	push	r12
    3e84:	df 92       	push	r13
    3e86:	ef 92       	push	r14
    3e88:	ff 92       	push	r15
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	df 93       	push	r29
    3e90:	cf 93       	push	r28
    3e92:	cd b7       	in	r28, 0x3d	; 61
    3e94:	de b7       	in	r29, 0x3e	; 62
    3e96:	c6 54       	subi	r28, 0x46	; 70
    3e98:	d0 40       	sbci	r29, 0x00	; 0
    3e9a:	0f b6       	in	r0, 0x3f	; 63
    3e9c:	f8 94       	cli
    3e9e:	de bf       	out	0x3e, r29	; 62
    3ea0:	0f be       	out	0x3f, r0	; 63
    3ea2:	cd bf       	out	0x3d, r28	; 61
    3ea4:	1c 01       	movw	r2, r24
    if(!partition ||
    3ea6:	00 97       	sbiw	r24, 0x00	; 0
    3ea8:	09 f4       	brne	.+2      	; 0x3eac <fat_open+0x3e>
    3eaa:	9e c3       	rjmp	.+1852   	; 0x45e8 <fat_open+0x77a>
    3eac:	dc 01       	movw	r26, r24
    3eae:	14 96       	adiw	r26, 0x04	; 4
    3eb0:	8d 91       	ld	r24, X+
    3eb2:	9c 91       	ld	r25, X
    3eb4:	15 97       	sbiw	r26, 0x05	; 5
    3eb6:	00 97       	sbiw	r24, 0x00	; 0
    3eb8:	09 f4       	brne	.+2      	; 0x3ebc <fat_open+0x4e>
    3eba:	96 c3       	rjmp	.+1836   	; 0x45e8 <fat_open+0x77a>
#if FAT_WRITE_SUPPORT
       !partition->device_write ||
    3ebc:	16 96       	adiw	r26, 0x06	; 6
    3ebe:	8d 91       	ld	r24, X+
    3ec0:	9c 91       	ld	r25, X
    3ec2:	17 97       	sbiw	r26, 0x07	; 7
    3ec4:	00 97       	sbiw	r24, 0x00	; 0
    3ec6:	09 f4       	brne	.+2      	; 0x3eca <fat_open+0x5c>
    3ec8:	8f c3       	rjmp	.+1822   	; 0x45e8 <fat_open+0x77a>
    3eca:	ab c3       	rjmp	.+1878   	; 0x4622 <fat_open+0x7b4>
    }
    if(i >= FAT_FS_COUNT)
        return 0;
#endif

    memset(fs, 0, sizeof(*fs));
    3ecc:	ec e8       	ldi	r30, 0x8C	; 140
    3ece:	f4 e0       	ldi	r31, 0x04	; 4
    3ed0:	8e e2       	ldi	r24, 0x2E	; 46
    3ed2:	df 01       	movw	r26, r30
    3ed4:	1d 92       	st	X+, r1
    3ed6:	8a 95       	dec	r24
    3ed8:	e9 f7       	brne	.-6      	; 0x3ed4 <fat_open+0x66>

    fs->partition = partition;
    3eda:	30 92 8d 04 	sts	0x048D, r3
    3ede:	20 92 8c 04 	sts	0x048C, r2
#if FAT_FAT32_SUPPORT
    uint8_t buffer[37];
#else
    uint8_t buffer[25];
#endif
    offset_t partition_offset = (offset_t) partition->offset * 512;
    3ee2:	f1 01       	movw	r30, r2
    3ee4:	a1 84       	ldd	r10, Z+9	; 0x09
    3ee6:	b2 84       	ldd	r11, Z+10	; 0x0a
    3ee8:	c3 84       	ldd	r12, Z+11	; 0x0b
    3eea:	d4 84       	ldd	r13, Z+12	; 0x0c
    3eec:	95 01       	movw	r18, r10
    3eee:	a6 01       	movw	r20, r12
    3ef0:	60 e0       	ldi	r22, 0x00	; 0
    3ef2:	70 e0       	ldi	r23, 0x00	; 0
    3ef4:	80 e0       	ldi	r24, 0x00	; 0
    3ef6:	90 e0       	ldi	r25, 0x00	; 0
    3ef8:	09 e0       	ldi	r16, 0x09	; 9
    3efa:	0e 94 93 02 	call	0x526	; 0x526 <__ashldi3>
    3efe:	82 2e       	mov	r8, r18
    3f00:	3e a3       	std	Y+38, r19	; 0x26
    3f02:	4f a3       	std	Y+39, r20	; 0x27
    3f04:	58 a7       	std	Y+40, r21	; 0x28
    3f06:	69 a7       	std	Y+41, r22	; 0x29
    3f08:	7a a7       	std	Y+42, r23	; 0x2a
    3f0a:	8b a7       	std	Y+43, r24	; 0x2b
    3f0c:	23 96       	adiw	r28, 0x03	; 3
    3f0e:	9f af       	std	Y+63, r25	; 0x3f
    3f10:	23 97       	sbiw	r28, 0x03	; 3
    if(!partition->device_read(partition_offset + 0x0b, buffer, sizeof(buffer)))
    3f12:	25 5f       	subi	r18, 0xF5	; 245
    3f14:	31 e0       	ldi	r19, 0x01	; 1
    3f16:	28 15       	cp	r18, r8
    3f18:	08 f0       	brcs	.+2      	; 0x3f1c <fat_open+0xae>
    3f1a:	30 e0       	ldi	r19, 0x00	; 0
    3f1c:	fe a1       	ldd	r31, Y+38	; 0x26
    3f1e:	3f 0f       	add	r19, r31
    3f20:	41 e0       	ldi	r20, 0x01	; 1
    3f22:	3f 17       	cp	r19, r31
    3f24:	08 f0       	brcs	.+2      	; 0x3f28 <fat_open+0xba>
    3f26:	40 e0       	ldi	r20, 0x00	; 0
    3f28:	ef a0       	ldd	r14, Y+39	; 0x27
    3f2a:	4e 0d       	add	r20, r14
    3f2c:	51 e0       	ldi	r21, 0x01	; 1
    3f2e:	4e 15       	cp	r20, r14
    3f30:	08 f0       	brcs	.+2      	; 0x3f34 <fat_open+0xc6>
    3f32:	50 e0       	ldi	r21, 0x00	; 0
    3f34:	f8 a4       	ldd	r15, Y+40	; 0x28
    3f36:	5f 0d       	add	r21, r15
    3f38:	61 e0       	ldi	r22, 0x01	; 1
    3f3a:	5f 15       	cp	r21, r15
    3f3c:	08 f0       	brcs	.+2      	; 0x3f40 <fat_open+0xd2>
    3f3e:	60 e0       	ldi	r22, 0x00	; 0
    3f40:	09 a5       	ldd	r16, Y+41	; 0x29
    3f42:	60 0f       	add	r22, r16
    3f44:	71 e0       	ldi	r23, 0x01	; 1
    3f46:	60 17       	cp	r22, r16
    3f48:	08 f0       	brcs	.+2      	; 0x3f4c <fat_open+0xde>
    3f4a:	70 e0       	ldi	r23, 0x00	; 0
    3f4c:	1a a5       	ldd	r17, Y+42	; 0x2a
    3f4e:	71 0f       	add	r23, r17
    3f50:	81 e0       	ldi	r24, 0x01	; 1
    3f52:	71 17       	cp	r23, r17
    3f54:	08 f0       	brcs	.+2      	; 0x3f58 <fat_open+0xea>
    3f56:	80 e0       	ldi	r24, 0x00	; 0
    3f58:	9b a5       	ldd	r25, Y+43	; 0x2b
    3f5a:	89 0f       	add	r24, r25
    3f5c:	91 e0       	ldi	r25, 0x01	; 1
    3f5e:	ab a5       	ldd	r26, Y+43	; 0x2b
    3f60:	8a 17       	cp	r24, r26
    3f62:	08 f0       	brcs	.+2      	; 0x3f66 <fat_open+0xf8>
    3f64:	90 e0       	ldi	r25, 0x00	; 0
    3f66:	d1 01       	movw	r26, r2
    3f68:	ed 91       	ld	r30, X+
    3f6a:	fc 91       	ld	r31, X
    3f6c:	23 96       	adiw	r28, 0x03	; 3
    3f6e:	bf ad       	ldd	r27, Y+63	; 0x3f
    3f70:	23 97       	sbiw	r28, 0x03	; 3
    3f72:	9b 0f       	add	r25, r27
    3f74:	5e 01       	movw	r10, r28
    3f76:	08 94       	sec
    3f78:	a1 1c       	adc	r10, r1
    3f7a:	b1 1c       	adc	r11, r1
    3f7c:	85 01       	movw	r16, r10
    3f7e:	a5 e2       	ldi	r26, 0x25	; 37
    3f80:	ea 2e       	mov	r14, r26
    3f82:	f1 2c       	mov	r15, r1
    3f84:	09 95       	icall
    3f86:	88 23       	and	r24, r24
    3f88:	09 f4       	brne	.+2      	; 0x3f8c <fat_open+0x11e>
    3f8a:	2a c3       	rjmp	.+1620   	; 0x45e0 <fat_open+0x772>
        return 0;

    uint16_t bytes_per_sector = ltoh16(*((uint16_t*) &buffer[0x00]));
    3f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    3f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    3f90:	ff ab       	std	Y+55, r31	; 0x37
    3f92:	ee ab       	std	Y+54, r30	; 0x36
    uint16_t reserved_sectors = ltoh16(*((uint16_t*) &buffer[0x03]));
    3f94:	d5 01       	movw	r26, r10
    3f96:	13 96       	adiw	r26, 0x03	; 3
    3f98:	0d 90       	ld	r0, X+
    3f9a:	bc 91       	ld	r27, X
    3f9c:	a0 2d       	mov	r26, r0
    3f9e:	bd ab       	std	Y+53, r27	; 0x35
    3fa0:	ac ab       	std	Y+52, r26	; 0x34
    uint8_t sectors_per_cluster = buffer[0x02];
    3fa2:	bb 81       	ldd	r27, Y+3	; 0x03
    3fa4:	bf af       	std	Y+63, r27	; 0x3f
    uint8_t fat_copies = buffer[0x05];
    3fa6:	9e 80       	ldd	r9, Y+6	; 0x06
    uint16_t max_root_entries = ltoh16(*((uint16_t*) &buffer[0x06]));
    3fa8:	f5 01       	movw	r30, r10
    3faa:	06 80       	ldd	r0, Z+6	; 0x06
    3fac:	f7 81       	ldd	r31, Z+7	; 0x07
    3fae:	e0 2d       	mov	r30, r0
    3fb0:	22 96       	adiw	r28, 0x02	; 2
    3fb2:	ff af       	std	Y+63, r31	; 0x3f
    3fb4:	ee af       	std	Y+62, r30	; 0x3e
    3fb6:	22 97       	sbiw	r28, 0x02	; 2
    uint16_t sector_count_16 = ltoh16(*((uint16_t*) &buffer[0x08]));
    3fb8:	d5 01       	movw	r26, r10
    3fba:	18 96       	adiw	r26, 0x08	; 8
    3fbc:	8d 91       	ld	r24, X+
    3fbe:	9c 91       	ld	r25, X
    3fc0:	19 97       	sbiw	r26, 0x09	; 9
    uint16_t sectors_per_fat = ltoh16(*((uint16_t*) &buffer[0x0b]));
    3fc2:	1b 96       	adiw	r26, 0x0b	; 11
    3fc4:	ed 91       	ld	r30, X+
    3fc6:	fc 91       	ld	r31, X
    3fc8:	1c 97       	sbiw	r26, 0x0c	; 12
    3fca:	fe af       	std	Y+62, r31	; 0x3e
    3fcc:	ed af       	std	Y+61, r30	; 0x3d
    uint32_t sector_count = ltoh32(*((uint32_t*) &buffer[0x15]));
    3fce:	55 96       	adiw	r26, 0x15	; 21
    3fd0:	ed 90       	ld	r14, X+
    3fd2:	fd 90       	ld	r15, X+
    3fd4:	0d 91       	ld	r16, X+
    3fd6:	1c 91       	ld	r17, X
    3fd8:	58 97       	sbiw	r26, 0x18	; 24
#if FAT_FAT32_SUPPORT
    uint32_t sectors_per_fat32 = ltoh32(*((uint32_t*) &buffer[0x19]));
    3fda:	59 96       	adiw	r26, 0x19	; 25
    3fdc:	2d 91       	ld	r18, X+
    3fde:	3d 91       	ld	r19, X+
    3fe0:	4d 91       	ld	r20, X+
    3fe2:	5c 91       	ld	r21, X
    3fe4:	5c 97       	sbiw	r26, 0x1c	; 28
    3fe6:	29 af       	std	Y+57, r18	; 0x39
    3fe8:	3a af       	std	Y+58, r19	; 0x3a
    3fea:	4b af       	std	Y+59, r20	; 0x3b
    3fec:	5c af       	std	Y+60, r21	; 0x3c
    uint32_t cluster_root_dir = ltoh32(*((uint32_t*) &buffer[0x21]));
    3fee:	91 96       	adiw	r26, 0x21	; 33
    3ff0:	2d 91       	ld	r18, X+
    3ff2:	3d 91       	ld	r19, X+
    3ff4:	4d 91       	ld	r20, X+
    3ff6:	5c 91       	ld	r21, X
    3ff8:	94 97       	sbiw	r26, 0x24	; 36
    3ffa:	27 96       	adiw	r28, 0x07	; 7
    3ffc:	2c af       	std	Y+60, r18	; 0x3c
    3ffe:	3d af       	std	Y+61, r19	; 0x3d
    4000:	4e af       	std	Y+62, r20	; 0x3e
    4002:	5f af       	std	Y+63, r21	; 0x3f
    4004:	27 97       	sbiw	r28, 0x07	; 7
#endif

    if(sector_count == 0)
    4006:	e1 14       	cp	r14, r1
    4008:	f1 04       	cpc	r15, r1
    400a:	01 05       	cpc	r16, r1
    400c:	11 05       	cpc	r17, r1
    400e:	31 f4       	brne	.+12     	; 0x401c <fat_open+0x1ae>
    {
        if(sector_count_16 == 0)
    4010:	00 97       	sbiw	r24, 0x00	; 0
    4012:	09 f4       	brne	.+2      	; 0x4016 <fat_open+0x1a8>
    4014:	e5 c2       	rjmp	.+1482   	; 0x45e0 <fat_open+0x772>
            /* illegal volume size */
            return 0;
        else
            sector_count = sector_count_16;
    4016:	7c 01       	movw	r14, r24
    4018:	00 e0       	ldi	r16, 0x00	; 0
    401a:	10 e0       	ldi	r17, 0x00	; 0
    }
#if FAT_FAT32_SUPPORT
    if(sectors_per_fat != 0)
    401c:	ed ad       	ldd	r30, Y+61	; 0x3d
    401e:	fe ad       	ldd	r31, Y+62	; 0x3e
    4020:	30 97       	sbiw	r30, 0x00	; 0
    4022:	41 f0       	breq	.+16     	; 0x4034 <fat_open+0x1c6>
        sectors_per_fat32 = sectors_per_fat;
    4024:	9f 01       	movw	r18, r30
    4026:	40 e0       	ldi	r20, 0x00	; 0
    4028:	50 e0       	ldi	r21, 0x00	; 0
    402a:	29 af       	std	Y+57, r18	; 0x39
    402c:	3a af       	std	Y+58, r19	; 0x3a
    402e:	4b af       	std	Y+59, r20	; 0x3b
    4030:	5c af       	std	Y+60, r21	; 0x3c
    4032:	0a c0       	rjmp	.+20     	; 0x4048 <fat_open+0x1da>
    else if(sectors_per_fat32 == 0)
    4034:	69 ad       	ldd	r22, Y+57	; 0x39
    4036:	7a ad       	ldd	r23, Y+58	; 0x3a
    4038:	8b ad       	ldd	r24, Y+59	; 0x3b
    403a:	9c ad       	ldd	r25, Y+60	; 0x3c
    403c:	61 15       	cp	r22, r1
    403e:	71 05       	cpc	r23, r1
    4040:	81 05       	cpc	r24, r1
    4042:	91 05       	cpc	r25, r1
    4044:	09 f4       	brne	.+2      	; 0x4048 <fat_open+0x1da>
    4046:	cc c2       	rjmp	.+1432   	; 0x45e0 <fat_open+0x772>
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
                                 - reserved_sectors
    4048:	ec a9       	ldd	r30, Y+52	; 0x34
    404a:	fd a9       	ldd	r31, Y+53	; 0x35
    404c:	cf 01       	movw	r24, r30
    404e:	a0 e0       	ldi	r26, 0x00	; 0
    4050:	b0 e0       	ldi	r27, 0x00	; 0
    4052:	57 01       	movw	r10, r14
    4054:	68 01       	movw	r12, r16
    4056:	a8 1a       	sub	r10, r24
    4058:	b9 0a       	sbc	r11, r25
    405a:	ca 0a       	sbc	r12, r26
    405c:	db 0a       	sbc	r13, r27
#if FAT_FAT32_SUPPORT
                                 - sectors_per_fat32 * fat_copies
    405e:	29 2d       	mov	r18, r9
    4060:	30 e0       	ldi	r19, 0x00	; 0
    4062:	40 e0       	ldi	r20, 0x00	; 0
    4064:	50 e0       	ldi	r21, 0x00	; 0
    4066:	69 ad       	ldd	r22, Y+57	; 0x39
    4068:	7a ad       	ldd	r23, Y+58	; 0x3a
    406a:	8b ad       	ldd	r24, Y+59	; 0x3b
    406c:	9c ad       	ldd	r25, Y+60	; 0x3c
    406e:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
    4072:	a6 1a       	sub	r10, r22
    4074:	b7 0a       	sbc	r11, r23
    4076:	c8 0a       	sbc	r12, r24
    4078:	d9 0a       	sbc	r13, r25
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    407a:	8e a9       	ldd	r24, Y+54	; 0x36
    407c:	9f a9       	ldd	r25, Y+55	; 0x37
    407e:	01 97       	sbiw	r24, 0x01	; 1
    4080:	22 96       	adiw	r28, 0x02	; 2
    4082:	2e ad       	ldd	r18, Y+62	; 0x3e
    4084:	3f ad       	ldd	r19, Y+63	; 0x3f
    4086:	22 97       	sbiw	r28, 0x02	; 2
    4088:	b5 e0       	ldi	r27, 0x05	; 5
    408a:	22 0f       	add	r18, r18
    408c:	33 1f       	adc	r19, r19
    408e:	ba 95       	dec	r27
    4090:	e1 f7       	brne	.-8      	; 0x408a <fat_open+0x21c>
    4092:	82 0f       	add	r24, r18
    4094:	93 1f       	adc	r25, r19
    4096:	6e a9       	ldd	r22, Y+54	; 0x36
    4098:	7f a9       	ldd	r23, Y+55	; 0x37
    409a:	0e 94 6b 32 	call	0x64d6	; 0x64d6 <__udivmodhi4>
    409e:	80 e0       	ldi	r24, 0x00	; 0
    40a0:	90 e0       	ldi	r25, 0x00	; 0
        /* this is not a FAT16 */
        return 0;
#endif

    /* determine the type of FAT we have here */
    uint32_t data_sector_count = sector_count
    40a2:	a6 1a       	sub	r10, r22
    40a4:	b7 0a       	sbc	r11, r23
    40a6:	c8 0a       	sbc	r12, r24
    40a8:	d9 0a       	sbc	r13, r25
                                 - sectors_per_fat32 * fat_copies
#else
                                 - (uint32_t) sectors_per_fat * fat_copies
#endif
                                 - ((max_root_entries * 32 + bytes_per_sector - 1) / bytes_per_sector);
    uint32_t data_cluster_count = data_sector_count / sectors_per_cluster;
    40aa:	ff ad       	ldd	r31, Y+63	; 0x3f
    40ac:	2f 2f       	mov	r18, r31
    40ae:	30 e0       	ldi	r19, 0x00	; 0
    40b0:	40 e0       	ldi	r20, 0x00	; 0
    40b2:	50 e0       	ldi	r21, 0x00	; 0
    40b4:	c6 01       	movw	r24, r12
    40b6:	b5 01       	movw	r22, r10
    40b8:	0e 94 92 32 	call	0x6524	; 0x6524 <__udivmodsi4>
    40bc:	29 01       	movw	r4, r18
    40be:	3a 01       	movw	r6, r20
    if(data_cluster_count < 4085)
    40c0:	25 ef       	ldi	r18, 0xF5	; 245
    40c2:	42 16       	cp	r4, r18
    40c4:	2f e0       	ldi	r18, 0x0F	; 15
    40c6:	52 06       	cpc	r5, r18
    40c8:	20 e0       	ldi	r18, 0x00	; 0
    40ca:	62 06       	cpc	r6, r18
    40cc:	20 e0       	ldi	r18, 0x00	; 0
    40ce:	72 06       	cpc	r7, r18
    40d0:	08 f4       	brcc	.+2      	; 0x40d4 <fat_open+0x266>
    40d2:	86 c2       	rjmp	.+1292   	; 0x45e0 <fat_open+0x772>
        /* this is a FAT12, not supported */
        return 0;
    else if(data_cluster_count < 65525)
    40d4:	35 ef       	ldi	r19, 0xF5	; 245
    40d6:	43 16       	cp	r4, r19
    40d8:	3f ef       	ldi	r19, 0xFF	; 255
    40da:	53 06       	cpc	r5, r19
    40dc:	30 e0       	ldi	r19, 0x00	; 0
    40de:	63 06       	cpc	r6, r19
    40e0:	30 e0       	ldi	r19, 0x00	; 0
    40e2:	73 06       	cpc	r7, r19
    40e4:	30 f4       	brcc	.+12     	; 0x40f2 <fat_open+0x284>
        /* this is a FAT16 */
        partition->type = PARTITION_TYPE_FAT16;
    40e6:	86 e0       	ldi	r24, 0x06	; 6
    40e8:	d1 01       	movw	r26, r2
    40ea:	18 96       	adiw	r26, 0x08	; 8
    40ec:	8c 93       	st	X, r24
    40ee:	18 97       	sbiw	r26, 0x08	; 8
    40f0:	03 c0       	rjmp	.+6      	; 0x40f8 <fat_open+0x28a>
    else
        /* this is a FAT32 */
        partition->type = PARTITION_TYPE_FAT32;
    40f2:	8b e0       	ldi	r24, 0x0B	; 11
    40f4:	f1 01       	movw	r30, r2
    40f6:	80 87       	std	Z+8, r24	; 0x08

    /* fill header information */
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    40f8:	8c e2       	ldi	r24, 0x2C	; 44
    40fa:	ee e8       	ldi	r30, 0x8E	; 142
    40fc:	f4 e0       	ldi	r31, 0x04	; 4
    40fe:	df 01       	movw	r26, r30
    4100:	1d 92       	st	X+, r1
    4102:	8a 95       	dec	r24
    4104:	e9 f7       	brne	.-6      	; 0x4100 <fat_open+0x292>
    
    header->size = (offset_t) sector_count * bytes_per_sector;
    4106:	4e a9       	ldd	r20, Y+54	; 0x36
    4108:	5f a9       	ldd	r21, Y+55	; 0x37
    410a:	9a 01       	movw	r18, r20
    410c:	40 e0       	ldi	r20, 0x00	; 0
    410e:	50 e0       	ldi	r21, 0x00	; 0
    4110:	60 e0       	ldi	r22, 0x00	; 0
    4112:	70 e0       	ldi	r23, 0x00	; 0
    4114:	cb 01       	movw	r24, r22
    4116:	2c a7       	std	Y+44, r18	; 0x2c
    4118:	3d a7       	std	Y+45, r19	; 0x2d
    411a:	4e a7       	std	Y+46, r20	; 0x2e
    411c:	5f a7       	std	Y+47, r21	; 0x2f
    411e:	68 ab       	std	Y+48, r22	; 0x30
    4120:	79 ab       	std	Y+49, r23	; 0x31
    4122:	8a ab       	std	Y+50, r24	; 0x32
    4124:	9b ab       	std	Y+51, r25	; 0x33
    4126:	57 01       	movw	r10, r14
    4128:	68 01       	movw	r12, r16
    412a:	97 01       	movw	r18, r14
    412c:	a6 01       	movw	r20, r12
    412e:	60 e0       	ldi	r22, 0x00	; 0
    4130:	70 e0       	ldi	r23, 0x00	; 0
    4132:	80 e0       	ldi	r24, 0x00	; 0
    4134:	90 e0       	ldi	r25, 0x00	; 0
    4136:	ac a4       	ldd	r10, Y+44	; 0x2c
    4138:	bd a4       	ldd	r11, Y+45	; 0x2d
    413a:	cc 24       	eor	r12, r12
    413c:	dd 24       	eor	r13, r13
    413e:	ee 24       	eor	r14, r14
    4140:	ff 24       	eor	r15, r15
    4142:	00 e0       	ldi	r16, 0x00	; 0
    4144:	10 e0       	ldi	r17, 0x00	; 0
    4146:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
    414a:	20 93 8e 04 	sts	0x048E, r18
    414e:	30 93 8f 04 	sts	0x048F, r19
    4152:	40 93 90 04 	sts	0x0490, r20
    4156:	50 93 91 04 	sts	0x0491, r21
    415a:	60 93 92 04 	sts	0x0492, r22
    415e:	70 93 93 04 	sts	0x0493, r23
    4162:	80 93 94 04 	sts	0x0494, r24
    4166:	90 93 95 04 	sts	0x0495, r25

    header->fat_offset = /* jump to partition */
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    416a:	ec a9       	ldd	r30, Y+52	; 0x34
    416c:	fd a9       	ldd	r31, Y+53	; 0x35
    416e:	9f 01       	movw	r18, r30
    4170:	40 e0       	ldi	r20, 0x00	; 0
    4172:	50 e0       	ldi	r21, 0x00	; 0
    4174:	60 e0       	ldi	r22, 0x00	; 0
    4176:	70 e0       	ldi	r23, 0x00	; 0
    4178:	80 e0       	ldi	r24, 0x00	; 0
    417a:	90 e0       	ldi	r25, 0x00	; 0
    417c:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
                         partition_offset +
    4180:	82 0e       	add	r8, r18
    4182:	88 ae       	std	Y+56, r8	; 0x38
    4184:	e1 e0       	ldi	r30, 0x01	; 1
    4186:	82 16       	cp	r8, r18
    4188:	08 f0       	brcs	.+2      	; 0x418c <fat_open+0x31e>
    418a:	e0 e0       	ldi	r30, 0x00	; 0
    418c:	fe a1       	ldd	r31, Y+38	; 0x26
    418e:	f3 0f       	add	r31, r19
    4190:	21 e0       	ldi	r18, 0x01	; 1
    4192:	f3 17       	cp	r31, r19
    4194:	08 f0       	brcs	.+2      	; 0x4198 <fat_open+0x32a>
    4196:	20 e0       	ldi	r18, 0x00	; 0
    4198:	ef 0f       	add	r30, r31
    419a:	ee a3       	std	Y+38, r30	; 0x26
    419c:	31 e0       	ldi	r19, 0x01	; 1
    419e:	ef 17       	cp	r30, r31
    41a0:	08 f0       	brcs	.+2      	; 0x41a4 <fat_open+0x336>
    41a2:	30 e0       	ldi	r19, 0x00	; 0
    41a4:	23 2b       	or	r18, r19
    41a6:	ef a1       	ldd	r30, Y+39	; 0x27
    41a8:	e4 0f       	add	r30, r20
    41aa:	31 e0       	ldi	r19, 0x01	; 1
    41ac:	e4 17       	cp	r30, r20
    41ae:	08 f0       	brcs	.+2      	; 0x41b2 <fat_open+0x344>
    41b0:	30 e0       	ldi	r19, 0x00	; 0
    41b2:	2e 0f       	add	r18, r30
    41b4:	2f a3       	std	Y+39, r18	; 0x27
    41b6:	21 e0       	ldi	r18, 0x01	; 1
    41b8:	ff a1       	ldd	r31, Y+39	; 0x27
    41ba:	fe 17       	cp	r31, r30
    41bc:	08 f0       	brcs	.+2      	; 0x41c0 <fat_open+0x352>
    41be:	20 e0       	ldi	r18, 0x00	; 0
    41c0:	32 2b       	or	r19, r18
    41c2:	28 a5       	ldd	r18, Y+40	; 0x28
    41c4:	25 0f       	add	r18, r21
    41c6:	41 e0       	ldi	r20, 0x01	; 1
    41c8:	25 17       	cp	r18, r21
    41ca:	08 f0       	brcs	.+2      	; 0x41ce <fat_open+0x360>
    41cc:	40 e0       	ldi	r20, 0x00	; 0
    41ce:	32 0f       	add	r19, r18
    41d0:	38 a7       	std	Y+40, r19	; 0x28
    41d2:	31 e0       	ldi	r19, 0x01	; 1
    41d4:	e8 a4       	ldd	r14, Y+40	; 0x28
    41d6:	e2 16       	cp	r14, r18
    41d8:	08 f0       	brcs	.+2      	; 0x41dc <fat_open+0x36e>
    41da:	30 e0       	ldi	r19, 0x00	; 0
    41dc:	43 2b       	or	r20, r19
    41de:	39 a5       	ldd	r19, Y+41	; 0x29
    41e0:	36 0f       	add	r19, r22
    41e2:	21 e0       	ldi	r18, 0x01	; 1
    41e4:	36 17       	cp	r19, r22
    41e6:	08 f0       	brcs	.+2      	; 0x41ea <fat_open+0x37c>
    41e8:	20 e0       	ldi	r18, 0x00	; 0
    41ea:	43 0f       	add	r20, r19
    41ec:	49 a7       	std	Y+41, r20	; 0x29
    41ee:	41 e0       	ldi	r20, 0x01	; 1
    41f0:	f9 a4       	ldd	r15, Y+41	; 0x29
    41f2:	f3 16       	cp	r15, r19
    41f4:	08 f0       	brcs	.+2      	; 0x41f8 <fat_open+0x38a>
    41f6:	40 e0       	ldi	r20, 0x00	; 0
    41f8:	24 2b       	or	r18, r20
    41fa:	4a a5       	ldd	r20, Y+42	; 0x2a
    41fc:	47 0f       	add	r20, r23
    41fe:	31 e0       	ldi	r19, 0x01	; 1
    4200:	47 17       	cp	r20, r23
    4202:	08 f0       	brcs	.+2      	; 0x4206 <fat_open+0x398>
    4204:	30 e0       	ldi	r19, 0x00	; 0
    4206:	24 0f       	add	r18, r20
    4208:	2a a7       	std	Y+42, r18	; 0x2a
    420a:	21 e0       	ldi	r18, 0x01	; 1
    420c:	0a a5       	ldd	r16, Y+42	; 0x2a
    420e:	04 17       	cp	r16, r20
    4210:	08 f0       	brcs	.+2      	; 0x4214 <fat_open+0x3a6>
    4212:	20 e0       	ldi	r18, 0x00	; 0
    4214:	32 2b       	or	r19, r18
    4216:	2b a5       	ldd	r18, Y+43	; 0x2b
    4218:	28 0f       	add	r18, r24
    421a:	41 e0       	ldi	r20, 0x01	; 1
    421c:	28 17       	cp	r18, r24
    421e:	08 f0       	brcs	.+2      	; 0x4222 <fat_open+0x3b4>
    4220:	40 e0       	ldi	r20, 0x00	; 0
    4222:	32 0f       	add	r19, r18
    4224:	3b a7       	std	Y+43, r19	; 0x2b
    4226:	81 e0       	ldi	r24, 0x01	; 1
    4228:	32 17       	cp	r19, r18
    422a:	08 f0       	brcs	.+2      	; 0x422e <fat_open+0x3c0>
    422c:	80 e0       	ldi	r24, 0x00	; 0
    422e:	48 2b       	or	r20, r24
    4230:	23 96       	adiw	r28, 0x03	; 3
    4232:	1f ad       	ldd	r17, Y+63	; 0x3f
    4234:	23 97       	sbiw	r28, 0x03	; 3
    4236:	91 0f       	add	r25, r17
    4238:	49 0f       	add	r20, r25
    423a:	4c ab       	std	Y+52, r20	; 0x34
    struct fat_header_struct* header = &fs->header;
    memset(header, 0, sizeof(*header));
    
    header->size = (offset_t) sector_count * bytes_per_sector;

    header->fat_offset = /* jump to partition */
    423c:	28 ad       	ldd	r18, Y+56	; 0x38
    423e:	20 93 96 04 	sts	0x0496, r18
    4242:	3e a1       	ldd	r19, Y+38	; 0x26
    4244:	30 93 97 04 	sts	0x0497, r19
    4248:	4f a1       	ldd	r20, Y+39	; 0x27
    424a:	40 93 98 04 	sts	0x0498, r20
    424e:	58 a5       	ldd	r21, Y+40	; 0x28
    4250:	50 93 99 04 	sts	0x0499, r21
    4254:	69 a5       	ldd	r22, Y+41	; 0x29
    4256:	60 93 9a 04 	sts	0x049A, r22
    425a:	7a a5       	ldd	r23, Y+42	; 0x2a
    425c:	70 93 9b 04 	sts	0x049B, r23
    4260:	8b a5       	ldd	r24, Y+43	; 0x2b
    4262:	80 93 9c 04 	sts	0x049C, r24
    4266:	9c a9       	ldd	r25, Y+52	; 0x34
    4268:	90 93 9d 04 	sts	0x049D, r25
                         partition_offset +
                         /* jump to fat */
                         (offset_t) reserved_sectors * bytes_per_sector;
    header->fat_size = (data_cluster_count + 2) * (partition->type == PARTITION_TYPE_FAT16 ? 2 : 4);
    426c:	a3 01       	movw	r20, r6
    426e:	92 01       	movw	r18, r4
    4270:	2e 5f       	subi	r18, 0xFE	; 254
    4272:	3f 4f       	sbci	r19, 0xFF	; 255
    4274:	4f 4f       	sbci	r20, 0xFF	; 255
    4276:	5f 4f       	sbci	r21, 0xFF	; 255
    4278:	d1 01       	movw	r26, r2
    427a:	18 96       	adiw	r26, 0x08	; 8
    427c:	1c 91       	ld	r17, X
    427e:	18 97       	sbiw	r26, 0x08	; 8
    4280:	16 30       	cpi	r17, 0x06	; 6
    4282:	29 f0       	breq	.+10     	; 0x428e <fat_open+0x420>
    4284:	64 e0       	ldi	r22, 0x04	; 4
    4286:	70 e0       	ldi	r23, 0x00	; 0
    4288:	80 e0       	ldi	r24, 0x00	; 0
    428a:	90 e0       	ldi	r25, 0x00	; 0
    428c:	04 c0       	rjmp	.+8      	; 0x4296 <fat_open+0x428>
    428e:	62 e0       	ldi	r22, 0x02	; 2
    4290:	70 e0       	ldi	r23, 0x00	; 0
    4292:	80 e0       	ldi	r24, 0x00	; 0
    4294:	90 e0       	ldi	r25, 0x00	; 0
    4296:	0e 94 4c 32 	call	0x6498	; 0x6498 <__mulsi3>
    429a:	60 93 9e 04 	sts	0x049E, r22
    429e:	70 93 9f 04 	sts	0x049F, r23
    42a2:	80 93 a0 04 	sts	0x04A0, r24
    42a6:	90 93 a1 04 	sts	0x04A1, r25

    header->sector_size = bytes_per_sector;
    42aa:	ee a9       	ldd	r30, Y+54	; 0x36
    42ac:	ff a9       	ldd	r31, Y+55	; 0x37
    42ae:	f0 93 a3 04 	sts	0x04A3, r31
    42b2:	e0 93 a2 04 	sts	0x04A2, r30
    header->cluster_size = (uint16_t) bytes_per_sector * sectors_per_cluster;
    42b6:	ff ad       	ldd	r31, Y+63	; 0x3f
    42b8:	2f 2f       	mov	r18, r31
    42ba:	30 e0       	ldi	r19, 0x00	; 0
    42bc:	ee a8       	ldd	r14, Y+54	; 0x36
    42be:	ff a8       	ldd	r15, Y+55	; 0x37
    42c0:	2e 9d       	mul	r18, r14
    42c2:	c0 01       	movw	r24, r0
    42c4:	2f 9d       	mul	r18, r15
    42c6:	90 0d       	add	r25, r0
    42c8:	3e 9d       	mul	r19, r14
    42ca:	90 0d       	add	r25, r0
    42cc:	11 24       	eor	r1, r1
    42ce:	90 93 a5 04 	sts	0x04A5, r25
    42d2:	80 93 a4 04 	sts	0x04A4, r24

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
    42d6:	16 30       	cpi	r17, 0x06	; 6
    42d8:	09 f0       	breq	.+2      	; 0x42dc <fat_open+0x46e>
    42da:	ec c0       	rjmp	.+472    	; 0x44b4 <fat_open+0x646>
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;
    42dc:	2c a5       	ldd	r18, Y+44	; 0x2c
    42de:	3d a5       	ldd	r19, Y+45	; 0x2d
    42e0:	40 e0       	ldi	r20, 0x00	; 0
    42e2:	50 e0       	ldi	r21, 0x00	; 0
    42e4:	60 e0       	ldi	r22, 0x00	; 0
    42e6:	70 e0       	ldi	r23, 0x00	; 0
    42e8:	80 e0       	ldi	r24, 0x00	; 0
    42ea:	90 e0       	ldi	r25, 0x00	; 0
    42ec:	a9 2c       	mov	r10, r9
    42ee:	bb 24       	eor	r11, r11
    42f0:	cc 24       	eor	r12, r12
    42f2:	dd 24       	eor	r13, r13
    42f4:	ee 24       	eor	r14, r14
    42f6:	ff 24       	eor	r15, r15
    42f8:	00 e0       	ldi	r16, 0x00	; 0
    42fa:	10 e0       	ldi	r17, 0x00	; 0
    42fc:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
    4300:	0d ad       	ldd	r16, Y+61	; 0x3d
    4302:	1e ad       	ldd	r17, Y+62	; 0x3e
    4304:	58 01       	movw	r10, r16
    4306:	00 e0       	ldi	r16, 0x00	; 0
    4308:	10 e0       	ldi	r17, 0x00	; 0
    430a:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
    430e:	a2 2e       	mov	r10, r18
#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
    4310:	18 ad       	ldd	r17, Y+56	; 0x38
    4312:	a1 0e       	add	r10, r17
    4314:	21 e0       	ldi	r18, 0x01	; 1
    4316:	a1 16       	cp	r10, r17
    4318:	08 f0       	brcs	.+2      	; 0x431c <fat_open+0x4ae>
    431a:	20 e0       	ldi	r18, 0x00	; 0
    431c:	ae a1       	ldd	r26, Y+38	; 0x26
    431e:	3a 0f       	add	r19, r26
    4320:	11 e0       	ldi	r17, 0x01	; 1
    4322:	3a 17       	cp	r19, r26
    4324:	08 f0       	brcs	.+2      	; 0x4328 <fat_open+0x4ba>
    4326:	10 e0       	ldi	r17, 0x00	; 0
    4328:	22 2e       	mov	r2, r18
    432a:	23 0e       	add	r2, r19
    432c:	21 e0       	ldi	r18, 0x01	; 1
    432e:	23 16       	cp	r2, r19
    4330:	08 f0       	brcs	.+2      	; 0x4334 <fat_open+0x4c6>
    4332:	20 e0       	ldi	r18, 0x00	; 0
    4334:	12 2b       	or	r17, r18
    4336:	bf a1       	ldd	r27, Y+39	; 0x27
    4338:	4b 0f       	add	r20, r27
    433a:	31 e0       	ldi	r19, 0x01	; 1
    433c:	4b 17       	cp	r20, r27
    433e:	08 f0       	brcs	.+2      	; 0x4342 <fat_open+0x4d4>
    4340:	30 e0       	ldi	r19, 0x00	; 0
    4342:	14 0f       	add	r17, r20
    4344:	21 e0       	ldi	r18, 0x01	; 1
    4346:	14 17       	cp	r17, r20
    4348:	08 f0       	brcs	.+2      	; 0x434c <fat_open+0x4de>
    434a:	20 e0       	ldi	r18, 0x00	; 0
    434c:	32 2b       	or	r19, r18
    434e:	e8 a5       	ldd	r30, Y+40	; 0x28
    4350:	5e 0f       	add	r21, r30
    4352:	21 e0       	ldi	r18, 0x01	; 1
    4354:	5e 17       	cp	r21, r30
    4356:	08 f0       	brcs	.+2      	; 0x435a <fat_open+0x4ec>
    4358:	20 e0       	ldi	r18, 0x00	; 0
    435a:	f3 2e       	mov	r15, r19
    435c:	f5 0e       	add	r15, r21
    435e:	31 e0       	ldi	r19, 0x01	; 1
    4360:	f5 16       	cp	r15, r21
    4362:	08 f0       	brcs	.+2      	; 0x4366 <fat_open+0x4f8>
    4364:	30 e0       	ldi	r19, 0x00	; 0
    4366:	23 2b       	or	r18, r19
    4368:	f9 a5       	ldd	r31, Y+41	; 0x29
    436a:	6f 0f       	add	r22, r31
    436c:	31 e0       	ldi	r19, 0x01	; 1
    436e:	6f 17       	cp	r22, r31
    4370:	08 f0       	brcs	.+2      	; 0x4374 <fat_open+0x506>
    4372:	30 e0       	ldi	r19, 0x00	; 0
    4374:	e2 2e       	mov	r14, r18
    4376:	e6 0e       	add	r14, r22
    4378:	21 e0       	ldi	r18, 0x01	; 1
    437a:	e6 16       	cp	r14, r22
    437c:	08 f0       	brcs	.+2      	; 0x4380 <fat_open+0x512>
    437e:	20 e0       	ldi	r18, 0x00	; 0
    4380:	32 2b       	or	r19, r18
    4382:	0a a5       	ldd	r16, Y+42	; 0x2a
    4384:	70 0f       	add	r23, r16
    4386:	21 e0       	ldi	r18, 0x01	; 1
    4388:	70 17       	cp	r23, r16
    438a:	08 f0       	brcs	.+2      	; 0x438e <fat_open+0x520>
    438c:	20 e0       	ldi	r18, 0x00	; 0
    438e:	d3 2e       	mov	r13, r19
    4390:	d7 0e       	add	r13, r23
    4392:	31 e0       	ldi	r19, 0x01	; 1
    4394:	d7 16       	cp	r13, r23
    4396:	08 f0       	brcs	.+2      	; 0x439a <fat_open+0x52c>
    4398:	30 e0       	ldi	r19, 0x00	; 0
    439a:	23 2b       	or	r18, r19
    439c:	3b a5       	ldd	r19, Y+43	; 0x2b
    439e:	83 0f       	add	r24, r19
    43a0:	31 e0       	ldi	r19, 0x01	; 1
    43a2:	4b a5       	ldd	r20, Y+43	; 0x2b
    43a4:	84 17       	cp	r24, r20
    43a6:	08 f0       	brcs	.+2      	; 0x43aa <fat_open+0x53c>
    43a8:	30 e0       	ldi	r19, 0x00	; 0
    43aa:	c2 2e       	mov	r12, r18
    43ac:	c8 0e       	add	r12, r24
    43ae:	21 e0       	ldi	r18, 0x01	; 1
    43b0:	c8 16       	cp	r12, r24
    43b2:	08 f0       	brcs	.+2      	; 0x43b6 <fat_open+0x548>
    43b4:	20 e0       	ldi	r18, 0x00	; 0
    43b6:	b3 2e       	mov	r11, r19
    43b8:	b2 2a       	or	r11, r18
    43ba:	5c a9       	ldd	r21, Y+52	; 0x34
    43bc:	95 0f       	add	r25, r21
    43be:	b9 0e       	add	r11, r25

#if FAT_FAT32_SUPPORT
    if(partition->type == PARTITION_TYPE_FAT16)
#endif
    {
        header->root_dir_offset = /* jump to fats */
    43c0:	a0 92 ae 04 	sts	0x04AE, r10
    43c4:	20 92 af 04 	sts	0x04AF, r2
    43c8:	10 93 b0 04 	sts	0x04B0, r17
    43cc:	f0 92 b1 04 	sts	0x04B1, r15
    43d0:	e0 92 b2 04 	sts	0x04B2, r14
    43d4:	d0 92 b3 04 	sts	0x04B3, r13
    43d8:	c0 92 b4 04 	sts	0x04B4, r12
    43dc:	b0 92 b5 04 	sts	0x04B5, r11
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
                                      /* skip root directory entries */
                                      (offset_t) max_root_entries * 32;
    43e0:	22 96       	adiw	r28, 0x02	; 2
    43e2:	ee ad       	ldd	r30, Y+62	; 0x3e
    43e4:	ff ad       	ldd	r31, Y+63	; 0x3f
    43e6:	22 97       	sbiw	r28, 0x02	; 2
    43e8:	9f 01       	movw	r18, r30
    43ea:	40 e0       	ldi	r20, 0x00	; 0
    43ec:	50 e0       	ldi	r21, 0x00	; 0
    43ee:	60 e0       	ldi	r22, 0x00	; 0
    43f0:	70 e0       	ldi	r23, 0x00	; 0
    43f2:	80 e0       	ldi	r24, 0x00	; 0
    43f4:	90 e0       	ldi	r25, 0x00	; 0
    43f6:	05 e0       	ldi	r16, 0x05	; 5
    43f8:	0e 94 93 02 	call	0x526	; 0x526 <__ashldi3>
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
                                      header->root_dir_offset +
    43fc:	2a 0d       	add	r18, r10
    43fe:	a1 e0       	ldi	r26, 0x01	; 1
    4400:	2a 15       	cp	r18, r10
    4402:	08 f0       	brcs	.+2      	; 0x4406 <fat_open+0x598>
    4404:	a0 e0       	ldi	r26, 0x00	; 0
    4406:	32 0d       	add	r19, r2
    4408:	f1 e0       	ldi	r31, 0x01	; 1
    440a:	32 15       	cp	r19, r2
    440c:	08 f0       	brcs	.+2      	; 0x4410 <fat_open+0x5a2>
    440e:	f0 e0       	ldi	r31, 0x00	; 0
    4410:	a3 0f       	add	r26, r19
    4412:	e1 e0       	ldi	r30, 0x01	; 1
    4414:	a3 17       	cp	r26, r19
    4416:	08 f0       	brcs	.+2      	; 0x441a <fat_open+0x5ac>
    4418:	e0 e0       	ldi	r30, 0x00	; 0
    441a:	fe 2b       	or	r31, r30
    441c:	41 0f       	add	r20, r17
    441e:	e1 e0       	ldi	r30, 0x01	; 1
    4420:	41 17       	cp	r20, r17
    4422:	08 f0       	brcs	.+2      	; 0x4426 <fat_open+0x5b8>
    4424:	e0 e0       	ldi	r30, 0x00	; 0
    4426:	f4 0f       	add	r31, r20
    4428:	31 e0       	ldi	r19, 0x01	; 1
    442a:	f4 17       	cp	r31, r20
    442c:	08 f0       	brcs	.+2      	; 0x4430 <fat_open+0x5c2>
    442e:	30 e0       	ldi	r19, 0x00	; 0
    4430:	e3 2b       	or	r30, r19
    4432:	5f 0d       	add	r21, r15
    4434:	31 e0       	ldi	r19, 0x01	; 1
    4436:	5f 15       	cp	r21, r15
    4438:	08 f0       	brcs	.+2      	; 0x443c <fat_open+0x5ce>
    443a:	30 e0       	ldi	r19, 0x00	; 0
    443c:	e5 0f       	add	r30, r21
    443e:	41 e0       	ldi	r20, 0x01	; 1
    4440:	e5 17       	cp	r30, r21
    4442:	08 f0       	brcs	.+2      	; 0x4446 <fat_open+0x5d8>
    4444:	40 e0       	ldi	r20, 0x00	; 0
    4446:	34 2b       	or	r19, r20
    4448:	6e 0d       	add	r22, r14
    444a:	41 e0       	ldi	r20, 0x01	; 1
    444c:	6e 15       	cp	r22, r14
    444e:	08 f0       	brcs	.+2      	; 0x4452 <fat_open+0x5e4>
    4450:	40 e0       	ldi	r20, 0x00	; 0
    4452:	b3 2f       	mov	r27, r19
    4454:	b6 0f       	add	r27, r22
    4456:	31 e0       	ldi	r19, 0x01	; 1
    4458:	b6 17       	cp	r27, r22
    445a:	08 f0       	brcs	.+2      	; 0x445e <fat_open+0x5f0>
    445c:	30 e0       	ldi	r19, 0x00	; 0
    445e:	43 2b       	or	r20, r19
    4460:	7d 0d       	add	r23, r13
    4462:	31 e0       	ldi	r19, 0x01	; 1
    4464:	7d 15       	cp	r23, r13
    4466:	08 f0       	brcs	.+2      	; 0x446a <fat_open+0x5fc>
    4468:	30 e0       	ldi	r19, 0x00	; 0
    446a:	47 0f       	add	r20, r23
    446c:	51 e0       	ldi	r21, 0x01	; 1
    446e:	47 17       	cp	r20, r23
    4470:	08 f0       	brcs	.+2      	; 0x4474 <fat_open+0x606>
    4472:	50 e0       	ldi	r21, 0x00	; 0
    4474:	35 2b       	or	r19, r21
    4476:	5c 2d       	mov	r21, r12
    4478:	58 0f       	add	r21, r24
    447a:	61 e0       	ldi	r22, 0x01	; 1
    447c:	5c 15       	cp	r21, r12
    447e:	08 f0       	brcs	.+2      	; 0x4482 <fat_open+0x614>
    4480:	60 e0       	ldi	r22, 0x00	; 0
    4482:	35 0f       	add	r19, r21
    4484:	81 e0       	ldi	r24, 0x01	; 1
    4486:	35 17       	cp	r19, r21
    4488:	08 f0       	brcs	.+2      	; 0x448c <fat_open+0x61e>
    448a:	80 e0       	ldi	r24, 0x00	; 0
    448c:	86 2b       	or	r24, r22
    448e:	b9 0e       	add	r11, r25
    4490:	8b 0d       	add	r24, r11
        header->root_dir_offset = /* jump to fats */
                                  header->fat_offset +
                                  /* jump to root directory entries */
                                  (offset_t) fat_copies * sectors_per_fat * bytes_per_sector;

        header->cluster_zero_offset = /* jump to root directory entries */
    4492:	20 93 a6 04 	sts	0x04A6, r18
    4496:	a0 93 a7 04 	sts	0x04A7, r26
    449a:	f0 93 a8 04 	sts	0x04A8, r31
    449e:	e0 93 a9 04 	sts	0x04A9, r30
    44a2:	b0 93 aa 04 	sts	0x04AA, r27
    44a6:	40 93 ab 04 	sts	0x04AB, r20
    44aa:	30 93 ac 04 	sts	0x04AC, r19
    44ae:	80 93 ad 04 	sts	0x04AD, r24
    44b2:	93 c0       	rjmp	.+294    	; 0x45da <fat_open+0x76c>
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;
    44b4:	2c a5       	ldd	r18, Y+44	; 0x2c
    44b6:	3d a5       	ldd	r19, Y+45	; 0x2d
    44b8:	40 e0       	ldi	r20, 0x00	; 0
    44ba:	50 e0       	ldi	r21, 0x00	; 0
    44bc:	60 e0       	ldi	r22, 0x00	; 0
    44be:	70 e0       	ldi	r23, 0x00	; 0
    44c0:	80 e0       	ldi	r24, 0x00	; 0
    44c2:	90 e0       	ldi	r25, 0x00	; 0
    44c4:	a9 2c       	mov	r10, r9
    44c6:	bb 24       	eor	r11, r11
    44c8:	cc 24       	eor	r12, r12
    44ca:	dd 24       	eor	r13, r13
    44cc:	ee 24       	eor	r14, r14
    44ce:	ff 24       	eor	r15, r15
    44d0:	00 e0       	ldi	r16, 0x00	; 0
    44d2:	10 e0       	ldi	r17, 0x00	; 0
    44d4:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
    44d8:	e9 ac       	ldd	r14, Y+57	; 0x39
    44da:	fa ac       	ldd	r15, Y+58	; 0x3a
    44dc:	0b ad       	ldd	r16, Y+59	; 0x3b
    44de:	1c ad       	ldd	r17, Y+60	; 0x3c
    44e0:	17 01       	movw	r2, r14
    44e2:	28 01       	movw	r4, r16
    44e4:	57 01       	movw	r10, r14
    44e6:	62 01       	movw	r12, r4
    44e8:	ee 24       	eor	r14, r14
    44ea:	ff 24       	eor	r15, r15
    44ec:	00 e0       	ldi	r16, 0x00	; 0
    44ee:	10 e0       	ldi	r17, 0x00	; 0
    44f0:	0e 94 58 01 	call	0x2b0	; 0x2b0 <__muldi3>
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
                                      header->fat_offset +
    44f4:	e8 ad       	ldd	r30, Y+56	; 0x38
    44f6:	e2 0f       	add	r30, r18
    44f8:	f1 e0       	ldi	r31, 0x01	; 1
    44fa:	e2 17       	cp	r30, r18
    44fc:	08 f0       	brcs	.+2      	; 0x4500 <fat_open+0x692>
    44fe:	f0 e0       	ldi	r31, 0x00	; 0
    4500:	ae a1       	ldd	r26, Y+38	; 0x26
    4502:	a3 0f       	add	r26, r19
    4504:	21 e0       	ldi	r18, 0x01	; 1
    4506:	a3 17       	cp	r26, r19
    4508:	08 f0       	brcs	.+2      	; 0x450c <fat_open+0x69e>
    450a:	20 e0       	ldi	r18, 0x00	; 0
    450c:	fa 0f       	add	r31, r26
    450e:	31 e0       	ldi	r19, 0x01	; 1
    4510:	fa 17       	cp	r31, r26
    4512:	08 f0       	brcs	.+2      	; 0x4516 <fat_open+0x6a8>
    4514:	30 e0       	ldi	r19, 0x00	; 0
    4516:	23 2b       	or	r18, r19
    4518:	af a1       	ldd	r26, Y+39	; 0x27
    451a:	a4 0f       	add	r26, r20
    451c:	31 e0       	ldi	r19, 0x01	; 1
    451e:	a4 17       	cp	r26, r20
    4520:	08 f0       	brcs	.+2      	; 0x4524 <fat_open+0x6b6>
    4522:	30 e0       	ldi	r19, 0x00	; 0
    4524:	b2 2f       	mov	r27, r18
    4526:	ba 0f       	add	r27, r26
    4528:	21 e0       	ldi	r18, 0x01	; 1
    452a:	ba 17       	cp	r27, r26
    452c:	08 f0       	brcs	.+2      	; 0x4530 <fat_open+0x6c2>
    452e:	20 e0       	ldi	r18, 0x00	; 0
    4530:	32 2b       	or	r19, r18
    4532:	48 a5       	ldd	r20, Y+40	; 0x28
    4534:	45 0f       	add	r20, r21
    4536:	21 e0       	ldi	r18, 0x01	; 1
    4538:	45 17       	cp	r20, r21
    453a:	08 f0       	brcs	.+2      	; 0x453e <fat_open+0x6d0>
    453c:	20 e0       	ldi	r18, 0x00	; 0
    453e:	a3 2f       	mov	r26, r19
    4540:	a4 0f       	add	r26, r20
    4542:	31 e0       	ldi	r19, 0x01	; 1
    4544:	a4 17       	cp	r26, r20
    4546:	08 f0       	brcs	.+2      	; 0x454a <fat_open+0x6dc>
    4548:	30 e0       	ldi	r19, 0x00	; 0
    454a:	23 2b       	or	r18, r19
    454c:	49 a5       	ldd	r20, Y+41	; 0x29
    454e:	46 0f       	add	r20, r22
    4550:	31 e0       	ldi	r19, 0x01	; 1
    4552:	46 17       	cp	r20, r22
    4554:	08 f0       	brcs	.+2      	; 0x4558 <fat_open+0x6ea>
    4556:	30 e0       	ldi	r19, 0x00	; 0
    4558:	62 2f       	mov	r22, r18
    455a:	64 0f       	add	r22, r20
    455c:	21 e0       	ldi	r18, 0x01	; 1
    455e:	64 17       	cp	r22, r20
    4560:	08 f0       	brcs	.+2      	; 0x4564 <fat_open+0x6f6>
    4562:	20 e0       	ldi	r18, 0x00	; 0
    4564:	32 2b       	or	r19, r18
    4566:	4a a5       	ldd	r20, Y+42	; 0x2a
    4568:	47 0f       	add	r20, r23
    456a:	21 e0       	ldi	r18, 0x01	; 1
    456c:	47 17       	cp	r20, r23
    456e:	08 f0       	brcs	.+2      	; 0x4572 <fat_open+0x704>
    4570:	20 e0       	ldi	r18, 0x00	; 0
    4572:	34 0f       	add	r19, r20
    4574:	51 e0       	ldi	r21, 0x01	; 1
    4576:	34 17       	cp	r19, r20
    4578:	08 f0       	brcs	.+2      	; 0x457c <fat_open+0x70e>
    457a:	50 e0       	ldi	r21, 0x00	; 0
    457c:	25 2b       	or	r18, r21
    457e:	4b a5       	ldd	r20, Y+43	; 0x2b
    4580:	48 0f       	add	r20, r24
    4582:	71 e0       	ldi	r23, 0x01	; 1
    4584:	48 17       	cp	r20, r24
    4586:	08 f0       	brcs	.+2      	; 0x458a <fat_open+0x71c>
    4588:	70 e0       	ldi	r23, 0x00	; 0
    458a:	52 2f       	mov	r21, r18
    458c:	54 0f       	add	r21, r20
    458e:	81 e0       	ldi	r24, 0x01	; 1
    4590:	54 17       	cp	r21, r20
    4592:	08 f0       	brcs	.+2      	; 0x4596 <fat_open+0x728>
    4594:	80 e0       	ldi	r24, 0x00	; 0
    4596:	87 2b       	or	r24, r23
    4598:	fc a8       	ldd	r15, Y+52	; 0x34
    459a:	9f 0d       	add	r25, r15
    459c:	89 0f       	add	r24, r25
                                      (offset_t) max_root_entries * 32;
    }
#if FAT_FAT32_SUPPORT
    else
    {
        header->cluster_zero_offset = /* jump to fats */
    459e:	e0 93 a6 04 	sts	0x04A6, r30
    45a2:	f0 93 a7 04 	sts	0x04A7, r31
    45a6:	b0 93 a8 04 	sts	0x04A8, r27
    45aa:	a0 93 a9 04 	sts	0x04A9, r26
    45ae:	60 93 aa 04 	sts	0x04AA, r22
    45b2:	30 93 ab 04 	sts	0x04AB, r19
    45b6:	50 93 ac 04 	sts	0x04AC, r21
    45ba:	80 93 ad 04 	sts	0x04AD, r24
                                      header->fat_offset +
                                      /* skip fats */
                                      (offset_t) fat_copies * sectors_per_fat32 * bytes_per_sector;

        header->root_dir_cluster = cluster_root_dir;
    45be:	27 96       	adiw	r28, 0x07	; 7
    45c0:	0c ad       	ldd	r16, Y+60	; 0x3c
    45c2:	1d ad       	ldd	r17, Y+61	; 0x3d
    45c4:	2e ad       	ldd	r18, Y+62	; 0x3e
    45c6:	3f ad       	ldd	r19, Y+63	; 0x3f
    45c8:	27 97       	sbiw	r28, 0x07	; 7
    45ca:	00 93 b6 04 	sts	0x04B6, r16
    45ce:	10 93 b7 04 	sts	0x04B7, r17
    45d2:	20 93 b8 04 	sts	0x04B8, r18
    45d6:	30 93 b9 04 	sts	0x04B9, r19
    45da:	2c e8       	ldi	r18, 0x8C	; 140
    45dc:	34 e0       	ldi	r19, 0x04	; 4
    45de:	06 c0       	rjmp	.+12     	; 0x45ec <fat_open+0x77e>
    if(!fat_read_header(fs))
    {
#if USE_DYNAMIC_MEMORY
        free(fs);
#else
        fs->partition = 0;
    45e0:	10 92 8d 04 	sts	0x048D, r1
    45e4:	10 92 8c 04 	sts	0x048C, r1
       !partition->device_write_interval
#else
       0
#endif
      )
        return 0;
    45e8:	20 e0       	ldi	r18, 0x00	; 0
    45ea:	30 e0       	ldi	r19, 0x00	; 0
#endif
        return 0;
    }
    
    return fs;
}
    45ec:	c9 01       	movw	r24, r18
    45ee:	ca 5b       	subi	r28, 0xBA	; 186
    45f0:	df 4f       	sbci	r29, 0xFF	; 255
    45f2:	0f b6       	in	r0, 0x3f	; 63
    45f4:	f8 94       	cli
    45f6:	de bf       	out	0x3e, r29	; 62
    45f8:	0f be       	out	0x3f, r0	; 63
    45fa:	cd bf       	out	0x3d, r28	; 61
    45fc:	cf 91       	pop	r28
    45fe:	df 91       	pop	r29
    4600:	1f 91       	pop	r17
    4602:	0f 91       	pop	r16
    4604:	ff 90       	pop	r15
    4606:	ef 90       	pop	r14
    4608:	df 90       	pop	r13
    460a:	cf 90       	pop	r12
    460c:	bf 90       	pop	r11
    460e:	af 90       	pop	r10
    4610:	9f 90       	pop	r9
    4612:	8f 90       	pop	r8
    4614:	7f 90       	pop	r7
    4616:	6f 90       	pop	r6
    4618:	5f 90       	pop	r5
    461a:	4f 90       	pop	r4
    461c:	3f 90       	pop	r3
    461e:	2f 90       	pop	r2
    4620:	08 95       	ret
#else
    struct fat_fs_struct* fs = fat_fs_handles;
    uint8_t i;
    for(i = 0; i < FAT_FS_COUNT; ++i)
    {
        if(!fs->partition)
    4622:	80 91 8c 04 	lds	r24, 0x048C
    4626:	90 91 8d 04 	lds	r25, 0x048D
    462a:	00 97       	sbiw	r24, 0x00	; 0
    462c:	e9 f6       	brne	.-70     	; 0x45e8 <fat_open+0x77a>
    462e:	4e cc       	rjmp	.-1892   	; 0x3ecc <fat_open+0x5e>

00004630 <fat_open_file>:
 * \param[in] dir_entry The directory entry of the file to open.
 * \returns The file handle, or 0 on failure.
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    4630:	cf 93       	push	r28
    4632:	df 93       	push	r29
    4634:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
    4636:	00 97       	sbiw	r24, 0x00	; 0
    4638:	89 f1       	breq	.+98     	; 0x469c <fat_open_file+0x6c>
    463a:	10 97       	sbiw	r26, 0x00	; 0
    463c:	79 f1       	breq	.+94     	; 0x469c <fat_open_file+0x6c>
    463e:	90 96       	adiw	r26, 0x20	; 32
    4640:	2c 91       	ld	r18, X
    4642:	90 97       	sbiw	r26, 0x20	; 32
    4644:	24 fd       	sbrc	r18, 4
    4646:	2a c0       	rjmp	.+84     	; 0x469c <fat_open_file+0x6c>
    4648:	2f c0       	rjmp	.+94     	; 0x46a8 <fat_open_file+0x78>
    }
    if(i >= FAT_FILE_COUNT)
        return 0;
#endif
    
    memcpy(&fd->dir_entry, dir_entry, sizeof(*dir_entry));
    464a:	cf e4       	ldi	r28, 0x4F	; 79
    464c:	d4 e0       	ldi	r29, 0x04	; 4
    464e:	fd 01       	movw	r30, r26
    4650:	21 e3       	ldi	r18, 0x31	; 49
    4652:	01 90       	ld	r0, Z+
    4654:	09 92       	st	Y+, r0
    4656:	21 50       	subi	r18, 0x01	; 1
    4658:	e1 f7       	brne	.-8      	; 0x4652 <fat_open_file+0x22>
    fd->fs = fs;
    465a:	90 93 4e 04 	sts	0x044E, r25
    465e:	80 93 4d 04 	sts	0x044D, r24
    fd->pos = 0;
    4662:	e0 e8       	ldi	r30, 0x80	; 128
    4664:	f4 e0       	ldi	r31, 0x04	; 4
    4666:	10 92 80 04 	sts	0x0480, r1
    466a:	11 82       	std	Z+1, r1	; 0x01
    466c:	12 82       	std	Z+2, r1	; 0x02
    466e:	13 82       	std	Z+3, r1	; 0x03
    4670:	14 82       	std	Z+4, r1	; 0x04
    4672:	15 82       	std	Z+5, r1	; 0x05
    4674:	16 82       	std	Z+6, r1	; 0x06
    4676:	17 82       	std	Z+7, r1	; 0x07
    fd->pos_cluster = dir_entry->cluster;
    4678:	91 96       	adiw	r26, 0x21	; 33
    467a:	2d 91       	ld	r18, X+
    467c:	3d 91       	ld	r19, X+
    467e:	4d 91       	ld	r20, X+
    4680:	5c 91       	ld	r21, X
    4682:	94 97       	sbiw	r26, 0x24	; 36
    4684:	20 93 88 04 	sts	0x0488, r18
    4688:	30 93 89 04 	sts	0x0489, r19
    468c:	40 93 8a 04 	sts	0x048A, r20
    4690:	50 93 8b 04 	sts	0x048B, r21

    return fd;
    4694:	9f 01       	movw	r18, r30
    4696:	23 53       	subi	r18, 0x33	; 51
    4698:	30 40       	sbci	r19, 0x00	; 0
    469a:	02 c0       	rjmp	.+4      	; 0x46a0 <fat_open_file+0x70>
 * \see fat_close_file
 */
struct fat_file_struct* fat_open_file(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    if(!fs || !dir_entry || (dir_entry->attributes & FAT_ATTRIB_DIR))
        return 0;
    469c:	20 e0       	ldi	r18, 0x00	; 0
    469e:	30 e0       	ldi	r19, 0x00	; 0
    fd->fs = fs;
    fd->pos = 0;
    fd->pos_cluster = dir_entry->cluster;

    return fd;
}
    46a0:	c9 01       	movw	r24, r18
    46a2:	df 91       	pop	r29
    46a4:	cf 91       	pop	r28
    46a6:	08 95       	ret
#else
    struct fat_file_struct* fd = fat_file_handles;
    uint8_t i;
    for(i = 0; i < FAT_FILE_COUNT; ++i)
    {
        if(!fd->fs)
    46a8:	20 91 4d 04 	lds	r18, 0x044D
    46ac:	30 91 4e 04 	lds	r19, 0x044E
    46b0:	21 15       	cp	r18, r1
    46b2:	31 05       	cpc	r19, r1
    46b4:	99 f7       	brne	.-26     	; 0x469c <fat_open_file+0x6c>
    46b6:	c9 cf       	rjmp	.-110    	; 0x464a <fat_open_file+0x1a>

000046b8 <fat_close_file>:
 * \param[in] fd The file handle of the file to close.
 * \see fat_open_file
 */
void fat_close_file(struct fat_file_struct* fd)
{
    if(fd)
    46b8:	00 97       	sbiw	r24, 0x00	; 0
    46ba:	19 f0       	breq	.+6      	; 0x46c2 <fat_close_file+0xa>
#if USE_DYNAMIC_MEMORY
        free(fd);
#else
        fd->fs = 0;
    46bc:	fc 01       	movw	r30, r24
    46be:	11 82       	std	Z+1, r1	; 0x01
    46c0:	10 82       	st	Z, r1
    46c2:	08 95       	ret

000046c4 <fat_read_file>:
 * \param[in] buffer_len The amount of data to read.
 * \returns The number of bytes read, 0 on end of file, or -1 on failure.
 * \see fat_write_file
 */
intptr_t fat_read_file(struct fat_file_struct* fd, uint8_t* buffer, uintptr_t buffer_len)
{
    46c4:	2f 92       	push	r2
    46c6:	3f 92       	push	r3
    46c8:	4f 92       	push	r4
    46ca:	5f 92       	push	r5
    46cc:	6f 92       	push	r6
    46ce:	7f 92       	push	r7
    46d0:	8f 92       	push	r8
    46d2:	9f 92       	push	r9
    46d4:	af 92       	push	r10
    46d6:	bf 92       	push	r11
    46d8:	cf 92       	push	r12
    46da:	df 92       	push	r13
    46dc:	ef 92       	push	r14
    46de:	ff 92       	push	r15
    46e0:	0f 93       	push	r16
    46e2:	1f 93       	push	r17
    46e4:	df 93       	push	r29
    46e6:	cf 93       	push	r28
    46e8:	cd b7       	in	r28, 0x3d	; 61
    46ea:	de b7       	in	r29, 0x3e	; 62
    46ec:	63 97       	sbiw	r28, 0x13	; 19
    46ee:	0f b6       	in	r0, 0x3f	; 63
    46f0:	f8 94       	cli
    46f2:	de bf       	out	0x3e, r29	; 62
    46f4:	0f be       	out	0x3f, r0	; 63
    46f6:	cd bf       	out	0x3d, r28	; 61
    46f8:	1c 01       	movw	r2, r24
    46fa:	7e 87       	std	Y+14, r23	; 0x0e
    46fc:	6d 87       	std	Y+13, r22	; 0x0d
    46fe:	5a 87       	std	Y+10, r21	; 0x0a
    4700:	49 87       	std	Y+9, r20	; 0x09
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    4702:	00 97       	sbiw	r24, 0x00	; 0
    4704:	09 f4       	brne	.+2      	; 0x4708 <fat_read_file+0x44>
    4706:	8b c2       	rjmp	.+1302   	; 0x4c1e <fat_read_file+0x55a>
    4708:	61 15       	cp	r22, r1
    470a:	71 05       	cpc	r23, r1
    470c:	09 f4       	brne	.+2      	; 0x4710 <fat_read_file+0x4c>
    470e:	87 c2       	rjmp	.+1294   	; 0x4c1e <fat_read_file+0x55a>
    4710:	41 15       	cp	r20, r1
    4712:	51 05       	cpc	r21, r1
    4714:	09 f4       	brne	.+2      	; 0x4718 <fat_read_file+0x54>
    4716:	83 c2       	rjmp	.+1286   	; 0x4c1e <fat_read_file+0x55a>
        return -1;

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
    4718:	dc 01       	movw	r26, r24
    471a:	d3 96       	adiw	r26, 0x33	; 51
    471c:	bc 91       	ld	r27, X
    471e:	b9 83       	std	Y+1, r27	; 0x01
    4720:	fc 01       	movw	r30, r24
    4722:	f4 a9       	ldd	r31, Z+52	; 0x34
    4724:	fa 83       	std	Y+2, r31	; 0x02
    4726:	dc 01       	movw	r26, r24
    4728:	d5 96       	adiw	r26, 0x35	; 53
    472a:	bc 91       	ld	r27, X
    472c:	bb 83       	std	Y+3, r27	; 0x03
    472e:	fc 01       	movw	r30, r24
    4730:	f6 a9       	ldd	r31, Z+54	; 0x36
    4732:	fc 83       	std	Y+4, r31	; 0x04
    4734:	dc 01       	movw	r26, r24
    4736:	d7 96       	adiw	r26, 0x37	; 55
    4738:	bc 91       	ld	r27, X
    473a:	bd 83       	std	Y+5, r27	; 0x05
    473c:	fc 01       	movw	r30, r24
    473e:	f0 ad       	ldd	r31, Z+56	; 0x38
    4740:	fe 83       	std	Y+6, r31	; 0x06
    4742:	dc 01       	movw	r26, r24
    4744:	d9 96       	adiw	r26, 0x39	; 57
    4746:	bc 91       	ld	r27, X
    4748:	bf 83       	std	Y+7, r27	; 0x07
    474a:	fc 01       	movw	r30, r24
    474c:	f2 ad       	ldd	r31, Z+58	; 0x3a
    474e:	f8 87       	std	Y+8, r31	; 0x08
    4750:	dc 01       	movw	r26, r24
    4752:	97 96       	adiw	r26, 0x27	; 39
    4754:	4d 90       	ld	r4, X+
    4756:	5d 90       	ld	r5, X+
    4758:	6d 90       	ld	r6, X+
    475a:	7c 90       	ld	r7, X
    475c:	9a 97       	sbiw	r26, 0x2a	; 42
    475e:	9a 01       	movw	r18, r20
    4760:	40 e0       	ldi	r20, 0x00	; 0
    4762:	50 e0       	ldi	r21, 0x00	; 0
    4764:	60 e0       	ldi	r22, 0x00	; 0
    4766:	70 e0       	ldi	r23, 0x00	; 0
    4768:	cb 01       	movw	r24, r22
    476a:	e9 80       	ldd	r14, Y+1	; 0x01
    476c:	e2 0e       	add	r14, r18
    476e:	f1 e0       	ldi	r31, 0x01	; 1
    4770:	e2 16       	cp	r14, r18
    4772:	08 f0       	brcs	.+2      	; 0x4776 <fat_read_file+0xb2>
    4774:	f0 e0       	ldi	r31, 0x00	; 0
    4776:	ea 81       	ldd	r30, Y+2	; 0x02
    4778:	e3 0f       	add	r30, r19
    477a:	11 e0       	ldi	r17, 0x01	; 1
    477c:	e3 17       	cp	r30, r19
    477e:	08 f0       	brcs	.+2      	; 0x4782 <fat_read_file+0xbe>
    4780:	10 e0       	ldi	r17, 0x00	; 0
    4782:	cf 2e       	mov	r12, r31
    4784:	ce 0e       	add	r12, r30
    4786:	b1 e0       	ldi	r27, 0x01	; 1
    4788:	ce 16       	cp	r12, r30
    478a:	08 f0       	brcs	.+2      	; 0x478e <fat_read_file+0xca>
    478c:	b0 e0       	ldi	r27, 0x00	; 0
    478e:	1b 2b       	or	r17, r27
    4790:	eb 81       	ldd	r30, Y+3	; 0x03
    4792:	e4 0f       	add	r30, r20
    4794:	b1 e0       	ldi	r27, 0x01	; 1
    4796:	e4 17       	cp	r30, r20
    4798:	08 f0       	brcs	.+2      	; 0x479c <fat_read_file+0xd8>
    479a:	b0 e0       	ldi	r27, 0x00	; 0
    479c:	a1 2f       	mov	r26, r17
    479e:	ae 0f       	add	r26, r30
    47a0:	11 e0       	ldi	r17, 0x01	; 1
    47a2:	ae 17       	cp	r26, r30
    47a4:	08 f0       	brcs	.+2      	; 0x47a8 <fat_read_file+0xe4>
    47a6:	10 e0       	ldi	r17, 0x00	; 0
    47a8:	b1 2b       	or	r27, r17
    47aa:	fc 80       	ldd	r15, Y+4	; 0x04
    47ac:	f5 0e       	add	r15, r21
    47ae:	11 e0       	ldi	r17, 0x01	; 1
    47b0:	f5 16       	cp	r15, r21
    47b2:	08 f0       	brcs	.+2      	; 0x47b6 <fat_read_file+0xf2>
    47b4:	10 e0       	ldi	r17, 0x00	; 0
    47b6:	bf 0d       	add	r27, r15
    47b8:	01 e0       	ldi	r16, 0x01	; 1
    47ba:	bf 15       	cp	r27, r15
    47bc:	08 f0       	brcs	.+2      	; 0x47c0 <fat_read_file+0xfc>
    47be:	00 e0       	ldi	r16, 0x00	; 0
    47c0:	10 2b       	or	r17, r16
    47c2:	dd 80       	ldd	r13, Y+5	; 0x05
    47c4:	d6 0e       	add	r13, r22
    47c6:	01 e0       	ldi	r16, 0x01	; 1
    47c8:	d6 16       	cp	r13, r22
    47ca:	08 f0       	brcs	.+2      	; 0x47ce <fat_read_file+0x10a>
    47cc:	00 e0       	ldi	r16, 0x00	; 0
    47ce:	1d 0d       	add	r17, r13
    47d0:	ff 24       	eor	r15, r15
    47d2:	f3 94       	inc	r15
    47d4:	1d 15       	cp	r17, r13
    47d6:	08 f0       	brcs	.+2      	; 0x47da <fat_read_file+0x116>
    47d8:	ff 24       	eor	r15, r15
    47da:	0f 29       	or	r16, r15
    47dc:	fe 80       	ldd	r15, Y+6	; 0x06
    47de:	f7 0e       	add	r15, r23
    47e0:	dd 24       	eor	r13, r13
    47e2:	d3 94       	inc	r13
    47e4:	f7 16       	cp	r15, r23
    47e6:	08 f0       	brcs	.+2      	; 0x47ea <fat_read_file+0x126>
    47e8:	dd 24       	eor	r13, r13
    47ea:	0f 0d       	add	r16, r15
    47ec:	aa 24       	eor	r10, r10
    47ee:	a3 94       	inc	r10
    47f0:	0f 15       	cp	r16, r15
    47f2:	08 f0       	brcs	.+2      	; 0x47f6 <fat_read_file+0x132>
    47f4:	aa 24       	eor	r10, r10
    47f6:	da 28       	or	r13, r10
    47f8:	af 80       	ldd	r10, Y+7	; 0x07
    47fa:	a8 0e       	add	r10, r24
    47fc:	88 24       	eor	r8, r8
    47fe:	83 94       	inc	r8
    4800:	a8 16       	cp	r10, r24
    4802:	08 f0       	brcs	.+2      	; 0x4806 <fat_read_file+0x142>
    4804:	88 24       	eor	r8, r8
    4806:	fd 2c       	mov	r15, r13
    4808:	fa 0c       	add	r15, r10
    480a:	e1 e0       	ldi	r30, 0x01	; 1
    480c:	fa 14       	cp	r15, r10
    480e:	08 f0       	brcs	.+2      	; 0x4812 <fat_read_file+0x14e>
    4810:	e0 e0       	ldi	r30, 0x00	; 0
    4812:	8e 2a       	or	r8, r30
    4814:	88 85       	ldd	r24, Y+8	; 0x08
    4816:	89 0f       	add	r24, r25
    4818:	88 0e       	add	r8, r24
    481a:	a3 01       	movw	r20, r6
    481c:	92 01       	movw	r18, r4
    481e:	60 e0       	ldi	r22, 0x00	; 0
    4820:	70 e0       	ldi	r23, 0x00	; 0
    4822:	cb 01       	movw	r24, r22
    4824:	98 15       	cp	r25, r8
    4826:	e0 f0       	brcs	.+56     	; 0x4860 <fat_read_file+0x19c>
    4828:	89 16       	cp	r8, r25
    482a:	21 f5       	brne	.+72     	; 0x4874 <fat_read_file+0x1b0>
    482c:	8f 15       	cp	r24, r15
    482e:	c0 f0       	brcs	.+48     	; 0x4860 <fat_read_file+0x19c>
    4830:	f8 16       	cp	r15, r24
    4832:	01 f5       	brne	.+64     	; 0x4874 <fat_read_file+0x1b0>
    4834:	70 17       	cp	r23, r16
    4836:	a0 f0       	brcs	.+40     	; 0x4860 <fat_read_file+0x19c>
    4838:	07 17       	cp	r16, r23
    483a:	e1 f4       	brne	.+56     	; 0x4874 <fat_read_file+0x1b0>
    483c:	61 17       	cp	r22, r17
    483e:	80 f0       	brcs	.+32     	; 0x4860 <fat_read_file+0x19c>
    4840:	16 17       	cp	r17, r22
    4842:	c1 f4       	brne	.+48     	; 0x4874 <fat_read_file+0x1b0>
    4844:	5b 17       	cp	r21, r27
    4846:	60 f0       	brcs	.+24     	; 0x4860 <fat_read_file+0x19c>
    4848:	b5 17       	cp	r27, r21
    484a:	a1 f4       	brne	.+40     	; 0x4874 <fat_read_file+0x1b0>
    484c:	4a 17       	cp	r20, r26
    484e:	40 f0       	brcs	.+16     	; 0x4860 <fat_read_file+0x19c>
    4850:	a4 17       	cp	r26, r20
    4852:	81 f4       	brne	.+32     	; 0x4874 <fat_read_file+0x1b0>
    4854:	3c 15       	cp	r19, r12
    4856:	20 f0       	brcs	.+8      	; 0x4860 <fat_read_file+0x19c>
    4858:	c3 16       	cp	r12, r19
    485a:	61 f4       	brne	.+24     	; 0x4874 <fat_read_file+0x1b0>
    485c:	4e 14       	cp	r4, r14
    485e:	50 f4       	brcc	.+20     	; 0x4874 <fat_read_file+0x1b0>
        buffer_len = fd->dir_entry.file_size - fd->pos;
    4860:	f2 01       	movw	r30, r4
    4862:	e9 80       	ldd	r14, Y+1	; 0x01
    4864:	fa 80       	ldd	r15, Y+2	; 0x02
    4866:	ee 19       	sub	r30, r14
    4868:	ff 09       	sbc	r31, r15
    486a:	fa 87       	std	Y+10, r31	; 0x0a
    486c:	e9 87       	std	Y+9, r30	; 0x09
    if(buffer_len == 0)
    486e:	30 97       	sbiw	r30, 0x00	; 0
    4870:	09 f4       	brne	.+2      	; 0x4874 <fat_read_file+0x1b0>
    4872:	d2 c1       	rjmp	.+932    	; 0x4c18 <fat_read_file+0x554>
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    4874:	d1 01       	movw	r26, r2
    4876:	ed 91       	ld	r30, X+
    4878:	fc 91       	ld	r31, X
    487a:	11 97       	sbiw	r26, 0x01	; 1
    487c:	e0 8c       	ldd	r14, Z+24	; 0x18
    487e:	f1 8c       	ldd	r15, Z+25	; 0x19
    4880:	fc 86       	std	Y+12, r15	; 0x0c
    4882:	eb 86       	std	Y+11, r14	; 0x0b
    cluster_t cluster_num = fd->pos_cluster;
    4884:	db 96       	adiw	r26, 0x3b	; 59
    4886:	ad 90       	ld	r10, X+
    4888:	bd 90       	ld	r11, X+
    488a:	cd 90       	ld	r12, X+
    488c:	dc 90       	ld	r13, X
    488e:	de 97       	sbiw	r26, 0x3e	; 62
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start reading */
    if(!cluster_num)
    4890:	a1 14       	cp	r10, r1
    4892:	b1 04       	cpc	r11, r1
    4894:	c1 04       	cpc	r12, r1
    4896:	d1 04       	cpc	r13, r1
    4898:	09 f0       	breq	.+2      	; 0x489c <fat_read_file+0x1d8>
    489a:	51 c0       	rjmp	.+162    	; 0x493e <fat_read_file+0x27a>
    {
        cluster_num = fd->dir_entry.cluster;
    489c:	93 96       	adiw	r26, 0x23	; 35
    489e:	ad 90       	ld	r10, X+
    48a0:	bd 90       	ld	r11, X+
    48a2:	cd 90       	ld	r12, X+
    48a4:	dc 90       	ld	r13, X
    48a6:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    48a8:	a1 14       	cp	r10, r1
    48aa:	b1 04       	cpc	r11, r1
    48ac:	c1 04       	cpc	r12, r1
    48ae:	d1 04       	cpc	r13, r1
    48b0:	91 f4       	brne	.+36     	; 0x48d6 <fat_read_file+0x212>
        {
            if(!fd->pos)
    48b2:	89 81       	ldd	r24, Y+1	; 0x01
    48b4:	fa 80       	ldd	r15, Y+2	; 0x02
    48b6:	8f 29       	or	r24, r15
    48b8:	0b 81       	ldd	r16, Y+3	; 0x03
    48ba:	80 2b       	or	r24, r16
    48bc:	1c 81       	ldd	r17, Y+4	; 0x04
    48be:	81 2b       	or	r24, r17
    48c0:	2d 81       	ldd	r18, Y+5	; 0x05
    48c2:	82 2b       	or	r24, r18
    48c4:	3e 81       	ldd	r19, Y+6	; 0x06
    48c6:	83 2b       	or	r24, r19
    48c8:	4f 81       	ldd	r20, Y+7	; 0x07
    48ca:	84 2b       	or	r24, r20
    48cc:	58 85       	ldd	r21, Y+8	; 0x08
    48ce:	85 2b       	or	r24, r21
    48d0:	09 f4       	brne	.+2      	; 0x48d4 <fat_read_file+0x210>
    48d2:	a2 c1       	rjmp	.+836    	; 0x4c18 <fat_read_file+0x554>
    48d4:	a4 c1       	rjmp	.+840    	; 0x4c1e <fat_read_file+0x55a>
                return 0;
            else
                return -1;
        }

        if(fd->pos)
    48d6:	89 81       	ldd	r24, Y+1	; 0x01
    48d8:	6a 81       	ldd	r22, Y+2	; 0x02
    48da:	86 2b       	or	r24, r22
    48dc:	7b 81       	ldd	r23, Y+3	; 0x03
    48de:	87 2b       	or	r24, r23
    48e0:	9c 81       	ldd	r25, Y+4	; 0x04
    48e2:	89 2b       	or	r24, r25
    48e4:	ad 81       	ldd	r26, Y+5	; 0x05
    48e6:	8a 2b       	or	r24, r26
    48e8:	be 81       	ldd	r27, Y+6	; 0x06
    48ea:	8b 2b       	or	r24, r27
    48ec:	ef 81       	ldd	r30, Y+7	; 0x07
    48ee:	8e 2b       	or	r24, r30
    48f0:	f8 85       	ldd	r31, Y+8	; 0x08
    48f2:	8f 2b       	or	r24, r31
    48f4:	21 f1       	breq	.+72     	; 0x493e <fat_read_file+0x27a>
        {
            uint32_t pos = fd->pos;
    48f6:	e9 80       	ldd	r14, Y+1	; 0x01
    48f8:	fa 80       	ldd	r15, Y+2	; 0x02
    48fa:	0b 81       	ldd	r16, Y+3	; 0x03
    48fc:	1c 81       	ldd	r17, Y+4	; 0x04
            while(pos >= cluster_size)
    48fe:	2b 85       	ldd	r18, Y+11	; 0x0b
    4900:	3c 85       	ldd	r19, Y+12	; 0x0c
    4902:	39 01       	movw	r6, r18
    4904:	88 24       	eor	r8, r8
    4906:	99 24       	eor	r9, r9
    4908:	b6 01       	movw	r22, r12
    490a:	a5 01       	movw	r20, r10
    490c:	11 c0       	rjmp	.+34     	; 0x4930 <fat_read_file+0x26c>
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
    490e:	d1 01       	movw	r26, r2
    4910:	8d 91       	ld	r24, X+
    4912:	9c 91       	ld	r25, X
    4914:	0e 94 40 12 	call	0x2480	; 0x2480 <fat_get_next_cluster>
    4918:	ab 01       	movw	r20, r22
    491a:	bc 01       	movw	r22, r24
                if(!cluster_num)
    491c:	41 15       	cp	r20, r1
    491e:	51 05       	cpc	r21, r1
    4920:	61 05       	cpc	r22, r1
    4922:	71 05       	cpc	r23, r1
    4924:	09 f4       	brne	.+2      	; 0x4928 <fat_read_file+0x264>
    4926:	7b c1       	rjmp	.+758    	; 0x4c1e <fat_read_file+0x55a>
    4928:	e6 18       	sub	r14, r6
    492a:	f7 08       	sbc	r15, r7
    492c:	08 09       	sbc	r16, r8
    492e:	19 09       	sbc	r17, r9
        }

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            while(pos >= cluster_size)
    4930:	e6 14       	cp	r14, r6
    4932:	f7 04       	cpc	r15, r7
    4934:	08 05       	cpc	r16, r8
    4936:	19 05       	cpc	r17, r9
    4938:	50 f7       	brcc	.-44     	; 0x490e <fat_read_file+0x24a>
    493a:	5a 01       	movw	r10, r20
    493c:	6b 01       	movw	r12, r22
        return 0;
    
    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    493e:	4b 84       	ldd	r4, Y+11	; 0x0b
    4940:	5c 84       	ldd	r5, Y+12	; 0x0c
    4942:	08 94       	sec
    4944:	41 08       	sbc	r4, r1
    4946:	51 08       	sbc	r5, r1
    4948:	e9 81       	ldd	r30, Y+1	; 0x01
    494a:	fa 81       	ldd	r31, Y+2	; 0x02
    494c:	4e 22       	and	r4, r30
    494e:	5f 22       	and	r5, r31
    4950:	69 84       	ldd	r6, Y+9	; 0x09
    4952:	7a 84       	ldd	r7, Y+10	; 0x0a
    4954:	3b 8a       	std	Y+19, r3	; 0x13
    4956:	2a 8a       	std	Y+18, r2	; 0x12
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    4958:	aa 89       	ldd	r26, Y+18	; 0x12
    495a:	bb 89       	ldd	r27, Y+19	; 0x13
    495c:	0d 91       	ld	r16, X+
    495e:	1c 91       	ld	r17, X
    4960:	c8 01       	movw	r24, r16
    4962:	b6 01       	movw	r22, r12
    4964:	a5 01       	movw	r20, r10
    4966:	0e 94 a2 18 	call	0x3144	; 0x3144 <fat_cluster_offset>
    496a:	a2 2f       	mov	r26, r18
    496c:	3f 87       	std	Y+15, r19	; 0x0f
    496e:	48 8b       	std	Y+16, r20	; 0x10
    4970:	59 8b       	std	Y+17, r21	; 0x11
        uint16_t copy_length = cluster_size - first_cluster_offset;
    4972:	8b 84       	ldd	r8, Y+11	; 0x0b
    4974:	9c 84       	ldd	r9, Y+12	; 0x0c
    4976:	84 18       	sub	r8, r4
    4978:	95 08       	sbc	r9, r5
    497a:	68 14       	cp	r6, r8
    497c:	79 04       	cpc	r7, r9
    497e:	08 f4       	brcc	.+2      	; 0x4982 <fat_read_file+0x2be>
    4980:	43 01       	movw	r8, r6
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    4982:	f8 01       	movw	r30, r16
    4984:	20 80       	ld	r2, Z
    4986:	31 80       	ldd	r3, Z+1	; 0x01
    
    /* read data */
    do
    {
        /* calculate data size to copy from cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    4988:	72 01       	movw	r14, r4
    498a:	00 e0       	ldi	r16, 0x00	; 0
    498c:	10 e0       	ldi	r17, 0x00	; 0
    498e:	20 e0       	ldi	r18, 0x00	; 0
    4990:	30 e0       	ldi	r19, 0x00	; 0
    4992:	a9 01       	movw	r20, r18
    4994:	49 82       	std	Y+1, r4	; 0x01
    4996:	fa 82       	std	Y+2, r15	; 0x02
    4998:	0b 83       	std	Y+3, r16	; 0x03
    499a:	1c 83       	std	Y+4, r17	; 0x04
    499c:	2d 83       	std	Y+5, r18	; 0x05
    499e:	3e 83       	std	Y+6, r19	; 0x06
    49a0:	4f 83       	std	Y+7, r20	; 0x07
    49a2:	58 87       	std	Y+8, r21	; 0x08
    49a4:	24 2d       	mov	r18, r4
    49a6:	2a 0f       	add	r18, r26
    49a8:	41 e0       	ldi	r20, 0x01	; 1
    49aa:	24 15       	cp	r18, r4
    49ac:	08 f0       	brcs	.+2      	; 0x49b0 <fat_read_file+0x2ec>
    49ae:	40 e0       	ldi	r20, 0x00	; 0
    49b0:	fa 81       	ldd	r31, Y+2	; 0x02
    49b2:	ff 84       	ldd	r15, Y+15	; 0x0f
    49b4:	ff 0d       	add	r31, r15
    49b6:	e1 e0       	ldi	r30, 0x01	; 1
    49b8:	0a 81       	ldd	r16, Y+2	; 0x02
    49ba:	f0 17       	cp	r31, r16
    49bc:	08 f0       	brcs	.+2      	; 0x49c0 <fat_read_file+0x2fc>
    49be:	e0 e0       	ldi	r30, 0x00	; 0
    49c0:	34 2f       	mov	r19, r20
    49c2:	3f 0f       	add	r19, r31
    49c4:	a1 e0       	ldi	r26, 0x01	; 1
    49c6:	3f 17       	cp	r19, r31
    49c8:	08 f0       	brcs	.+2      	; 0x49cc <fat_read_file+0x308>
    49ca:	a0 e0       	ldi	r26, 0x00	; 0
    49cc:	ea 2b       	or	r30, r26
    49ce:	5b 81       	ldd	r21, Y+3	; 0x03
    49d0:	18 89       	ldd	r17, Y+16	; 0x10
    49d2:	51 0f       	add	r21, r17
    49d4:	f1 e0       	ldi	r31, 0x01	; 1
    49d6:	4b 81       	ldd	r20, Y+3	; 0x03
    49d8:	54 17       	cp	r21, r20
    49da:	08 f0       	brcs	.+2      	; 0x49de <fat_read_file+0x31a>
    49dc:	f0 e0       	ldi	r31, 0x00	; 0
    49de:	4e 2f       	mov	r20, r30
    49e0:	45 0f       	add	r20, r21
    49e2:	e1 e0       	ldi	r30, 0x01	; 1
    49e4:	45 17       	cp	r20, r21
    49e6:	08 f0       	brcs	.+2      	; 0x49ea <fat_read_file+0x326>
    49e8:	e0 e0       	ldi	r30, 0x00	; 0
    49ea:	fe 2b       	or	r31, r30
    49ec:	1c 81       	ldd	r17, Y+4	; 0x04
    49ee:	59 89       	ldd	r21, Y+17	; 0x11
    49f0:	15 0f       	add	r17, r21
    49f2:	e1 e0       	ldi	r30, 0x01	; 1
    49f4:	ac 81       	ldd	r26, Y+4	; 0x04
    49f6:	1a 17       	cp	r17, r26
    49f8:	08 f0       	brcs	.+2      	; 0x49fc <fat_read_file+0x338>
    49fa:	e0 e0       	ldi	r30, 0x00	; 0
    49fc:	5f 2f       	mov	r21, r31
    49fe:	51 0f       	add	r21, r17
    4a00:	f1 e0       	ldi	r31, 0x01	; 1
    4a02:	51 17       	cp	r21, r17
    4a04:	08 f0       	brcs	.+2      	; 0x4a08 <fat_read_file+0x344>
    4a06:	f0 e0       	ldi	r31, 0x00	; 0
    4a08:	ef 2b       	or	r30, r31
    4a0a:	1d 81       	ldd	r17, Y+5	; 0x05
    4a0c:	16 0f       	add	r17, r22
    4a0e:	f1 e0       	ldi	r31, 0x01	; 1
    4a10:	bd 81       	ldd	r27, Y+5	; 0x05
    4a12:	1b 17       	cp	r17, r27
    4a14:	08 f0       	brcs	.+2      	; 0x4a18 <fat_read_file+0x354>
    4a16:	f0 e0       	ldi	r31, 0x00	; 0
    4a18:	6e 2f       	mov	r22, r30
    4a1a:	61 0f       	add	r22, r17
    4a1c:	e1 e0       	ldi	r30, 0x01	; 1
    4a1e:	61 17       	cp	r22, r17
    4a20:	08 f0       	brcs	.+2      	; 0x4a24 <fat_read_file+0x360>
    4a22:	e0 e0       	ldi	r30, 0x00	; 0
    4a24:	fe 2b       	or	r31, r30
    4a26:	1e 81       	ldd	r17, Y+6	; 0x06
    4a28:	17 0f       	add	r17, r23
    4a2a:	e1 e0       	ldi	r30, 0x01	; 1
    4a2c:	ee 80       	ldd	r14, Y+6	; 0x06
    4a2e:	1e 15       	cp	r17, r14
    4a30:	08 f0       	brcs	.+2      	; 0x4a34 <fat_read_file+0x370>
    4a32:	e0 e0       	ldi	r30, 0x00	; 0
    4a34:	7f 2f       	mov	r23, r31
    4a36:	71 0f       	add	r23, r17
    4a38:	f1 e0       	ldi	r31, 0x01	; 1
    4a3a:	71 17       	cp	r23, r17
    4a3c:	08 f0       	brcs	.+2      	; 0x4a40 <fat_read_file+0x37c>
    4a3e:	f0 e0       	ldi	r31, 0x00	; 0
    4a40:	ef 2b       	or	r30, r31
    4a42:	ff 81       	ldd	r31, Y+7	; 0x07
    4a44:	f8 0f       	add	r31, r24
    4a46:	11 e0       	ldi	r17, 0x01	; 1
    4a48:	ff 80       	ldd	r15, Y+7	; 0x07
    4a4a:	ff 15       	cp	r31, r15
    4a4c:	08 f0       	brcs	.+2      	; 0x4a50 <fat_read_file+0x38c>
    4a4e:	10 e0       	ldi	r17, 0x00	; 0
    4a50:	8e 2f       	mov	r24, r30
    4a52:	8f 0f       	add	r24, r31
    4a54:	e1 e0       	ldi	r30, 0x01	; 1
    4a56:	8f 17       	cp	r24, r31
    4a58:	08 f0       	brcs	.+2      	; 0x4a5c <fat_read_file+0x398>
    4a5a:	e0 e0       	ldi	r30, 0x00	; 0
    4a5c:	1e 2b       	or	r17, r30
    4a5e:	08 85       	ldd	r16, Y+8	; 0x08
    4a60:	90 0f       	add	r25, r16
        uint16_t copy_length = cluster_size - first_cluster_offset;
        if(copy_length > buffer_left)
            copy_length = buffer_left;

        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
    4a62:	d1 01       	movw	r26, r2
    4a64:	ed 91       	ld	r30, X+
    4a66:	fc 91       	ld	r31, X
    4a68:	91 0f       	add	r25, r17
    4a6a:	0d 85       	ldd	r16, Y+13	; 0x0d
    4a6c:	1e 85       	ldd	r17, Y+14	; 0x0e
    4a6e:	74 01       	movw	r14, r8
    4a70:	09 95       	icall
    4a72:	88 23       	and	r24, r24
    4a74:	09 f4       	brne	.+2      	; 0x4a78 <fat_read_file+0x3b4>
    4a76:	b6 c0       	rjmp	.+364    	; 0x4be4 <fat_read_file+0x520>
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
        buffer_left -= copy_length;
    4a78:	68 18       	sub	r6, r8
    4a7a:	79 08       	sbc	r7, r9
        fd->pos += copy_length;
    4a7c:	94 01       	movw	r18, r8
    4a7e:	40 e0       	ldi	r20, 0x00	; 0
    4a80:	50 e0       	ldi	r21, 0x00	; 0
    4a82:	60 e0       	ldi	r22, 0x00	; 0
    4a84:	70 e0       	ldi	r23, 0x00	; 0
    4a86:	cb 01       	movw	r24, r22
    4a88:	aa 89       	ldd	r26, Y+18	; 0x12
    4a8a:	bb 89       	ldd	r27, Y+19	; 0x13
    4a8c:	d3 96       	adiw	r26, 0x33	; 51
    4a8e:	ec 91       	ld	r30, X
    4a90:	d3 97       	sbiw	r26, 0x33	; 51
    4a92:	d4 96       	adiw	r26, 0x34	; 52
    4a94:	2c 90       	ld	r2, X
    4a96:	d4 97       	sbiw	r26, 0x34	; 52
    4a98:	d5 96       	adiw	r26, 0x35	; 53
    4a9a:	ec 90       	ld	r14, X
    4a9c:	d5 97       	sbiw	r26, 0x35	; 53
    4a9e:	d6 96       	adiw	r26, 0x36	; 54
    4aa0:	fc 90       	ld	r15, X
    4aa2:	d6 97       	sbiw	r26, 0x36	; 54
    4aa4:	d7 96       	adiw	r26, 0x37	; 55
    4aa6:	fc 91       	ld	r31, X
    4aa8:	d7 97       	sbiw	r26, 0x37	; 55
    4aaa:	d8 96       	adiw	r26, 0x38	; 56
    4aac:	3c 90       	ld	r3, X
    4aae:	d8 97       	sbiw	r26, 0x38	; 56
    4ab0:	d9 96       	adiw	r26, 0x39	; 57
    4ab2:	bc 91       	ld	r27, X
    4ab4:	b9 83       	std	Y+1, r27	; 0x01
    4ab6:	aa 89       	ldd	r26, Y+18	; 0x12
    4ab8:	bb 89       	ldd	r27, Y+19	; 0x13
    4aba:	da 96       	adiw	r26, 0x3a	; 58
    4abc:	bc 91       	ld	r27, X
    4abe:	bf 87       	std	Y+15, r27	; 0x0f
    4ac0:	e8 0d       	add	r30, r8
    4ac2:	01 e0       	ldi	r16, 0x01	; 1
    4ac4:	e8 15       	cp	r30, r8
    4ac6:	08 f0       	brcs	.+2      	; 0x4aca <fat_read_file+0x406>
    4ac8:	00 e0       	ldi	r16, 0x00	; 0
    4aca:	b2 2d       	mov	r27, r2
    4acc:	b3 0f       	add	r27, r19
    4ace:	11 e0       	ldi	r17, 0x01	; 1
    4ad0:	b3 17       	cp	r27, r19
    4ad2:	08 f0       	brcs	.+2      	; 0x4ad6 <fat_read_file+0x412>
    4ad4:	10 e0       	ldi	r17, 0x00	; 0
    4ad6:	0b 0f       	add	r16, r27
    4ad8:	a1 e0       	ldi	r26, 0x01	; 1
    4ada:	0b 17       	cp	r16, r27
    4adc:	08 f0       	brcs	.+2      	; 0x4ae0 <fat_read_file+0x41c>
    4ade:	a0 e0       	ldi	r26, 0x00	; 0
    4ae0:	1a 2b       	or	r17, r26
    4ae2:	a4 2f       	mov	r26, r20
    4ae4:	ae 0d       	add	r26, r14
    4ae6:	b1 e0       	ldi	r27, 0x01	; 1
    4ae8:	a4 17       	cp	r26, r20
    4aea:	08 f0       	brcs	.+2      	; 0x4aee <fat_read_file+0x42a>
    4aec:	b0 e0       	ldi	r27, 0x00	; 0
    4aee:	1a 0f       	add	r17, r26
    4af0:	ee 24       	eor	r14, r14
    4af2:	e3 94       	inc	r14
    4af4:	1a 17       	cp	r17, r26
    4af6:	08 f0       	brcs	.+2      	; 0x4afa <fat_read_file+0x436>
    4af8:	ee 24       	eor	r14, r14
    4afa:	be 29       	or	r27, r14
    4afc:	f5 0e       	add	r15, r21
    4afe:	a1 e0       	ldi	r26, 0x01	; 1
    4b00:	f5 16       	cp	r15, r21
    4b02:	08 f0       	brcs	.+2      	; 0x4b06 <fat_read_file+0x442>
    4b04:	a0 e0       	ldi	r26, 0x00	; 0
    4b06:	bf 0d       	add	r27, r15
    4b08:	b8 8b       	std	Y+16, r27	; 0x10
    4b0a:	ee 24       	eor	r14, r14
    4b0c:	e3 94       	inc	r14
    4b0e:	bf 15       	cp	r27, r15
    4b10:	08 f0       	brcs	.+2      	; 0x4b14 <fat_read_file+0x450>
    4b12:	ee 24       	eor	r14, r14
    4b14:	ae 29       	or	r26, r14
    4b16:	f6 0f       	add	r31, r22
    4b18:	22 24       	eor	r2, r2
    4b1a:	23 94       	inc	r2
    4b1c:	f6 17       	cp	r31, r22
    4b1e:	08 f0       	brcs	.+2      	; 0x4b22 <fat_read_file+0x45e>
    4b20:	22 24       	eor	r2, r2
    4b22:	af 0f       	add	r26, r31
    4b24:	a9 8b       	std	Y+17, r26	; 0x11
    4b26:	ff 24       	eor	r15, r15
    4b28:	f3 94       	inc	r15
    4b2a:	af 17       	cp	r26, r31
    4b2c:	08 f0       	brcs	.+2      	; 0x4b30 <fat_read_file+0x46c>
    4b2e:	ff 24       	eor	r15, r15
    4b30:	2f 28       	or	r2, r15
    4b32:	f7 2f       	mov	r31, r23
    4b34:	f3 0d       	add	r31, r3
    4b36:	33 24       	eor	r3, r3
    4b38:	33 94       	inc	r3
    4b3a:	f7 17       	cp	r31, r23
    4b3c:	08 f0       	brcs	.+2      	; 0x4b40 <fat_read_file+0x47c>
    4b3e:	33 24       	eor	r3, r3
    4b40:	2f 0e       	add	r2, r31
    4b42:	ff 24       	eor	r15, r15
    4b44:	f3 94       	inc	r15
    4b46:	2f 16       	cp	r2, r31
    4b48:	08 f0       	brcs	.+2      	; 0x4b4c <fat_read_file+0x488>
    4b4a:	ff 24       	eor	r15, r15
    4b4c:	3f 28       	or	r3, r15
    4b4e:	f9 81       	ldd	r31, Y+1	; 0x01
    4b50:	f8 0f       	add	r31, r24
    4b52:	ee 24       	eor	r14, r14
    4b54:	e3 94       	inc	r14
    4b56:	f8 17       	cp	r31, r24
    4b58:	08 f0       	brcs	.+2      	; 0x4b5c <fat_read_file+0x498>
    4b5a:	ee 24       	eor	r14, r14
    4b5c:	3f 0e       	add	r3, r31
    4b5e:	ff 24       	eor	r15, r15
    4b60:	f3 94       	inc	r15
    4b62:	3f 16       	cp	r3, r31
    4b64:	08 f0       	brcs	.+2      	; 0x4b68 <fat_read_file+0x4a4>
    4b66:	ff 24       	eor	r15, r15
    4b68:	fe 28       	or	r15, r14
    4b6a:	8f 85       	ldd	r24, Y+15	; 0x0f
    4b6c:	89 0f       	add	r24, r25
    4b6e:	f8 0e       	add	r15, r24
    4b70:	aa 89       	ldd	r26, Y+18	; 0x12
    4b72:	bb 89       	ldd	r27, Y+19	; 0x13
    4b74:	d3 96       	adiw	r26, 0x33	; 51
    4b76:	ec 93       	st	X, r30
    4b78:	d3 97       	sbiw	r26, 0x33	; 51
    4b7a:	d4 96       	adiw	r26, 0x34	; 52
    4b7c:	0c 93       	st	X, r16
    4b7e:	d4 97       	sbiw	r26, 0x34	; 52
    4b80:	d5 96       	adiw	r26, 0x35	; 53
    4b82:	1c 93       	st	X, r17
    4b84:	d5 97       	sbiw	r26, 0x35	; 53
    4b86:	e8 89       	ldd	r30, Y+16	; 0x10
    4b88:	d6 96       	adiw	r26, 0x36	; 54
    4b8a:	ec 93       	st	X, r30
    4b8c:	d6 97       	sbiw	r26, 0x36	; 54
    4b8e:	f9 89       	ldd	r31, Y+17	; 0x11
    4b90:	d7 96       	adiw	r26, 0x37	; 55
    4b92:	fc 93       	st	X, r31
    4b94:	d7 97       	sbiw	r26, 0x37	; 55
    4b96:	d8 96       	adiw	r26, 0x38	; 56
    4b98:	2c 92       	st	X, r2
    4b9a:	d8 97       	sbiw	r26, 0x38	; 56
    4b9c:	d9 96       	adiw	r26, 0x39	; 57
    4b9e:	3c 92       	st	X, r3
    4ba0:	d9 97       	sbiw	r26, 0x39	; 57
    4ba2:	da 96       	adiw	r26, 0x3a	; 58
    4ba4:	fc 92       	st	X, r15
    4ba6:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + copy_length >= cluster_size)
    4ba8:	c4 01       	movw	r24, r8
    4baa:	84 0d       	add	r24, r4
    4bac:	95 1d       	adc	r25, r5
    4bae:	eb 84       	ldd	r14, Y+11	; 0x0b
    4bb0:	fc 84       	ldd	r15, Y+12	; 0x0c
    4bb2:	8e 15       	cp	r24, r14
    4bb4:	9f 05       	cpc	r25, r15
    4bb6:	e8 f0       	brcs	.+58     	; 0x4bf2 <fat_read_file+0x52e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
    4bb8:	8d 91       	ld	r24, X+
    4bba:	9c 91       	ld	r25, X
    4bbc:	b6 01       	movw	r22, r12
    4bbe:	a5 01       	movw	r20, r10
    4bc0:	0e 94 40 12 	call	0x2480	; 0x2480 <fat_get_next_cluster>
    4bc4:	5b 01       	movw	r10, r22
    4bc6:	6c 01       	movw	r12, r24
    4bc8:	61 15       	cp	r22, r1
    4bca:	71 05       	cpc	r23, r1
    4bcc:	81 05       	cpc	r24, r1
    4bce:	91 05       	cpc	r25, r1
    4bd0:	71 f4       	brne	.+28     	; 0x4bee <fat_read_file+0x52a>
    4bd2:	2a 88       	ldd	r2, Y+18	; 0x12
    4bd4:	3b 88       	ldd	r3, Y+19	; 0x13
            {
                first_cluster_offset = 0;
            }
            else
            {
                fd->pos_cluster = 0;
    4bd6:	d1 01       	movw	r26, r2
    4bd8:	db 96       	adiw	r26, 0x3b	; 59
    4bda:	1d 92       	st	X+, r1
    4bdc:	1d 92       	st	X+, r1
    4bde:	1d 92       	st	X+, r1
    4be0:	1c 92       	st	X, r1
    4be2:	de 97       	sbiw	r26, 0x3e	; 62
                return buffer_len - buffer_left;
    4be4:	29 85       	ldd	r18, Y+9	; 0x09
    4be6:	3a 85       	ldd	r19, Y+10	; 0x0a
    4be8:	26 19       	sub	r18, r6
    4bea:	37 09       	sbc	r19, r7
    4bec:	1a c0       	rjmp	.+52     	; 0x4c22 <fat_read_file+0x55e>
        if(first_cluster_offset + copy_length >= cluster_size)
        {
            /* we are on a cluster boundary, so get the next cluster */
            if((cluster_num = fat_get_next_cluster(fd->fs, cluster_num)))
            {
                first_cluster_offset = 0;
    4bee:	44 24       	eor	r4, r4
    4bf0:	55 24       	eor	r5, r5
                fd->pos_cluster = 0;
                return buffer_len - buffer_left;
            }
        }

        fd->pos_cluster = cluster_num;
    4bf2:	ea 89       	ldd	r30, Y+18	; 0x12
    4bf4:	fb 89       	ldd	r31, Y+19	; 0x13
    4bf6:	a3 ae       	std	Z+59, r10	; 0x3b
    4bf8:	b4 ae       	std	Z+60, r11	; 0x3c
    4bfa:	c5 ae       	std	Z+61, r12	; 0x3d
    4bfc:	d6 ae       	std	Z+62, r13	; 0x3e

    } while(buffer_left > 0); /* check if we are done */
    4bfe:	61 14       	cp	r6, r1
    4c00:	71 04       	cpc	r7, r1
    4c02:	39 f0       	breq	.+14     	; 0x4c12 <fat_read_file+0x54e>
        /* read data */
        if(!fd->fs->partition->device_read(cluster_offset, buffer, copy_length))
            return buffer_len - buffer_left;

        /* calculate new file position */
        buffer += copy_length;
    4c04:	ed 84       	ldd	r14, Y+13	; 0x0d
    4c06:	fe 84       	ldd	r15, Y+14	; 0x0e
    4c08:	e8 0c       	add	r14, r8
    4c0a:	f9 1c       	adc	r15, r9
    4c0c:	fe 86       	std	Y+14, r15	; 0x0e
    4c0e:	ed 86       	std	Y+13, r14	; 0x0d
    4c10:	a3 ce       	rjmp	.-698    	; 0x4958 <fat_read_file+0x294>

        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
    4c12:	29 85       	ldd	r18, Y+9	; 0x09
    4c14:	3a 85       	ldd	r19, Y+10	; 0x0a
    4c16:	05 c0       	rjmp	.+10     	; 0x4c22 <fat_read_file+0x55e>

    /* determine number of bytes to read */
    if(fd->pos + buffer_len > fd->dir_entry.file_size)
        buffer_len = fd->dir_entry.file_size - fd->pos;
    if(buffer_len == 0)
        return 0;
    4c18:	20 e0       	ldi	r18, 0x00	; 0
    4c1a:	30 e0       	ldi	r19, 0x00	; 0
    4c1c:	02 c0       	rjmp	.+4      	; 0x4c22 <fat_read_file+0x55e>
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num)
                    return -1;
    4c1e:	2f ef       	ldi	r18, 0xFF	; 255
    4c20:	3f ef       	ldi	r19, 0xFF	; 255
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    return buffer_len;
}
    4c22:	c9 01       	movw	r24, r18
    4c24:	63 96       	adiw	r28, 0x13	; 19
    4c26:	0f b6       	in	r0, 0x3f	; 63
    4c28:	f8 94       	cli
    4c2a:	de bf       	out	0x3e, r29	; 62
    4c2c:	0f be       	out	0x3f, r0	; 63
    4c2e:	cd bf       	out	0x3d, r28	; 61
    4c30:	cf 91       	pop	r28
    4c32:	df 91       	pop	r29
    4c34:	1f 91       	pop	r17
    4c36:	0f 91       	pop	r16
    4c38:	ff 90       	pop	r15
    4c3a:	ef 90       	pop	r14
    4c3c:	df 90       	pop	r13
    4c3e:	cf 90       	pop	r12
    4c40:	bf 90       	pop	r11
    4c42:	af 90       	pop	r10
    4c44:	9f 90       	pop	r9
    4c46:	8f 90       	pop	r8
    4c48:	7f 90       	pop	r7
    4c4a:	6f 90       	pop	r6
    4c4c:	5f 90       	pop	r5
    4c4e:	4f 90       	pop	r4
    4c50:	3f 90       	pop	r3
    4c52:	2f 90       	pop	r2
    4c54:	08 95       	ret

00004c56 <fat_write_file>:
 * \param[in] buffer_len The amount of data to write.
 * \returns The number of bytes written, 0 on disk full, or -1 on failure.
 * \see fat_read_file
 */
intptr_t fat_write_file(struct fat_file_struct* fd, const uint8_t* buffer, uintptr_t buffer_len)
{
    4c56:	2f 92       	push	r2
    4c58:	3f 92       	push	r3
    4c5a:	4f 92       	push	r4
    4c5c:	5f 92       	push	r5
    4c5e:	6f 92       	push	r6
    4c60:	7f 92       	push	r7
    4c62:	8f 92       	push	r8
    4c64:	9f 92       	push	r9
    4c66:	af 92       	push	r10
    4c68:	bf 92       	push	r11
    4c6a:	cf 92       	push	r12
    4c6c:	df 92       	push	r13
    4c6e:	ef 92       	push	r14
    4c70:	ff 92       	push	r15
    4c72:	0f 93       	push	r16
    4c74:	1f 93       	push	r17
    4c76:	df 93       	push	r29
    4c78:	cf 93       	push	r28
    4c7a:	cd b7       	in	r28, 0x3d	; 61
    4c7c:	de b7       	in	r29, 0x3e	; 62
    4c7e:	64 97       	sbiw	r28, 0x14	; 20
    4c80:	0f b6       	in	r0, 0x3f	; 63
    4c82:	f8 94       	cli
    4c84:	de bf       	out	0x3e, r29	; 62
    4c86:	0f be       	out	0x3f, r0	; 63
    4c88:	cd bf       	out	0x3d, r28	; 61
    4c8a:	99 8b       	std	Y+17, r25	; 0x11
    4c8c:	88 8b       	std	Y+16, r24	; 0x10
    4c8e:	7c 87       	std	Y+12, r23	; 0x0c
    4c90:	6b 87       	std	Y+11, r22	; 0x0b
    4c92:	5e 87       	std	Y+14, r21	; 0x0e
    4c94:	4d 87       	std	Y+13, r20	; 0x0d
    /* check arguments */
    if(!fd || !buffer || buffer_len < 1)
    4c96:	00 97       	sbiw	r24, 0x00	; 0
    4c98:	09 f4       	brne	.+2      	; 0x4c9c <fat_write_file+0x46>
    4c9a:	e9 c2       	rjmp	.+1490   	; 0x526e <fat_write_file+0x618>
    4c9c:	61 15       	cp	r22, r1
    4c9e:	71 05       	cpc	r23, r1
    4ca0:	09 f4       	brne	.+2      	; 0x4ca4 <fat_write_file+0x4e>
    4ca2:	e5 c2       	rjmp	.+1482   	; 0x526e <fat_write_file+0x618>
    4ca4:	41 15       	cp	r20, r1
    4ca6:	51 05       	cpc	r21, r1
    4ca8:	09 f4       	brne	.+2      	; 0x4cac <fat_write_file+0x56>
    4caa:	e1 c2       	rjmp	.+1474   	; 0x526e <fat_write_file+0x618>
        return -1;
    if(fd->pos > fd->dir_entry.file_size)
    4cac:	dc 01       	movw	r26, r24
    4cae:	d3 96       	adiw	r26, 0x33	; 51
    4cb0:	bc 91       	ld	r27, X
    4cb2:	b9 83       	std	Y+1, r27	; 0x01
    4cb4:	fc 01       	movw	r30, r24
    4cb6:	f4 a9       	ldd	r31, Z+52	; 0x34
    4cb8:	fa 83       	std	Y+2, r31	; 0x02
    4cba:	dc 01       	movw	r26, r24
    4cbc:	d5 96       	adiw	r26, 0x35	; 53
    4cbe:	bc 91       	ld	r27, X
    4cc0:	bb 83       	std	Y+3, r27	; 0x03
    4cc2:	fc 01       	movw	r30, r24
    4cc4:	f6 a9       	ldd	r31, Z+54	; 0x36
    4cc6:	fc 83       	std	Y+4, r31	; 0x04
    4cc8:	dc 01       	movw	r26, r24
    4cca:	d7 96       	adiw	r26, 0x37	; 55
    4ccc:	bc 91       	ld	r27, X
    4cce:	bd 83       	std	Y+5, r27	; 0x05
    4cd0:	fc 01       	movw	r30, r24
    4cd2:	f0 ad       	ldd	r31, Z+56	; 0x38
    4cd4:	fe 83       	std	Y+6, r31	; 0x06
    4cd6:	dc 01       	movw	r26, r24
    4cd8:	d9 96       	adiw	r26, 0x39	; 57
    4cda:	bc 91       	ld	r27, X
    4cdc:	bf 83       	std	Y+7, r27	; 0x07
    4cde:	fc 01       	movw	r30, r24
    4ce0:	f2 ad       	ldd	r31, Z+58	; 0x3a
    4ce2:	f8 87       	std	Y+8, r31	; 0x08
    4ce4:	dc 01       	movw	r26, r24
    4ce6:	97 96       	adiw	r26, 0x27	; 39
    4ce8:	2d 91       	ld	r18, X+
    4cea:	3d 91       	ld	r19, X+
    4cec:	4d 91       	ld	r20, X+
    4cee:	5c 91       	ld	r21, X
    4cf0:	9a 97       	sbiw	r26, 0x2a	; 42
    4cf2:	60 e0       	ldi	r22, 0x00	; 0
    4cf4:	70 e0       	ldi	r23, 0x00	; 0
    4cf6:	cb 01       	movw	r24, r22
    4cf8:	9f 17       	cp	r25, r31
    4cfa:	08 f4       	brcc	.+2      	; 0x4cfe <fat_write_file+0xa8>
    4cfc:	b8 c2       	rjmp	.+1392   	; 0x526e <fat_write_file+0x618>
    4cfe:	f9 17       	cp	r31, r25
    4d00:	41 f5       	brne	.+80     	; 0x4d52 <fat_write_file+0xfc>
    4d02:	ff 81       	ldd	r31, Y+7	; 0x07
    4d04:	8f 17       	cp	r24, r31
    4d06:	08 f4       	brcc	.+2      	; 0x4d0a <fat_write_file+0xb4>
    4d08:	b2 c2       	rjmp	.+1380   	; 0x526e <fat_write_file+0x618>
    4d0a:	f8 17       	cp	r31, r24
    4d0c:	11 f5       	brne	.+68     	; 0x4d52 <fat_write_file+0xfc>
    4d0e:	fe 80       	ldd	r15, Y+6	; 0x06
    4d10:	7f 15       	cp	r23, r15
    4d12:	08 f4       	brcc	.+2      	; 0x4d16 <fat_write_file+0xc0>
    4d14:	ac c2       	rjmp	.+1368   	; 0x526e <fat_write_file+0x618>
    4d16:	f7 16       	cp	r15, r23
    4d18:	e1 f4       	brne	.+56     	; 0x4d52 <fat_write_file+0xfc>
    4d1a:	1d 81       	ldd	r17, Y+5	; 0x05
    4d1c:	61 17       	cp	r22, r17
    4d1e:	08 f4       	brcc	.+2      	; 0x4d22 <fat_write_file+0xcc>
    4d20:	a6 c2       	rjmp	.+1356   	; 0x526e <fat_write_file+0x618>
    4d22:	16 17       	cp	r17, r22
    4d24:	b1 f4       	brne	.+44     	; 0x4d52 <fat_write_file+0xfc>
    4d26:	bc 81       	ldd	r27, Y+4	; 0x04
    4d28:	5b 17       	cp	r21, r27
    4d2a:	08 f4       	brcc	.+2      	; 0x4d2e <fat_write_file+0xd8>
    4d2c:	a0 c2       	rjmp	.+1344   	; 0x526e <fat_write_file+0x618>
    4d2e:	b5 17       	cp	r27, r21
    4d30:	81 f4       	brne	.+32     	; 0x4d52 <fat_write_file+0xfc>
    4d32:	fb 81       	ldd	r31, Y+3	; 0x03
    4d34:	4f 17       	cp	r20, r31
    4d36:	08 f4       	brcc	.+2      	; 0x4d3a <fat_write_file+0xe4>
    4d38:	9a c2       	rjmp	.+1332   	; 0x526e <fat_write_file+0x618>
    4d3a:	f4 17       	cp	r31, r20
    4d3c:	51 f4       	brne	.+20     	; 0x4d52 <fat_write_file+0xfc>
    4d3e:	fa 80       	ldd	r15, Y+2	; 0x02
    4d40:	3f 15       	cp	r19, r15
    4d42:	08 f4       	brcc	.+2      	; 0x4d46 <fat_write_file+0xf0>
    4d44:	94 c2       	rjmp	.+1320   	; 0x526e <fat_write_file+0x618>
    4d46:	f3 16       	cp	r15, r19
    4d48:	21 f4       	brne	.+8      	; 0x4d52 <fat_write_file+0xfc>
    4d4a:	19 81       	ldd	r17, Y+1	; 0x01
    4d4c:	21 17       	cp	r18, r17
    4d4e:	08 f4       	brcc	.+2      	; 0x4d52 <fat_write_file+0xfc>
    4d50:	8e c2       	rjmp	.+1308   	; 0x526e <fat_write_file+0x618>
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    4d52:	a8 89       	ldd	r26, Y+16	; 0x10
    4d54:	b9 89       	ldd	r27, Y+17	; 0x11
    4d56:	8d 91       	ld	r24, X+
    4d58:	9c 91       	ld	r25, X
    4d5a:	11 97       	sbiw	r26, 0x01	; 1
    4d5c:	fc 01       	movw	r30, r24
    4d5e:	00 8c       	ldd	r0, Z+24	; 0x18
    4d60:	f1 8d       	ldd	r31, Z+25	; 0x19
    4d62:	e0 2d       	mov	r30, r0
    4d64:	fa 87       	std	Y+10, r31	; 0x0a
    4d66:	e9 87       	std	Y+9, r30	; 0x09
    cluster_t cluster_num = fd->pos_cluster;
    4d68:	db 96       	adiw	r26, 0x3b	; 59
    4d6a:	ad 90       	ld	r10, X+
    4d6c:	bd 90       	ld	r11, X+
    4d6e:	cd 90       	ld	r12, X+
    4d70:	dc 90       	ld	r13, X
    4d72:	de 97       	sbiw	r26, 0x3e	; 62
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));

    /* find cluster in which to start writing */
    if(!cluster_num)
    4d74:	a1 14       	cp	r10, r1
    4d76:	b1 04       	cpc	r11, r1
    4d78:	c1 04       	cpc	r12, r1
    4d7a:	d1 04       	cpc	r13, r1
    4d7c:	09 f0       	breq	.+2      	; 0x4d80 <fat_write_file+0x12a>
    4d7e:	8d c0       	rjmp	.+282    	; 0x4e9a <fat_write_file+0x244>
    {
        cluster_num = fd->dir_entry.cluster;
    4d80:	93 96       	adiw	r26, 0x23	; 35
    4d82:	ad 90       	ld	r10, X+
    4d84:	bd 90       	ld	r11, X+
    4d86:	cd 90       	ld	r12, X+
    4d88:	dc 90       	ld	r13, X
    4d8a:	96 97       	sbiw	r26, 0x26	; 38
        
        if(!cluster_num)
    4d8c:	a1 14       	cp	r10, r1
    4d8e:	b1 04       	cpc	r11, r1
    4d90:	c1 04       	cpc	r12, r1
    4d92:	d1 04       	cpc	r13, r1
    4d94:	51 f5       	brne	.+84     	; 0x4dea <fat_write_file+0x194>
        {
            if(!fd->pos)
    4d96:	29 81       	ldd	r18, Y+1	; 0x01
    4d98:	fa 81       	ldd	r31, Y+2	; 0x02
    4d9a:	2f 2b       	or	r18, r31
    4d9c:	eb 80       	ldd	r14, Y+3	; 0x03
    4d9e:	2e 29       	or	r18, r14
    4da0:	fc 80       	ldd	r15, Y+4	; 0x04
    4da2:	2f 29       	or	r18, r15
    4da4:	0d 81       	ldd	r16, Y+5	; 0x05
    4da6:	20 2b       	or	r18, r16
    4da8:	1e 81       	ldd	r17, Y+6	; 0x06
    4daa:	21 2b       	or	r18, r17
    4dac:	3f 81       	ldd	r19, Y+7	; 0x07
    4dae:	23 2b       	or	r18, r19
    4db0:	48 85       	ldd	r20, Y+8	; 0x08
    4db2:	24 2b       	or	r18, r20
    4db4:	09 f0       	breq	.+2      	; 0x4db8 <fat_write_file+0x162>
    4db6:	5b c2       	rjmp	.+1206   	; 0x526e <fat_write_file+0x618>
            {
                /* empty file */
                fd->dir_entry.cluster = cluster_num = fat_append_clusters(fd->fs, 0, 1);
    4db8:	40 e0       	ldi	r20, 0x00	; 0
    4dba:	50 e0       	ldi	r21, 0x00	; 0
    4dbc:	ba 01       	movw	r22, r20
    4dbe:	01 e0       	ldi	r16, 0x01	; 1
    4dc0:	10 e0       	ldi	r17, 0x00	; 0
    4dc2:	20 e0       	ldi	r18, 0x00	; 0
    4dc4:	30 e0       	ldi	r19, 0x00	; 0
    4dc6:	0e 94 78 15 	call	0x2af0	; 0x2af0 <fat_append_clusters>
    4dca:	5b 01       	movw	r10, r22
    4dcc:	6c 01       	movw	r12, r24
    4dce:	a8 89       	ldd	r26, Y+16	; 0x10
    4dd0:	b9 89       	ldd	r27, Y+17	; 0x11
    4dd2:	93 96       	adiw	r26, 0x23	; 35
    4dd4:	6d 93       	st	X+, r22
    4dd6:	7d 93       	st	X+, r23
    4dd8:	8d 93       	st	X+, r24
    4dda:	9c 93       	st	X, r25
    4ddc:	96 97       	sbiw	r26, 0x26	; 38
                if(!cluster_num)
    4dde:	61 15       	cp	r22, r1
    4de0:	71 05       	cpc	r23, r1
    4de2:	81 05       	cpc	r24, r1
    4de4:	91 05       	cpc	r25, r1
    4de6:	09 f4       	brne	.+2      	; 0x4dea <fat_write_file+0x194>
    4de8:	42 c2       	rjmp	.+1156   	; 0x526e <fat_write_file+0x618>
            {
                return -1;
            }
        }

        if(fd->pos)
    4dea:	e8 89       	ldd	r30, Y+16	; 0x10
    4dec:	f9 89       	ldd	r31, Y+17	; 0x11
    4dee:	73 a9       	ldd	r23, Z+51	; 0x33
    4df0:	64 a9       	ldd	r22, Z+52	; 0x34
    4df2:	55 a9       	ldd	r21, Z+53	; 0x35
    4df4:	46 a9       	ldd	r20, Z+54	; 0x36
    4df6:	e7 a9       	ldd	r30, Z+55	; 0x37
    4df8:	a8 89       	ldd	r26, Y+16	; 0x10
    4dfa:	b9 89       	ldd	r27, Y+17	; 0x11
    4dfc:	d8 96       	adiw	r26, 0x38	; 56
    4dfe:	3c 91       	ld	r19, X
    4e00:	d8 97       	sbiw	r26, 0x38	; 56
    4e02:	d9 96       	adiw	r26, 0x39	; 57
    4e04:	2c 91       	ld	r18, X
    4e06:	d9 97       	sbiw	r26, 0x39	; 57
    4e08:	da 96       	adiw	r26, 0x3a	; 58
    4e0a:	9c 91       	ld	r25, X
    4e0c:	da 97       	sbiw	r26, 0x3a	; 58
    4e0e:	87 2f       	mov	r24, r23
    4e10:	86 2b       	or	r24, r22
    4e12:	85 2b       	or	r24, r21
    4e14:	84 2b       	or	r24, r20
    4e16:	8e 2b       	or	r24, r30
    4e18:	83 2b       	or	r24, r19
    4e1a:	82 2b       	or	r24, r18
    4e1c:	89 2b       	or	r24, r25
    4e1e:	e9 f1       	breq	.+122    	; 0x4e9a <fat_write_file+0x244>
        {
            uint32_t pos = fd->pos;
    4e20:	9b 01       	movw	r18, r22
    4e22:	ca 01       	movw	r24, r20
    4e24:	63 2e       	mov	r6, r19
    4e26:	72 2e       	mov	r7, r18
    4e28:	89 2e       	mov	r8, r25
    4e2a:	98 2e       	mov	r9, r24
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    4e2c:	e9 85       	ldd	r30, Y+9	; 0x09
    4e2e:	fa 85       	ldd	r31, Y+10	; 0x0a
    4e30:	1f 01       	movw	r2, r30
    4e32:	44 24       	eor	r4, r4
    4e34:	55 24       	eor	r5, r5
    4e36:	7d 01       	movw	r14, r26
    4e38:	29 c0       	rjmp	.+82     	; 0x4e8c <fat_write_file+0x236>
            {
                pos -= cluster_size;
    4e3a:	62 18       	sub	r6, r2
    4e3c:	73 08       	sbc	r7, r3
    4e3e:	84 08       	sbc	r8, r4
    4e40:	95 08       	sbc	r9, r5
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    4e42:	d7 01       	movw	r26, r14
    4e44:	8d 91       	ld	r24, X+
    4e46:	9c 91       	ld	r25, X
    4e48:	b6 01       	movw	r22, r12
    4e4a:	a5 01       	movw	r20, r10
    4e4c:	0e 94 40 12 	call	0x2480	; 0x2480 <fat_get_next_cluster>
                if(!cluster_num_next && pos == 0)
    4e50:	61 15       	cp	r22, r1
    4e52:	71 05       	cpc	r23, r1
    4e54:	81 05       	cpc	r24, r1
    4e56:	91 05       	cpc	r25, r1
    4e58:	b9 f4       	brne	.+46     	; 0x4e88 <fat_write_file+0x232>
    4e5a:	61 14       	cp	r6, r1
    4e5c:	71 04       	cpc	r7, r1
    4e5e:	81 04       	cpc	r8, r1
    4e60:	91 04       	cpc	r9, r1
    4e62:	09 f0       	breq	.+2      	; 0x4e66 <fat_write_file+0x210>
    4e64:	04 c2       	rjmp	.+1032   	; 0x526e <fat_write_file+0x618>
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    4e66:	f7 01       	movw	r30, r14
    4e68:	80 81       	ld	r24, Z
    4e6a:	91 81       	ldd	r25, Z+1	; 0x01
    4e6c:	b6 01       	movw	r22, r12
    4e6e:	a5 01       	movw	r20, r10
    4e70:	01 e0       	ldi	r16, 0x01	; 1
    4e72:	10 e0       	ldi	r17, 0x00	; 0
    4e74:	20 e0       	ldi	r18, 0x00	; 0
    4e76:	30 e0       	ldi	r19, 0x00	; 0
    4e78:	0e 94 78 15 	call	0x2af0	; 0x2af0 <fat_append_clusters>
                if(!cluster_num_next)
    4e7c:	61 15       	cp	r22, r1
    4e7e:	71 05       	cpc	r23, r1
    4e80:	81 05       	cpc	r24, r1
    4e82:	91 05       	cpc	r25, r1
    4e84:	09 f4       	brne	.+2      	; 0x4e88 <fat_write_file+0x232>
    4e86:	f3 c1       	rjmp	.+998    	; 0x526e <fat_write_file+0x618>
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
            {
                pos -= cluster_size;
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && pos == 0)
    4e88:	5b 01       	movw	r10, r22
    4e8a:	6c 01       	movw	r12, r24

        if(fd->pos)
        {
            uint32_t pos = fd->pos;
            cluster_t cluster_num_next;
            while(pos >= cluster_size)
    4e8c:	62 14       	cp	r6, r2
    4e8e:	73 04       	cpc	r7, r3
    4e90:	84 04       	cpc	r8, r4
    4e92:	95 04       	cpc	r9, r5
    4e94:	90 f6       	brcc	.-92     	; 0x4e3a <fat_write_file+0x1e4>
    4e96:	f9 8a       	std	Y+17, r15	; 0x11
    4e98:	e8 8a       	std	Y+16, r14	; 0x10
        return -1;

    uint16_t cluster_size = fd->fs->header.cluster_size;
    cluster_t cluster_num = fd->pos_cluster;
    uintptr_t buffer_left = buffer_len;
    uint16_t first_cluster_offset = (uint16_t) (fd->pos & (cluster_size - 1));
    4e9a:	69 84       	ldd	r6, Y+9	; 0x09
    4e9c:	7a 84       	ldd	r7, Y+10	; 0x0a
    4e9e:	08 94       	sec
    4ea0:	61 08       	sbc	r6, r1
    4ea2:	71 08       	sbc	r7, r1
    4ea4:	e9 80       	ldd	r14, Y+1	; 0x01
    4ea6:	fa 80       	ldd	r15, Y+2	; 0x02
    4ea8:	6e 20       	and	r6, r14
    4eaa:	7f 20       	and	r7, r15
    4eac:	8d 84       	ldd	r8, Y+13	; 0x0d
    4eae:	9e 84       	ldd	r9, Y+14	; 0x0e
    4eb0:	08 89       	ldd	r16, Y+16	; 0x10
    4eb2:	19 89       	ldd	r17, Y+17	; 0x11
    4eb4:	1c 8b       	std	Y+20, r17	; 0x14
    4eb6:	0b 8b       	std	Y+19, r16	; 0x13
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    4eb8:	ab 89       	ldd	r26, Y+19	; 0x13
    4eba:	bc 89       	ldd	r27, Y+20	; 0x14
    4ebc:	0d 91       	ld	r16, X+
    4ebe:	1c 91       	ld	r17, X
    4ec0:	c8 01       	movw	r24, r16
    4ec2:	b6 01       	movw	r22, r12
    4ec4:	a5 01       	movw	r20, r10
    4ec6:	0e 94 a2 18 	call	0x3144	; 0x3144 <fat_cluster_offset>
    4eca:	a2 2f       	mov	r26, r18
    4ecc:	3f 87       	std	Y+15, r19	; 0x0f
    4ece:	48 8b       	std	Y+16, r20	; 0x10
    4ed0:	5a 8b       	std	Y+18, r21	; 0x12
        uint16_t write_length = cluster_size - first_cluster_offset;
    4ed2:	49 84       	ldd	r4, Y+9	; 0x09
    4ed4:	5a 84       	ldd	r5, Y+10	; 0x0a
    4ed6:	46 18       	sub	r4, r6
    4ed8:	57 08       	sbc	r5, r7
    4eda:	84 14       	cp	r8, r4
    4edc:	95 04       	cpc	r9, r5
    4ede:	08 f4       	brcc	.+2      	; 0x4ee2 <fat_write_file+0x28c>
    4ee0:	24 01       	movw	r4, r8
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    4ee2:	f8 01       	movw	r30, r16
    4ee4:	20 80       	ld	r2, Z
    4ee6:	31 80       	ldd	r3, Z+1	; 0x01
    
    /* write data */
    do
    {
        /* calculate data size to write to cluster */
        offset_t cluster_offset = fat_cluster_offset(fd->fs, cluster_num) + first_cluster_offset;
    4ee8:	73 01       	movw	r14, r6
    4eea:	00 e0       	ldi	r16, 0x00	; 0
    4eec:	10 e0       	ldi	r17, 0x00	; 0
    4eee:	20 e0       	ldi	r18, 0x00	; 0
    4ef0:	30 e0       	ldi	r19, 0x00	; 0
    4ef2:	a9 01       	movw	r20, r18
    4ef4:	69 82       	std	Y+1, r6	; 0x01
    4ef6:	fa 82       	std	Y+2, r15	; 0x02
    4ef8:	0b 83       	std	Y+3, r16	; 0x03
    4efa:	1c 83       	std	Y+4, r17	; 0x04
    4efc:	2d 83       	std	Y+5, r18	; 0x05
    4efe:	3e 83       	std	Y+6, r19	; 0x06
    4f00:	4f 83       	std	Y+7, r20	; 0x07
    4f02:	58 87       	std	Y+8, r21	; 0x08
    4f04:	26 2d       	mov	r18, r6
    4f06:	2a 0f       	add	r18, r26
    4f08:	41 e0       	ldi	r20, 0x01	; 1
    4f0a:	26 15       	cp	r18, r6
    4f0c:	08 f0       	brcs	.+2      	; 0x4f10 <fat_write_file+0x2ba>
    4f0e:	40 e0       	ldi	r20, 0x00	; 0
    4f10:	fa 81       	ldd	r31, Y+2	; 0x02
    4f12:	ff 84       	ldd	r15, Y+15	; 0x0f
    4f14:	ff 0d       	add	r31, r15
    4f16:	e1 e0       	ldi	r30, 0x01	; 1
    4f18:	0a 81       	ldd	r16, Y+2	; 0x02
    4f1a:	f0 17       	cp	r31, r16
    4f1c:	08 f0       	brcs	.+2      	; 0x4f20 <fat_write_file+0x2ca>
    4f1e:	e0 e0       	ldi	r30, 0x00	; 0
    4f20:	34 2f       	mov	r19, r20
    4f22:	3f 0f       	add	r19, r31
    4f24:	a1 e0       	ldi	r26, 0x01	; 1
    4f26:	3f 17       	cp	r19, r31
    4f28:	08 f0       	brcs	.+2      	; 0x4f2c <fat_write_file+0x2d6>
    4f2a:	a0 e0       	ldi	r26, 0x00	; 0
    4f2c:	ea 2b       	or	r30, r26
    4f2e:	5b 81       	ldd	r21, Y+3	; 0x03
    4f30:	18 89       	ldd	r17, Y+16	; 0x10
    4f32:	51 0f       	add	r21, r17
    4f34:	f1 e0       	ldi	r31, 0x01	; 1
    4f36:	4b 81       	ldd	r20, Y+3	; 0x03
    4f38:	54 17       	cp	r21, r20
    4f3a:	08 f0       	brcs	.+2      	; 0x4f3e <fat_write_file+0x2e8>
    4f3c:	f0 e0       	ldi	r31, 0x00	; 0
    4f3e:	4e 2f       	mov	r20, r30
    4f40:	45 0f       	add	r20, r21
    4f42:	e1 e0       	ldi	r30, 0x01	; 1
    4f44:	45 17       	cp	r20, r21
    4f46:	08 f0       	brcs	.+2      	; 0x4f4a <fat_write_file+0x2f4>
    4f48:	e0 e0       	ldi	r30, 0x00	; 0
    4f4a:	fe 2b       	or	r31, r30
    4f4c:	1c 81       	ldd	r17, Y+4	; 0x04
    4f4e:	5a 89       	ldd	r21, Y+18	; 0x12
    4f50:	15 0f       	add	r17, r21
    4f52:	e1 e0       	ldi	r30, 0x01	; 1
    4f54:	ac 81       	ldd	r26, Y+4	; 0x04
    4f56:	1a 17       	cp	r17, r26
    4f58:	08 f0       	brcs	.+2      	; 0x4f5c <fat_write_file+0x306>
    4f5a:	e0 e0       	ldi	r30, 0x00	; 0
    4f5c:	5f 2f       	mov	r21, r31
    4f5e:	51 0f       	add	r21, r17
    4f60:	f1 e0       	ldi	r31, 0x01	; 1
    4f62:	51 17       	cp	r21, r17
    4f64:	08 f0       	brcs	.+2      	; 0x4f68 <fat_write_file+0x312>
    4f66:	f0 e0       	ldi	r31, 0x00	; 0
    4f68:	ef 2b       	or	r30, r31
    4f6a:	1d 81       	ldd	r17, Y+5	; 0x05
    4f6c:	16 0f       	add	r17, r22
    4f6e:	f1 e0       	ldi	r31, 0x01	; 1
    4f70:	bd 81       	ldd	r27, Y+5	; 0x05
    4f72:	1b 17       	cp	r17, r27
    4f74:	08 f0       	brcs	.+2      	; 0x4f78 <fat_write_file+0x322>
    4f76:	f0 e0       	ldi	r31, 0x00	; 0
    4f78:	6e 2f       	mov	r22, r30
    4f7a:	61 0f       	add	r22, r17
    4f7c:	e1 e0       	ldi	r30, 0x01	; 1
    4f7e:	61 17       	cp	r22, r17
    4f80:	08 f0       	brcs	.+2      	; 0x4f84 <fat_write_file+0x32e>
    4f82:	e0 e0       	ldi	r30, 0x00	; 0
    4f84:	fe 2b       	or	r31, r30
    4f86:	1e 81       	ldd	r17, Y+6	; 0x06
    4f88:	17 0f       	add	r17, r23
    4f8a:	e1 e0       	ldi	r30, 0x01	; 1
    4f8c:	ee 80       	ldd	r14, Y+6	; 0x06
    4f8e:	1e 15       	cp	r17, r14
    4f90:	08 f0       	brcs	.+2      	; 0x4f94 <fat_write_file+0x33e>
    4f92:	e0 e0       	ldi	r30, 0x00	; 0
    4f94:	7f 2f       	mov	r23, r31
    4f96:	71 0f       	add	r23, r17
    4f98:	f1 e0       	ldi	r31, 0x01	; 1
    4f9a:	71 17       	cp	r23, r17
    4f9c:	08 f0       	brcs	.+2      	; 0x4fa0 <fat_write_file+0x34a>
    4f9e:	f0 e0       	ldi	r31, 0x00	; 0
    4fa0:	ef 2b       	or	r30, r31
    4fa2:	ff 81       	ldd	r31, Y+7	; 0x07
    4fa4:	f8 0f       	add	r31, r24
    4fa6:	11 e0       	ldi	r17, 0x01	; 1
    4fa8:	ff 80       	ldd	r15, Y+7	; 0x07
    4faa:	ff 15       	cp	r31, r15
    4fac:	08 f0       	brcs	.+2      	; 0x4fb0 <fat_write_file+0x35a>
    4fae:	10 e0       	ldi	r17, 0x00	; 0
    4fb0:	8e 2f       	mov	r24, r30
    4fb2:	8f 0f       	add	r24, r31
    4fb4:	e1 e0       	ldi	r30, 0x01	; 1
    4fb6:	8f 17       	cp	r24, r31
    4fb8:	08 f0       	brcs	.+2      	; 0x4fbc <fat_write_file+0x366>
    4fba:	e0 e0       	ldi	r30, 0x00	; 0
    4fbc:	1e 2b       	or	r17, r30
    4fbe:	08 85       	ldd	r16, Y+8	; 0x08
    4fc0:	90 0f       	add	r25, r16
        uint16_t write_length = cluster_size - first_cluster_offset;
        if(write_length > buffer_left)
            write_length = buffer_left;

        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
    4fc2:	d1 01       	movw	r26, r2
    4fc4:	14 96       	adiw	r26, 0x04	; 4
    4fc6:	ed 91       	ld	r30, X+
    4fc8:	fc 91       	ld	r31, X
    4fca:	15 97       	sbiw	r26, 0x05	; 5
    4fcc:	91 0f       	add	r25, r17
    4fce:	0b 85       	ldd	r16, Y+11	; 0x0b
    4fd0:	1c 85       	ldd	r17, Y+12	; 0x0c
    4fd2:	72 01       	movw	r14, r4
    4fd4:	09 95       	icall
    4fd6:	88 23       	and	r24, r24
    4fd8:	09 f4       	brne	.+2      	; 0x4fdc <fat_write_file+0x386>
    4fda:	dc c0       	rjmp	.+440    	; 0x5194 <fat_write_file+0x53e>
            break;

        /* calculate new file position */
        buffer += write_length;
        buffer_left -= write_length;
    4fdc:	84 18       	sub	r8, r4
    4fde:	95 08       	sbc	r9, r5
        fd->pos += write_length;
    4fe0:	92 01       	movw	r18, r4
    4fe2:	40 e0       	ldi	r20, 0x00	; 0
    4fe4:	50 e0       	ldi	r21, 0x00	; 0
    4fe6:	60 e0       	ldi	r22, 0x00	; 0
    4fe8:	70 e0       	ldi	r23, 0x00	; 0
    4fea:	cb 01       	movw	r24, r22
    4fec:	ab 89       	ldd	r26, Y+19	; 0x13
    4fee:	bc 89       	ldd	r27, Y+20	; 0x14
    4ff0:	d3 96       	adiw	r26, 0x33	; 51
    4ff2:	ec 91       	ld	r30, X
    4ff4:	d3 97       	sbiw	r26, 0x33	; 51
    4ff6:	d4 96       	adiw	r26, 0x34	; 52
    4ff8:	2c 90       	ld	r2, X
    4ffa:	d4 97       	sbiw	r26, 0x34	; 52
    4ffc:	d5 96       	adiw	r26, 0x35	; 53
    4ffe:	ec 90       	ld	r14, X
    5000:	d5 97       	sbiw	r26, 0x35	; 53
    5002:	d6 96       	adiw	r26, 0x36	; 54
    5004:	fc 90       	ld	r15, X
    5006:	d6 97       	sbiw	r26, 0x36	; 54
    5008:	d7 96       	adiw	r26, 0x37	; 55
    500a:	fc 91       	ld	r31, X
    500c:	d7 97       	sbiw	r26, 0x37	; 55
    500e:	d8 96       	adiw	r26, 0x38	; 56
    5010:	3c 90       	ld	r3, X
    5012:	d8 97       	sbiw	r26, 0x38	; 56
    5014:	d9 96       	adiw	r26, 0x39	; 57
    5016:	bc 91       	ld	r27, X
    5018:	b9 83       	std	Y+1, r27	; 0x01
    501a:	ab 89       	ldd	r26, Y+19	; 0x13
    501c:	bc 89       	ldd	r27, Y+20	; 0x14
    501e:	da 96       	adiw	r26, 0x3a	; 58
    5020:	bc 91       	ld	r27, X
    5022:	bf 87       	std	Y+15, r27	; 0x0f
    5024:	e4 0d       	add	r30, r4
    5026:	01 e0       	ldi	r16, 0x01	; 1
    5028:	e4 15       	cp	r30, r4
    502a:	08 f0       	brcs	.+2      	; 0x502e <fat_write_file+0x3d8>
    502c:	00 e0       	ldi	r16, 0x00	; 0
    502e:	b2 2d       	mov	r27, r2
    5030:	b3 0f       	add	r27, r19
    5032:	11 e0       	ldi	r17, 0x01	; 1
    5034:	b3 17       	cp	r27, r19
    5036:	08 f0       	brcs	.+2      	; 0x503a <fat_write_file+0x3e4>
    5038:	10 e0       	ldi	r17, 0x00	; 0
    503a:	0b 0f       	add	r16, r27
    503c:	a1 e0       	ldi	r26, 0x01	; 1
    503e:	0b 17       	cp	r16, r27
    5040:	08 f0       	brcs	.+2      	; 0x5044 <fat_write_file+0x3ee>
    5042:	a0 e0       	ldi	r26, 0x00	; 0
    5044:	1a 2b       	or	r17, r26
    5046:	a4 2f       	mov	r26, r20
    5048:	ae 0d       	add	r26, r14
    504a:	b1 e0       	ldi	r27, 0x01	; 1
    504c:	a4 17       	cp	r26, r20
    504e:	08 f0       	brcs	.+2      	; 0x5052 <fat_write_file+0x3fc>
    5050:	b0 e0       	ldi	r27, 0x00	; 0
    5052:	1a 0f       	add	r17, r26
    5054:	ee 24       	eor	r14, r14
    5056:	e3 94       	inc	r14
    5058:	1a 17       	cp	r17, r26
    505a:	08 f0       	brcs	.+2      	; 0x505e <fat_write_file+0x408>
    505c:	ee 24       	eor	r14, r14
    505e:	be 29       	or	r27, r14
    5060:	f5 0e       	add	r15, r21
    5062:	a1 e0       	ldi	r26, 0x01	; 1
    5064:	f5 16       	cp	r15, r21
    5066:	08 f0       	brcs	.+2      	; 0x506a <fat_write_file+0x414>
    5068:	a0 e0       	ldi	r26, 0x00	; 0
    506a:	bf 0d       	add	r27, r15
    506c:	b8 8b       	std	Y+16, r27	; 0x10
    506e:	ee 24       	eor	r14, r14
    5070:	e3 94       	inc	r14
    5072:	bf 15       	cp	r27, r15
    5074:	08 f0       	brcs	.+2      	; 0x5078 <fat_write_file+0x422>
    5076:	ee 24       	eor	r14, r14
    5078:	ae 29       	or	r26, r14
    507a:	f6 0f       	add	r31, r22
    507c:	22 24       	eor	r2, r2
    507e:	23 94       	inc	r2
    5080:	f6 17       	cp	r31, r22
    5082:	08 f0       	brcs	.+2      	; 0x5086 <fat_write_file+0x430>
    5084:	22 24       	eor	r2, r2
    5086:	af 0f       	add	r26, r31
    5088:	aa 8b       	std	Y+18, r26	; 0x12
    508a:	ff 24       	eor	r15, r15
    508c:	f3 94       	inc	r15
    508e:	af 17       	cp	r26, r31
    5090:	08 f0       	brcs	.+2      	; 0x5094 <fat_write_file+0x43e>
    5092:	ff 24       	eor	r15, r15
    5094:	2f 28       	or	r2, r15
    5096:	f7 2f       	mov	r31, r23
    5098:	f3 0d       	add	r31, r3
    509a:	33 24       	eor	r3, r3
    509c:	33 94       	inc	r3
    509e:	f7 17       	cp	r31, r23
    50a0:	08 f0       	brcs	.+2      	; 0x50a4 <fat_write_file+0x44e>
    50a2:	33 24       	eor	r3, r3
    50a4:	2f 0e       	add	r2, r31
    50a6:	ff 24       	eor	r15, r15
    50a8:	f3 94       	inc	r15
    50aa:	2f 16       	cp	r2, r31
    50ac:	08 f0       	brcs	.+2      	; 0x50b0 <fat_write_file+0x45a>
    50ae:	ff 24       	eor	r15, r15
    50b0:	3f 28       	or	r3, r15
    50b2:	f9 81       	ldd	r31, Y+1	; 0x01
    50b4:	f8 0f       	add	r31, r24
    50b6:	ee 24       	eor	r14, r14
    50b8:	e3 94       	inc	r14
    50ba:	f8 17       	cp	r31, r24
    50bc:	08 f0       	brcs	.+2      	; 0x50c0 <fat_write_file+0x46a>
    50be:	ee 24       	eor	r14, r14
    50c0:	3f 0e       	add	r3, r31
    50c2:	ff 24       	eor	r15, r15
    50c4:	f3 94       	inc	r15
    50c6:	3f 16       	cp	r3, r31
    50c8:	08 f0       	brcs	.+2      	; 0x50cc <fat_write_file+0x476>
    50ca:	ff 24       	eor	r15, r15
    50cc:	fe 28       	or	r15, r14
    50ce:	8f 85       	ldd	r24, Y+15	; 0x0f
    50d0:	89 0f       	add	r24, r25
    50d2:	f8 0e       	add	r15, r24
    50d4:	ab 89       	ldd	r26, Y+19	; 0x13
    50d6:	bc 89       	ldd	r27, Y+20	; 0x14
    50d8:	d3 96       	adiw	r26, 0x33	; 51
    50da:	ec 93       	st	X, r30
    50dc:	d3 97       	sbiw	r26, 0x33	; 51
    50de:	d4 96       	adiw	r26, 0x34	; 52
    50e0:	0c 93       	st	X, r16
    50e2:	d4 97       	sbiw	r26, 0x34	; 52
    50e4:	d5 96       	adiw	r26, 0x35	; 53
    50e6:	1c 93       	st	X, r17
    50e8:	d5 97       	sbiw	r26, 0x35	; 53
    50ea:	e8 89       	ldd	r30, Y+16	; 0x10
    50ec:	d6 96       	adiw	r26, 0x36	; 54
    50ee:	ec 93       	st	X, r30
    50f0:	d6 97       	sbiw	r26, 0x36	; 54
    50f2:	fa 89       	ldd	r31, Y+18	; 0x12
    50f4:	d7 96       	adiw	r26, 0x37	; 55
    50f6:	fc 93       	st	X, r31
    50f8:	d7 97       	sbiw	r26, 0x37	; 55
    50fa:	d8 96       	adiw	r26, 0x38	; 56
    50fc:	2c 92       	st	X, r2
    50fe:	d8 97       	sbiw	r26, 0x38	; 56
    5100:	d9 96       	adiw	r26, 0x39	; 57
    5102:	3c 92       	st	X, r3
    5104:	d9 97       	sbiw	r26, 0x39	; 57
    5106:	da 96       	adiw	r26, 0x3a	; 58
    5108:	fc 92       	st	X, r15
    510a:	da 97       	sbiw	r26, 0x3a	; 58

        if(first_cluster_offset + write_length >= cluster_size)
    510c:	c2 01       	movw	r24, r4
    510e:	86 0d       	add	r24, r6
    5110:	97 1d       	adc	r25, r7
    5112:	e9 84       	ldd	r14, Y+9	; 0x09
    5114:	fa 84       	ldd	r15, Y+10	; 0x0a
    5116:	8e 15       	cp	r24, r14
    5118:	9f 05       	cpc	r25, r15
    511a:	60 f1       	brcs	.+88     	; 0x5174 <fat_write_file+0x51e>
        {
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
    511c:	8d 91       	ld	r24, X+
    511e:	9c 91       	ld	r25, X
    5120:	b6 01       	movw	r22, r12
    5122:	a5 01       	movw	r20, r10
    5124:	0e 94 40 12 	call	0x2480	; 0x2480 <fat_get_next_cluster>
            if(!cluster_num_next && buffer_left > 0)
    5128:	61 15       	cp	r22, r1
    512a:	71 05       	cpc	r23, r1
    512c:	81 05       	cpc	r24, r1
    512e:	91 05       	cpc	r25, r1
    5130:	e9 f4       	brne	.+58     	; 0x516c <fat_write_file+0x516>
    5132:	81 14       	cp	r8, r1
    5134:	91 04       	cpc	r9, r1
    5136:	89 f0       	breq	.+34     	; 0x515a <fat_write_file+0x504>
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
    5138:	ab 89       	ldd	r26, Y+19	; 0x13
    513a:	bc 89       	ldd	r27, Y+20	; 0x14
    513c:	8d 91       	ld	r24, X+
    513e:	9c 91       	ld	r25, X
    5140:	b6 01       	movw	r22, r12
    5142:	a5 01       	movw	r20, r10
    5144:	01 e0       	ldi	r16, 0x01	; 1
    5146:	10 e0       	ldi	r17, 0x00	; 0
    5148:	20 e0       	ldi	r18, 0x00	; 0
    514a:	30 e0       	ldi	r19, 0x00	; 0
    514c:	0e 94 78 15 	call	0x2af0	; 0x2af0 <fat_append_clusters>
            if(!cluster_num_next)
    5150:	61 15       	cp	r22, r1
    5152:	71 05       	cpc	r23, r1
    5154:	81 05       	cpc	r24, r1
    5156:	91 05       	cpc	r25, r1
    5158:	49 f4       	brne	.+18     	; 0x516c <fat_write_file+0x516>
    515a:	eb 89       	ldd	r30, Y+19	; 0x13
    515c:	fc 89       	ldd	r31, Y+20	; 0x14
    515e:	f9 8b       	std	Y+17, r31	; 0x11
    5160:	e8 8b       	std	Y+16, r30	; 0x10
            {
                fd->pos_cluster = 0;
    5162:	13 ae       	std	Z+59, r1	; 0x3b
    5164:	14 ae       	std	Z+60, r1	; 0x3c
    5166:	15 ae       	std	Z+61, r1	; 0x3d
    5168:	16 ae       	std	Z+62, r1	; 0x3e
                break;
    516a:	1d c0       	rjmp	.+58     	; 0x51a6 <fat_write_file+0x550>
            /* we are on a cluster boundary, so get the next cluster */
            cluster_t cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
            if(!cluster_num_next && buffer_left > 0)
                /* we reached the last cluster, append a new one */
                cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
            if(!cluster_num_next)
    516c:	5b 01       	movw	r10, r22
    516e:	6c 01       	movw	r12, r24
                fd->pos_cluster = 0;
                break;
            }

            cluster_num = cluster_num_next;
            first_cluster_offset = 0;
    5170:	66 24       	eor	r6, r6
    5172:	77 24       	eor	r7, r7
        }

        fd->pos_cluster = cluster_num;
    5174:	eb 89       	ldd	r30, Y+19	; 0x13
    5176:	fc 89       	ldd	r31, Y+20	; 0x14
    5178:	a3 ae       	std	Z+59, r10	; 0x3b
    517a:	b4 ae       	std	Z+60, r11	; 0x3c
    517c:	c5 ae       	std	Z+61, r12	; 0x3d
    517e:	d6 ae       	std	Z+62, r13	; 0x3e

    } while(buffer_left > 0); /* check if we are done */
    5180:	81 14       	cp	r8, r1
    5182:	91 04       	cpc	r9, r1
    5184:	61 f0       	breq	.+24     	; 0x519e <fat_write_file+0x548>
        /* write data which fits into the current cluster */
        if(!fd->fs->partition->device_write(cluster_offset, buffer, write_length))
            break;

        /* calculate new file position */
        buffer += write_length;
    5186:	eb 84       	ldd	r14, Y+11	; 0x0b
    5188:	fc 84       	ldd	r15, Y+12	; 0x0c
    518a:	e4 0c       	add	r14, r4
    518c:	f5 1c       	adc	r15, r5
    518e:	fc 86       	std	Y+12, r15	; 0x0c
    5190:	eb 86       	std	Y+11, r14	; 0x0b
    5192:	92 ce       	rjmp	.-732    	; 0x4eb8 <fat_write_file+0x262>
    5194:	0b 89       	ldd	r16, Y+19	; 0x13
    5196:	1c 89       	ldd	r17, Y+20	; 0x14
    5198:	19 8b       	std	Y+17, r17	; 0x11
    519a:	08 8b       	std	Y+16, r16	; 0x10
    519c:	04 c0       	rjmp	.+8      	; 0x51a6 <fat_write_file+0x550>
    519e:	2b 89       	ldd	r18, Y+19	; 0x13
    51a0:	3c 89       	ldd	r19, Y+20	; 0x14
    51a2:	39 8b       	std	Y+17, r19	; 0x11
    51a4:	28 8b       	std	Y+16, r18	; 0x10
        fd->pos_cluster = cluster_num;

    } while(buffer_left > 0); /* check if we are done */

    /* update directory entry */
    if(fd->pos > fd->dir_entry.file_size)
    51a6:	a8 89       	ldd	r26, Y+16	; 0x10
    51a8:	b9 89       	ldd	r27, Y+17	; 0x11
    51aa:	d3 96       	adiw	r26, 0x33	; 51
    51ac:	7c 91       	ld	r23, X
    51ae:	d3 97       	sbiw	r26, 0x33	; 51
    51b0:	d4 96       	adiw	r26, 0x34	; 52
    51b2:	2c 91       	ld	r18, X
    51b4:	d4 97       	sbiw	r26, 0x34	; 52
    51b6:	d5 96       	adiw	r26, 0x35	; 53
    51b8:	9c 91       	ld	r25, X
    51ba:	d5 97       	sbiw	r26, 0x35	; 53
    51bc:	d6 96       	adiw	r26, 0x36	; 54
    51be:	8c 91       	ld	r24, X
    51c0:	d6 97       	sbiw	r26, 0x36	; 54
    51c2:	d7 96       	adiw	r26, 0x37	; 55
    51c4:	3c 91       	ld	r19, X
    51c6:	d7 97       	sbiw	r26, 0x37	; 55
    51c8:	d8 96       	adiw	r26, 0x38	; 56
    51ca:	4c 91       	ld	r20, X
    51cc:	d8 97       	sbiw	r26, 0x38	; 56
    51ce:	d9 96       	adiw	r26, 0x39	; 57
    51d0:	5c 91       	ld	r21, X
    51d2:	d9 97       	sbiw	r26, 0x39	; 57
    51d4:	da 96       	adiw	r26, 0x3a	; 58
    51d6:	6c 91       	ld	r22, X
    51d8:	da 97       	sbiw	r26, 0x3a	; 58
    51da:	97 96       	adiw	r26, 0x27	; 39
    51dc:	4d 90       	ld	r4, X+
    51de:	5d 90       	ld	r5, X+
    51e0:	6d 90       	ld	r6, X+
    51e2:	7c 90       	ld	r7, X
    51e4:	9a 97       	sbiw	r26, 0x2a	; 42
    51e6:	63 01       	movw	r12, r6
    51e8:	52 01       	movw	r10, r4
    51ea:	ee 24       	eor	r14, r14
    51ec:	ff 24       	eor	r15, r15
    51ee:	87 01       	movw	r16, r14
    51f0:	16 17       	cp	r17, r22
    51f2:	e0 f0       	brcs	.+56     	; 0x522c <fat_write_file+0x5d6>
    51f4:	61 17       	cp	r22, r17
    51f6:	b1 f5       	brne	.+108    	; 0x5264 <fat_write_file+0x60e>
    51f8:	05 17       	cp	r16, r21
    51fa:	c0 f0       	brcs	.+48     	; 0x522c <fat_write_file+0x5d6>
    51fc:	50 17       	cp	r21, r16
    51fe:	91 f5       	brne	.+100    	; 0x5264 <fat_write_file+0x60e>
    5200:	f4 16       	cp	r15, r20
    5202:	a0 f0       	brcs	.+40     	; 0x522c <fat_write_file+0x5d6>
    5204:	4f 15       	cp	r20, r15
    5206:	71 f5       	brne	.+92     	; 0x5264 <fat_write_file+0x60e>
    5208:	e3 16       	cp	r14, r19
    520a:	80 f0       	brcs	.+32     	; 0x522c <fat_write_file+0x5d6>
    520c:	3e 15       	cp	r19, r14
    520e:	51 f5       	brne	.+84     	; 0x5264 <fat_write_file+0x60e>
    5210:	d8 16       	cp	r13, r24
    5212:	60 f0       	brcs	.+24     	; 0x522c <fat_write_file+0x5d6>
    5214:	8d 15       	cp	r24, r13
    5216:	31 f5       	brne	.+76     	; 0x5264 <fat_write_file+0x60e>
    5218:	c9 16       	cp	r12, r25
    521a:	40 f0       	brcs	.+16     	; 0x522c <fat_write_file+0x5d6>
    521c:	9c 15       	cp	r25, r12
    521e:	11 f5       	brne	.+68     	; 0x5264 <fat_write_file+0x60e>
    5220:	b2 16       	cp	r11, r18
    5222:	20 f0       	brcs	.+8      	; 0x522c <fat_write_file+0x5d6>
    5224:	2b 15       	cp	r18, r11
    5226:	f1 f4       	brne	.+60     	; 0x5264 <fat_write_file+0x60e>
    5228:	47 16       	cp	r4, r23
    522a:	e0 f4       	brcc	.+56     	; 0x5264 <fat_write_file+0x60e>
    {
        uint32_t size_old = fd->dir_entry.file_size;

        /* update file size */
        fd->dir_entry.file_size = fd->pos;
    522c:	e8 89       	ldd	r30, Y+16	; 0x10
    522e:	f9 89       	ldd	r31, Y+17	; 0x11
    5230:	77 a3       	std	Z+39, r23	; 0x27
    5232:	20 a7       	std	Z+40, r18	; 0x28
    5234:	91 a7       	std	Z+41, r25	; 0x29
    5236:	82 a7       	std	Z+42, r24	; 0x2a
        /* write directory entry */
        if(!fat_write_dir_entry(fd->fs, &fd->dir_entry))
    5238:	df 01       	movw	r26, r30
    523a:	8d 91       	ld	r24, X+
    523c:	9d 91       	ld	r25, X+
    523e:	bd 01       	movw	r22, r26
    5240:	0e 94 cf 1a 	call	0x359e	; 0x359e <fat_write_dir_entry>
    5244:	88 23       	and	r24, r24
    5246:	71 f4       	brne	.+28     	; 0x5264 <fat_write_file+0x60e>
        {
            /* We do not return an error here since we actually wrote
             * some data to disk. So we calculate the amount of data
             * we wrote to disk and which lies within the old file size.
             */
            buffer_left = fd->pos - size_old;
    5248:	e8 89       	ldd	r30, Y+16	; 0x10
    524a:	f9 89       	ldd	r31, Y+17	; 0x11
    524c:	83 a8       	ldd	r8, Z+51	; 0x33
    524e:	94 a8       	ldd	r9, Z+52	; 0x34
    5250:	84 18       	sub	r8, r4
    5252:	95 08       	sbc	r9, r5
            fd->pos = size_old;
    5254:	a3 aa       	std	Z+51, r10	; 0x33
    5256:	b4 aa       	std	Z+52, r11	; 0x34
    5258:	c5 aa       	std	Z+53, r12	; 0x35
    525a:	d6 aa       	std	Z+54, r13	; 0x36
    525c:	17 aa       	std	Z+55, r1	; 0x37
    525e:	10 ae       	std	Z+56, r1	; 0x38
    5260:	11 ae       	std	Z+57, r1	; 0x39
    5262:	12 ae       	std	Z+58, r1	; 0x3a
        }
    }

    return buffer_len - buffer_left;
    5264:	2d 85       	ldd	r18, Y+13	; 0x0d
    5266:	3e 85       	ldd	r19, Y+14	; 0x0e
    5268:	28 19       	sub	r18, r8
    526a:	39 09       	sbc	r19, r9
    526c:	02 c0       	rjmp	.+4      	; 0x5272 <fat_write_file+0x61c>
                cluster_num_next = fat_get_next_cluster(fd->fs, cluster_num);
                if(!cluster_num_next && pos == 0)
                    /* the file exactly ends on a cluster boundary, and we append to it */
                    cluster_num_next = fat_append_clusters(fd->fs, cluster_num, 1);
                if(!cluster_num_next)
                    return -1;
    526e:	2f ef       	ldi	r18, 0xFF	; 255
    5270:	3f ef       	ldi	r19, 0xFF	; 255
            fd->pos = size_old;
        }
    }

    return buffer_len - buffer_left;
}
    5272:	c9 01       	movw	r24, r18
    5274:	64 96       	adiw	r28, 0x14	; 20
    5276:	0f b6       	in	r0, 0x3f	; 63
    5278:	f8 94       	cli
    527a:	de bf       	out	0x3e, r29	; 62
    527c:	0f be       	out	0x3f, r0	; 63
    527e:	cd bf       	out	0x3d, r28	; 61
    5280:	cf 91       	pop	r28
    5282:	df 91       	pop	r29
    5284:	1f 91       	pop	r17
    5286:	0f 91       	pop	r16
    5288:	ff 90       	pop	r15
    528a:	ef 90       	pop	r14
    528c:	df 90       	pop	r13
    528e:	cf 90       	pop	r12
    5290:	bf 90       	pop	r11
    5292:	af 90       	pop	r10
    5294:	9f 90       	pop	r9
    5296:	8f 90       	pop	r8
    5298:	7f 90       	pop	r7
    529a:	6f 90       	pop	r6
    529c:	5f 90       	pop	r5
    529e:	4f 90       	pop	r4
    52a0:	3f 90       	pop	r3
    52a2:	2f 90       	pop	r2
    52a4:	08 95       	ret

000052a6 <fat_open_dir>:
 * \param[in] dir_entry The directory entry which stands for the directory to open.
 * \returns An opaque directory descriptor on success, 0 on failure.
 * \see fat_close_dir
 */
struct fat_dir_struct* fat_open_dir(struct fat_fs_struct* fs, const struct fat_dir_entry_struct* dir_entry)
{
    52a6:	cf 93       	push	r28
    52a8:	df 93       	push	r29
    52aa:	db 01       	movw	r26, r22
    if(!fs || !dir_entry || !(dir_entry->attributes & FAT_ATTRIB_DIR))
    52ac:	00 97       	sbiw	r24, 0x00	; 0
    52ae:	b1 f1       	breq	.+108    	; 0x531c <fat_open_dir+0x76>
    52b0:	10 97       	sbiw	r26, 0x00	; 0
    52b2:	a1 f1       	breq	.+104    	; 0x531c <fat_open_dir+0x76>
    52b4:	90 96       	adiw	r26, 0x20	; 32
    52b6:	2c 91       	ld	r18, X
    52b8:	90 97       	sbiw	r26, 0x20	; 32
    52ba:	24 ff       	sbrs	r18, 4
    52bc:	2f c0       	rjmp	.+94     	; 0x531c <fat_open_dir+0x76>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    52be:	20 91 db 03 	lds	r18, 0x03DB
    52c2:	30 91 dc 03 	lds	r19, 0x03DC
    52c6:	21 15       	cp	r18, r1
    52c8:	31 05       	cpc	r19, r1
    52ca:	51 f0       	breq	.+20     	; 0x52e0 <fat_open_dir+0x3a>
    52cc:	20 91 14 04 	lds	r18, 0x0414
    52d0:	30 91 15 04 	lds	r19, 0x0415
    52d4:	21 15       	cp	r18, r1
    52d6:	31 05       	cpc	r19, r1
    52d8:	09 f5       	brne	.+66     	; 0x531c <fat_open_dir+0x76>
            break;

        ++dd;
    52da:	e4 e1       	ldi	r30, 0x14	; 20
    52dc:	f4 e0       	ldi	r31, 0x04	; 4
    52de:	02 c0       	rjmp	.+4      	; 0x52e4 <fat_open_dir+0x3e>
#else
    struct fat_dir_struct* dd = fat_dir_handles;
    uint8_t i;
    for(i = 0; i < FAT_DIR_COUNT; ++i)
    {
        if(!dd->fs)
    52e0:	eb ed       	ldi	r30, 0xDB	; 219
    52e2:	f3 e0       	ldi	r31, 0x03	; 3
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
#endif
    
    memcpy(&dd->dir_entry, dir_entry, sizeof(*dir_entry));
    52e4:	9f 01       	movw	r18, r30
    52e6:	2e 5f       	subi	r18, 0xFE	; 254
    52e8:	3f 4f       	sbci	r19, 0xFF	; 255
    52ea:	bd 01       	movw	r22, r26
    52ec:	41 e3       	ldi	r20, 0x31	; 49
    52ee:	eb 01       	movw	r28, r22
    52f0:	09 90       	ld	r0, Y+
    52f2:	be 01       	movw	r22, r28
    52f4:	e9 01       	movw	r28, r18
    52f6:	09 92       	st	Y+, r0
    52f8:	9e 01       	movw	r18, r28
    52fa:	41 50       	subi	r20, 0x01	; 1
    52fc:	c1 f7       	brne	.-16     	; 0x52ee <fat_open_dir+0x48>
    dd->fs = fs;
    52fe:	91 83       	std	Z+1, r25	; 0x01
    5300:	80 83       	st	Z, r24
    dd->entry_cluster = dir_entry->cluster;
    5302:	91 96       	adiw	r26, 0x21	; 33
    5304:	2d 91       	ld	r18, X+
    5306:	3d 91       	ld	r19, X+
    5308:	4d 91       	ld	r20, X+
    530a:	5c 91       	ld	r21, X
    530c:	94 97       	sbiw	r26, 0x24	; 36
    530e:	23 ab       	std	Z+51, r18	; 0x33
    5310:	34 ab       	std	Z+52, r19	; 0x34
    5312:	45 ab       	std	Z+53, r20	; 0x35
    5314:	56 ab       	std	Z+54, r21	; 0x36
    dd->entry_offset = 0;
    5316:	10 ae       	std	Z+56, r1	; 0x38
    5318:	17 aa       	std	Z+55, r1	; 0x37

    return dd;
    531a:	02 c0       	rjmp	.+4      	; 0x5320 <fat_open_dir+0x7a>
            break;

        ++dd;
    }
    if(i >= FAT_DIR_COUNT)
        return 0;
    531c:	e0 e0       	ldi	r30, 0x00	; 0
    531e:	f0 e0       	ldi	r31, 0x00	; 0
    dd->fs = fs;
    dd->entry_cluster = dir_entry->cluster;
    dd->entry_offset = 0;

    return dd;
}
    5320:	cf 01       	movw	r24, r30
    5322:	df 91       	pop	r29
    5324:	cf 91       	pop	r28
    5326:	08 95       	ret

00005328 <fat_close_dir>:
 * \param[in] dd The directory descriptor to close.
 * \see fat_open_dir
 */
void fat_close_dir(struct fat_dir_struct* dd)
{
    if(dd)
    5328:	00 97       	sbiw	r24, 0x00	; 0
    532a:	19 f0       	breq	.+6      	; 0x5332 <fat_close_dir+0xa>
#if USE_DYNAMIC_MEMORY
        free(dd);
#else
        dd->fs = 0;
    532c:	fc 01       	movw	r30, r24
    532e:	11 82       	std	Z+1, r1	; 0x01
    5330:	10 82       	st	Z, r1
    5332:	08 95       	ret

00005334 <fat_read_dir>:
 * \param[out] dir_entry Pointer to a buffer into which to write the directory entry information.
 * \returns 0 on failure, 1 on success.
 * \see fat_reset_dir
 */
uint8_t fat_read_dir(struct fat_dir_struct* dd, struct fat_dir_entry_struct* dir_entry)
{
    5334:	2f 92       	push	r2
    5336:	3f 92       	push	r3
    5338:	4f 92       	push	r4
    533a:	5f 92       	push	r5
    533c:	6f 92       	push	r6
    533e:	7f 92       	push	r7
    5340:	8f 92       	push	r8
    5342:	9f 92       	push	r9
    5344:	af 92       	push	r10
    5346:	bf 92       	push	r11
    5348:	cf 92       	push	r12
    534a:	df 92       	push	r13
    534c:	ef 92       	push	r14
    534e:	ff 92       	push	r15
    5350:	0f 93       	push	r16
    5352:	1f 93       	push	r17
    5354:	df 93       	push	r29
    5356:	cf 93       	push	r28
    5358:	cd b7       	in	r28, 0x3d	; 61
    535a:	de b7       	in	r29, 0x3e	; 62
    535c:	e1 97       	sbiw	r28, 0x31	; 49
    535e:	0f b6       	in	r0, 0x3f	; 63
    5360:	f8 94       	cli
    5362:	de bf       	out	0x3e, r29	; 62
    5364:	0f be       	out	0x3f, r0	; 63
    5366:	cd bf       	out	0x3d, r28	; 61
    5368:	99 a7       	std	Y+41, r25	; 0x29
    536a:	88 a7       	std	Y+40, r24	; 0x28
    536c:	7d a7       	std	Y+45, r23	; 0x2d
    536e:	6c a7       	std	Y+44, r22	; 0x2c
    if(!dd || !dir_entry)
    5370:	00 97       	sbiw	r24, 0x00	; 0
    5372:	09 f4       	brne	.+2      	; 0x5376 <fat_read_dir+0x42>
    5374:	cf c0       	rjmp	.+414    	; 0x5514 <fat_read_dir+0x1e0>
    5376:	61 15       	cp	r22, r1
    5378:	71 05       	cpc	r23, r1
    537a:	09 f4       	brne	.+2      	; 0x537e <fat_read_dir+0x4a>
    537c:	cb c0       	rjmp	.+406    	; 0x5514 <fat_read_dir+0x1e0>
        return 0;

    /* get current position of directory handle */
    struct fat_fs_struct* fs = dd->fs;
    537e:	dc 01       	movw	r26, r24
    5380:	2d 90       	ld	r2, X+
    5382:	3c 90       	ld	r3, X
    5384:	11 97       	sbiw	r26, 0x01	; 1
    const struct fat_header_struct* header = &fs->header;
    uint16_t cluster_size = header->cluster_size;
    5386:	f1 01       	movw	r30, r2
    5388:	00 8c       	ldd	r0, Z+24	; 0x18
    538a:	f1 8d       	ldd	r31, Z+25	; 0x19
    538c:	e0 2d       	mov	r30, r0
    538e:	fb a7       	std	Y+43, r31	; 0x2b
    5390:	ea a7       	std	Y+42, r30	; 0x2a
    cluster_t cluster_num = dd->entry_cluster;
    5392:	d3 96       	adiw	r26, 0x33	; 51
    5394:	4d 90       	ld	r4, X+
    5396:	5d 90       	ld	r5, X+
    5398:	6d 90       	ld	r6, X+
    539a:	7c 90       	ld	r7, X
    539c:	d6 97       	sbiw	r26, 0x36	; 54
    uint16_t cluster_offset = dd->entry_offset;
    539e:	d7 96       	adiw	r26, 0x37	; 55
    53a0:	2d 91       	ld	r18, X+
    53a2:	3c 91       	ld	r19, X
    53a4:	d8 97       	sbiw	r26, 0x38	; 56
    53a6:	3f a3       	std	Y+39, r19	; 0x27
    53a8:	2e a3       	std	Y+38, r18	; 0x26
    struct fat_read_dir_callback_arg arg;

    /* reset directory entry */
    memset(dir_entry, 0, sizeof(*dir_entry));
    53aa:	ec a5       	ldd	r30, Y+44	; 0x2c
    53ac:	fd a5       	ldd	r31, Y+45	; 0x2d
    53ae:	81 e3       	ldi	r24, 0x31	; 49
    53b0:	df 01       	movw	r26, r30
    53b2:	1d 92       	st	X+, r1
    53b4:	8a 95       	dec	r24
    53b6:	e9 f7       	brne	.-6      	; 0x53b2 <fat_read_dir+0x7e>

    /* reset callback arguments */
    memset(&arg, 0, sizeof(arg));
    53b8:	fe 01       	movw	r30, r28
    53ba:	31 96       	adiw	r30, 0x01	; 1
    53bc:	85 e0       	ldi	r24, 0x05	; 5
    53be:	df 01       	movw	r26, r30
    53c0:	1d 92       	st	X+, r1
    53c2:	8a 95       	dec	r24
    53c4:	e9 f7       	brne	.-6      	; 0x53c0 <fat_read_dir+0x8c>
    arg.dir_entry = dir_entry;
    53c6:	ec a5       	ldd	r30, Y+44	; 0x2c
    53c8:	fd a5       	ldd	r31, Y+45	; 0x2d
    53ca:	fa 83       	std	Y+2, r31	; 0x02
    53cc:	e9 83       	std	Y+1, r30	; 0x01

    /* check if we read from the root directory */
    if(cluster_num == 0)
    53ce:	41 14       	cp	r4, r1
    53d0:	51 04       	cpc	r5, r1
    53d2:	61 04       	cpc	r6, r1
    53d4:	71 04       	cpc	r7, r1
    53d6:	09 f0       	breq	.+2      	; 0x53da <fat_read_dir+0xa6>
    53d8:	89 c0       	rjmp	.+274    	; 0x54ec <fat_read_dir+0x1b8>
    {
#if FAT_FAT32_SUPPORT
        if(fs->partition->type == PARTITION_TYPE_FAT32)
    53da:	d1 01       	movw	r26, r2
    53dc:	ed 91       	ld	r30, X+
    53de:	fc 91       	ld	r31, X
    53e0:	11 97       	sbiw	r26, 0x01	; 1
    53e2:	80 85       	ldd	r24, Z+8	; 0x08
    53e4:	8b 30       	cpi	r24, 0x0B	; 11
    53e6:	39 f4       	brne	.+14     	; 0x53f6 <fat_read_dir+0xc2>
            cluster_num = header->root_dir_cluster;
    53e8:	9a 96       	adiw	r26, 0x2a	; 42
    53ea:	4d 90       	ld	r4, X+
    53ec:	5d 90       	ld	r5, X+
    53ee:	6d 90       	ld	r6, X+
    53f0:	7c 90       	ld	r7, X
    53f2:	9d 97       	sbiw	r26, 0x2d	; 45
    53f4:	7b c0       	rjmp	.+246    	; 0x54ec <fat_read_dir+0x1b8>
        else
#endif
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    53f6:	f1 01       	movw	r30, r2
    53f8:	02 8c       	ldd	r0, Z+26	; 0x1a
    53fa:	f3 8d       	ldd	r31, Z+27	; 0x1b
    53fc:	e0 2d       	mov	r30, r0
    53fe:	d1 01       	movw	r26, r2
    5400:	92 96       	adiw	r26, 0x22	; 34
    5402:	8d 91       	ld	r24, X+
    5404:	9c 91       	ld	r25, X
    5406:	93 97       	sbiw	r26, 0x23	; 35
    5408:	e8 1b       	sub	r30, r24
    540a:	f9 0b       	sbc	r31, r25
    540c:	fb a7       	std	Y+43, r31	; 0x2b
    540e:	ea a7       	std	Y+42, r30	; 0x2a
    5410:	6d c0       	rjmp	.+218    	; 0x54ec <fat_read_dir+0x1b8>
    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    {
        /* read directory entries up to the cluster border */
        uint16_t cluster_left = cluster_size - cluster_offset;
    5412:	8a a4       	ldd	r8, Y+42	; 0x2a
    5414:	9b a4       	ldd	r9, Y+43	; 0x2b
    5416:	ee a1       	ldd	r30, Y+38	; 0x26
    5418:	ff a1       	ldd	r31, Y+39	; 0x27
    541a:	8e 1a       	sub	r8, r30
    541c:	9f 0a       	sbc	r9, r31
        uint32_t pos = cluster_offset;
    541e:	cf 01       	movw	r24, r30
    5420:	a0 e0       	ldi	r26, 0x00	; 0
    5422:	b0 e0       	ldi	r27, 0x00	; 0
    5424:	8e a7       	std	Y+46, r24	; 0x2e
    5426:	9f a7       	std	Y+47, r25	; 0x2f
    5428:	a8 ab       	std	Y+48, r26	; 0x30
    542a:	b9 ab       	std	Y+49, r27	; 0x31
        if(cluster_num == 0)
    542c:	41 14       	cp	r4, r1
    542e:	51 04       	cpc	r5, r1
    5430:	61 04       	cpc	r6, r1
    5432:	71 04       	cpc	r7, r1
    5434:	31 f4       	brne	.+12     	; 0x5442 <fat_read_dir+0x10e>
            pos += header->root_dir_offset;
    5436:	f1 01       	movw	r30, r2
    5438:	a2 a0       	ldd	r10, Z+34	; 0x22
    543a:	b3 a0       	ldd	r11, Z+35	; 0x23
    543c:	c4 a0       	ldd	r12, Z+36	; 0x24
    543e:	d5 a0       	ldd	r13, Z+37	; 0x25
    5440:	0b c0       	rjmp	.+22     	; 0x5458 <fat_read_dir+0x124>
        else
            pos += fat_cluster_offset(fs, cluster_num);
    5442:	c1 01       	movw	r24, r2
    5444:	b3 01       	movw	r22, r6
    5446:	a2 01       	movw	r20, r4
    5448:	0e 94 a2 18 	call	0x3144	; 0x3144 <fat_cluster_offset>
    544c:	59 01       	movw	r10, r18
    544e:	6a 01       	movw	r12, r20
    5450:	8e a5       	ldd	r24, Y+46	; 0x2e
    5452:	9f a5       	ldd	r25, Y+47	; 0x2f
    5454:	a8 a9       	ldd	r26, Y+48	; 0x30
    5456:	b9 a9       	ldd	r27, Y+49	; 0x31
    5458:	a8 0e       	add	r10, r24
    545a:	b9 1e       	adc	r11, r25
    545c:	ca 1e       	adc	r12, r26
    545e:	db 1e       	adc	r13, r27

        arg.bytes_read = 0;
    5460:	1c 82       	std	Y+4, r1	; 0x04
    5462:	1b 82       	std	Y+3, r1	; 0x03
        if(!fs->partition->device_read_interval(pos,
    5464:	d1 01       	movw	r26, r2
    5466:	ed 91       	ld	r30, X+
    5468:	fc 91       	ld	r31, X
    546a:	02 80       	ldd	r0, Z+2	; 0x02
    546c:	f3 81       	ldd	r31, Z+3	; 0x03
    546e:	e0 2d       	mov	r30, r0
    5470:	95 01       	movw	r18, r10
    5472:	a6 01       	movw	r20, r12
    5474:	60 e0       	ldi	r22, 0x00	; 0
    5476:	70 e0       	ldi	r23, 0x00	; 0
    5478:	80 e0       	ldi	r24, 0x00	; 0
    547a:	90 e0       	ldi	r25, 0x00	; 0
    547c:	8e 01       	movw	r16, r28
    547e:	0a 5f       	subi	r16, 0xFA	; 250
    5480:	1f 4f       	sbci	r17, 0xFF	; 255
    5482:	a0 e2       	ldi	r26, 0x20	; 32
    5484:	ea 2e       	mov	r14, r26
    5486:	f1 2c       	mov	r15, r1
    5488:	64 01       	movw	r12, r8
    548a:	bb e4       	ldi	r27, 0x4B	; 75
    548c:	ab 2e       	mov	r10, r27
    548e:	b9 e1       	ldi	r27, 0x19	; 25
    5490:	bb 2e       	mov	r11, r27
    5492:	4e 01       	movw	r8, r28
    5494:	08 94       	sec
    5496:	81 1c       	adc	r8, r1
    5498:	91 1c       	adc	r9, r1
    549a:	09 95       	icall
    549c:	88 23       	and	r24, r24
    549e:	d1 f1       	breq	.+116    	; 0x5514 <fat_read_dir+0x1e0>
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;

        cluster_offset += arg.bytes_read;
    54a0:	8b 81       	ldd	r24, Y+3	; 0x03
    54a2:	9c 81       	ldd	r25, Y+4	; 0x04
    54a4:	ee a1       	ldd	r30, Y+38	; 0x26
    54a6:	ff a1       	ldd	r31, Y+39	; 0x27
    54a8:	e8 0f       	add	r30, r24
    54aa:	f9 1f       	adc	r31, r25
    54ac:	ff a3       	std	Y+39, r31	; 0x27
    54ae:	ee a3       	std	Y+38, r30	; 0x26

        if(cluster_offset >= cluster_size)
    54b0:	2a a5       	ldd	r18, Y+42	; 0x2a
    54b2:	3b a5       	ldd	r19, Y+43	; 0x2b
    54b4:	e2 17       	cp	r30, r18
    54b6:	f3 07       	cpc	r31, r19
    54b8:	c8 f0       	brcs	.+50     	; 0x54ec <fat_read_dir+0x1b8>
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;

            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
    54ba:	c1 01       	movw	r24, r2
    54bc:	b3 01       	movw	r22, r6
    54be:	a2 01       	movw	r20, r4
    54c0:	0e 94 40 12 	call	0x2480	; 0x2480 <fat_get_next_cluster>
    54c4:	2b 01       	movw	r4, r22
    54c6:	3c 01       	movw	r6, r24
    54c8:	61 15       	cp	r22, r1
    54ca:	71 05       	cpc	r23, r1
    54cc:	81 05       	cpc	r24, r1
    54ce:	91 05       	cpc	r25, r1
    54d0:	59 f4       	brne	.+22     	; 0x54e8 <fat_read_dir+0x1b4>
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
    54d2:	a8 a5       	ldd	r26, Y+40	; 0x28
    54d4:	b9 a5       	ldd	r27, Y+41	; 0x29
    54d6:	93 96       	adiw	r26, 0x23	; 35
    54d8:	4d 90       	ld	r4, X+
    54da:	5d 90       	ld	r5, X+
    54dc:	6d 90       	ld	r6, X+
    54de:	7c 90       	ld	r7, X
    54e0:	96 97       	sbiw	r26, 0x26	; 38
        cluster_offset += arg.bytes_read;

        if(cluster_offset >= cluster_size)
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;
    54e2:	1f a2       	std	Y+39, r1	; 0x27
    54e4:	1e a2       	std	Y+38, r1	; 0x26
            /* get number of next cluster */
            if(!(cluster_num = fat_get_next_cluster(fs, cluster_num)))
            {
                /* directory entry not found, reset directory handle */
                cluster_num = dd->dir_entry.cluster;
                break;
    54e6:	06 c0       	rjmp	.+12     	; 0x54f4 <fat_read_dir+0x1c0>
        cluster_offset += arg.bytes_read;

        if(cluster_offset >= cluster_size)
        {
            /* we reached the cluster border and switch to the next cluster */
            cluster_offset = 0;
    54e8:	1f a2       	std	Y+39, r1	; 0x27
    54ea:	1e a2       	std	Y+38, r1	; 0x26
            cluster_size = header->cluster_zero_offset - header->root_dir_offset;
    }

    /* read entries */
    uint8_t buffer[32];
    while(!arg.finished)
    54ec:	8d 81       	ldd	r24, Y+5	; 0x05
    54ee:	88 23       	and	r24, r24
    54f0:	09 f4       	brne	.+2      	; 0x54f4 <fat_read_dir+0x1c0>
    54f2:	8f cf       	rjmp	.-226    	; 0x5412 <fat_read_dir+0xde>
                break;
            }
        }
    }

    dd->entry_cluster = cluster_num;
    54f4:	e8 a5       	ldd	r30, Y+40	; 0x28
    54f6:	f9 a5       	ldd	r31, Y+41	; 0x29
    54f8:	43 aa       	std	Z+51, r4	; 0x33
    54fa:	54 aa       	std	Z+52, r5	; 0x34
    54fc:	65 aa       	std	Z+53, r6	; 0x35
    54fe:	76 aa       	std	Z+54, r7	; 0x36
    dd->entry_offset = cluster_offset;
    5500:	2e a1       	ldd	r18, Y+38	; 0x26
    5502:	3f a1       	ldd	r19, Y+39	; 0x27
    5504:	30 af       	std	Z+56, r19	; 0x38
    5506:	27 ab       	std	Z+55, r18	; 0x37

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
    5508:	81 e0       	ldi	r24, 0x01	; 1
    550a:	ac a5       	ldd	r26, Y+44	; 0x2c
    550c:	bd a5       	ldd	r27, Y+45	; 0x2d
    550e:	9c 91       	ld	r25, X
    5510:	99 23       	and	r25, r25
    5512:	09 f4       	brne	.+2      	; 0x5516 <fat_read_dir+0x1e2>
                                                sizeof(buffer),
                                                cluster_left,
                                                fat_dir_entry_read_callback,
                                                &arg)
          )
            return 0;
    5514:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = cluster_num;
    dd->entry_offset = cluster_offset;

    return dir_entry->long_name[0] != '\0' ? 1 : 0;
}
    5516:	e1 96       	adiw	r28, 0x31	; 49
    5518:	0f b6       	in	r0, 0x3f	; 63
    551a:	f8 94       	cli
    551c:	de bf       	out	0x3e, r29	; 62
    551e:	0f be       	out	0x3f, r0	; 63
    5520:	cd bf       	out	0x3d, r28	; 61
    5522:	cf 91       	pop	r28
    5524:	df 91       	pop	r29
    5526:	1f 91       	pop	r17
    5528:	0f 91       	pop	r16
    552a:	ff 90       	pop	r15
    552c:	ef 90       	pop	r14
    552e:	df 90       	pop	r13
    5530:	cf 90       	pop	r12
    5532:	bf 90       	pop	r11
    5534:	af 90       	pop	r10
    5536:	9f 90       	pop	r9
    5538:	8f 90       	pop	r8
    553a:	7f 90       	pop	r7
    553c:	6f 90       	pop	r6
    553e:	5f 90       	pop	r5
    5540:	4f 90       	pop	r4
    5542:	3f 90       	pop	r3
    5544:	2f 90       	pop	r2
    5546:	08 95       	ret

00005548 <fat_get_dir_entry_of_path>:
 * \param[out] dir_entry The directory entry to fill.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_get_dir_entry_of_path(struct fat_fs_struct* fs, const char* path, struct fat_dir_entry_struct* dir_entry)
{
    5548:	8f 92       	push	r8
    554a:	9f 92       	push	r9
    554c:	af 92       	push	r10
    554e:	bf 92       	push	r11
    5550:	cf 92       	push	r12
    5552:	df 92       	push	r13
    5554:	ef 92       	push	r14
    5556:	ff 92       	push	r15
    5558:	0f 93       	push	r16
    555a:	1f 93       	push	r17
    555c:	cf 93       	push	r28
    555e:	df 93       	push	r29
    5560:	4c 01       	movw	r8, r24
    5562:	eb 01       	movw	r28, r22
    5564:	8a 01       	movw	r16, r20
    if(!fs || !path || path[0] == '\0' || !dir_entry)
    5566:	00 97       	sbiw	r24, 0x00	; 0
    5568:	09 f4       	brne	.+2      	; 0x556c <fat_get_dir_entry_of_path+0x24>
    556a:	66 c0       	rjmp	.+204    	; 0x5638 <fat_get_dir_entry_of_path+0xf0>
    556c:	20 97       	sbiw	r28, 0x00	; 0
    556e:	09 f4       	brne	.+2      	; 0x5572 <fat_get_dir_entry_of_path+0x2a>
    5570:	63 c0       	rjmp	.+198    	; 0x5638 <fat_get_dir_entry_of_path+0xf0>
    5572:	88 81       	ld	r24, Y
    5574:	88 23       	and	r24, r24
    5576:	09 f4       	brne	.+2      	; 0x557a <fat_get_dir_entry_of_path+0x32>
    5578:	5f c0       	rjmp	.+190    	; 0x5638 <fat_get_dir_entry_of_path+0xf0>
    557a:	41 15       	cp	r20, r1
    557c:	51 05       	cpc	r21, r1
    557e:	09 f4       	brne	.+2      	; 0x5582 <fat_get_dir_entry_of_path+0x3a>
    5580:	5b c0       	rjmp	.+182    	; 0x5638 <fat_get_dir_entry_of_path+0xf0>
        return 0;

    if(path[0] == '/')
    5582:	8f 32       	cpi	r24, 0x2F	; 47
    5584:	09 f4       	brne	.+2      	; 0x5588 <fat_get_dir_entry_of_path+0x40>
        ++path;
    5586:	21 96       	adiw	r28, 0x01	; 1

    /* begin with the root directory */
    memset(dir_entry, 0, sizeof(*dir_entry));
    5588:	81 e3       	ldi	r24, 0x31	; 49
    558a:	d8 01       	movw	r26, r16
    558c:	1d 92       	st	X+, r1
    558e:	8a 95       	dec	r24
    5590:	e9 f7       	brne	.-6      	; 0x558c <fat_get_dir_entry_of_path+0x44>
    dir_entry->attributes = FAT_ATTRIB_DIR;
    5592:	80 e1       	ldi	r24, 0x10	; 16
    5594:	f8 01       	movw	r30, r16
    5596:	80 a3       	std	Z+32, r24	; 0x20

    while(1)
    {
        if(path[0] == '\0')
    5598:	88 81       	ld	r24, Y
    559a:	88 23       	and	r24, r24
    559c:	09 f4       	brne	.+2      	; 0x55a0 <fat_get_dir_entry_of_path+0x58>
    559e:	4e c0       	rjmp	.+156    	; 0x563c <fat_get_dir_entry_of_path+0xf4>
            return 1;

        struct fat_dir_struct* dd = fat_open_dir(fs, dir_entry);
    55a0:	c4 01       	movw	r24, r8
    55a2:	b8 01       	movw	r22, r16
    55a4:	80 de       	rcall	.-768    	; 0x52a6 <fat_open_dir>
    55a6:	7c 01       	movw	r14, r24
        if(!dd)
    55a8:	00 97       	sbiw	r24, 0x00	; 0
    55aa:	09 f4       	brne	.+2      	; 0x55ae <fat_get_dir_entry_of_path+0x66>
    55ac:	45 c0       	rjmp	.+138    	; 0x5638 <fat_get_dir_entry_of_path+0xf0>
            break;

        /* extract the next hierarchy we will search for */
        const char* sub_path = strchr(path, '/');
    55ae:	ce 01       	movw	r24, r28
    55b0:	6f e2       	ldi	r22, 0x2F	; 47
    55b2:	70 e0       	ldi	r23, 0x00	; 0
    55b4:	0e 94 fb 32 	call	0x65f6	; 0x65f6 <strchr>
        uint8_t length_to_sep;
        if(sub_path)
    55b8:	00 97       	sbiw	r24, 0x00	; 0
    55ba:	39 f0       	breq	.+14     	; 0x55ca <fat_get_dir_entry_of_path+0x82>
        {
            length_to_sep = sub_path - path;
    55bc:	a8 2f       	mov	r26, r24
    55be:	ac 1b       	sub	r26, r28
            ++sub_path;
    55c0:	5c 01       	movw	r10, r24
    55c2:	08 94       	sec
    55c4:	a1 1c       	adc	r10, r1
    55c6:	b1 1c       	adc	r11, r1
    55c8:	29 c0       	rjmp	.+82     	; 0x561c <fat_get_dir_entry_of_path+0xd4>
        }
        else
        {
            length_to_sep = strlen(path);
    55ca:	de 01       	movw	r26, r28
    55cc:	0d 90       	ld	r0, X+
    55ce:	00 20       	and	r0, r0
    55d0:	e9 f7       	brne	.-6      	; 0x55cc <fat_get_dir_entry_of_path+0x84>
    55d2:	11 97       	sbiw	r26, 0x01	; 1
    55d4:	ac 1b       	sub	r26, r28
            sub_path = path + length_to_sep;
    55d6:	5e 01       	movw	r10, r28
    55d8:	aa 0e       	add	r10, r26
    55da:	b1 1c       	adc	r11, r1
    55dc:	1f c0       	rjmp	.+62     	; 0x561c <fat_get_dir_entry_of_path+0xd4>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    55de:	f8 01       	movw	r30, r16
    55e0:	01 90       	ld	r0, Z+
    55e2:	00 20       	and	r0, r0
    55e4:	e9 f7       	brne	.-6      	; 0x55e0 <fat_get_dir_entry_of_path+0x98>
    55e6:	31 97       	sbiw	r30, 0x01	; 1
    55e8:	e0 1b       	sub	r30, r16
    55ea:	f1 0b       	sbc	r31, r17
    55ec:	ec 15       	cp	r30, r12
    55ee:	fd 05       	cpc	r31, r13
    55f0:	b9 f4       	brne	.+46     	; 0x5620 <fat_get_dir_entry_of_path+0xd8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
    55f2:	ce 01       	movw	r24, r28
    55f4:	b8 01       	movw	r22, r16
    55f6:	a6 01       	movw	r20, r12
    55f8:	0e 94 0f 33 	call	0x661e	; 0x661e <strncmp>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    55fc:	00 97       	sbiw	r24, 0x00	; 0
    55fe:	81 f4       	brne	.+32     	; 0x5620 <fat_get_dir_entry_of_path+0xd8>
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
    5600:	c7 01       	movw	r24, r14
    5602:	92 de       	rcall	.-732    	; 0x5328 <fat_close_dir>
            dd = 0;

            if(path[length_to_sep] == '\0')
    5604:	cc 0d       	add	r28, r12
    5606:	dd 1d       	adc	r29, r13
    5608:	88 81       	ld	r24, Y
    560a:	88 23       	and	r24, r24
    560c:	b9 f0       	breq	.+46     	; 0x563c <fat_get_dir_entry_of_path+0xf4>
                /* we iterated through the whole path and have found the file */
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
    560e:	d8 01       	movw	r26, r16
    5610:	90 96       	adiw	r26, 0x20	; 32
    5612:	8c 91       	ld	r24, X
    5614:	90 97       	sbiw	r26, 0x20	; 32
    5616:	84 fd       	sbrc	r24, 4
    5618:	09 c0       	rjmp	.+18     	; 0x562c <fat_get_dir_entry_of_path+0xe4>
    561a:	0e c0       	rjmp	.+28     	; 0x5638 <fat_get_dir_entry_of_path+0xf0>
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
        {
            /* check if we have found the next hierarchy */
            if((strlen(dir_entry->long_name) != length_to_sep ||
    561c:	ca 2e       	mov	r12, r26
    561e:	dd 24       	eor	r13, r13
            length_to_sep = strlen(path);
            sub_path = path + length_to_sep;
        }
        
        /* read directory entries */
        while(fat_read_dir(dd, dir_entry))
    5620:	c7 01       	movw	r24, r14
    5622:	b8 01       	movw	r22, r16
    5624:	87 de       	rcall	.-754    	; 0x5334 <fat_read_dir>
    5626:	88 23       	and	r24, r24
    5628:	d1 f6       	brne	.-76     	; 0x55de <fat_get_dir_entry_of_path+0x96>
    562a:	03 c0       	rjmp	.+6      	; 0x5632 <fat_get_dir_entry_of_path+0xea>
                return 1;

            if(dir_entry->attributes & FAT_ATTRIB_DIR)
            {
                /* we found a parent directory of the file we are searching for */
                path = sub_path;
    562c:	e5 01       	movw	r28, r10
            if((strlen(dir_entry->long_name) != length_to_sep ||
                strncmp(path, dir_entry->long_name, length_to_sep) != 0))
                continue;

            fat_close_dir(dd);
            dd = 0;
    562e:	ee 24       	eor	r14, r14
    5630:	ff 24       	eor	r15, r15

            /* a parent of the file exists, but not the file itself */
            return 0;
        }

        fat_close_dir(dd);
    5632:	c7 01       	movw	r24, r14
    5634:	79 de       	rcall	.-782    	; 0x5328 <fat_close_dir>
    }
    5636:	b0 cf       	rjmp	.-160    	; 0x5598 <fat_get_dir_entry_of_path+0x50>
    
    return 0;
    5638:	80 e0       	ldi	r24, 0x00	; 0
    563a:	01 c0       	rjmp	.+2      	; 0x563e <fat_get_dir_entry_of_path+0xf6>
            fat_close_dir(dd);
            dd = 0;

            if(path[length_to_sep] == '\0')
                /* we iterated through the whole path and have found the file */
                return 1;
    563c:	81 e0       	ldi	r24, 0x01	; 1

        fat_close_dir(dd);
    }
    
    return 0;
}
    563e:	df 91       	pop	r29
    5640:	cf 91       	pop	r28
    5642:	1f 91       	pop	r17
    5644:	0f 91       	pop	r16
    5646:	ff 90       	pop	r15
    5648:	ef 90       	pop	r14
    564a:	df 90       	pop	r13
    564c:	cf 90       	pop	r12
    564e:	bf 90       	pop	r11
    5650:	af 90       	pop	r10
    5652:	9f 90       	pop	r9
    5654:	8f 90       	pop	r8
    5656:	08 95       	ret

00005658 <fat_reset_dir>:
 * \param[in] dd The directory handle to reset.
 * \returns 0 on failure, 1 on success.
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    5658:	fc 01       	movw	r30, r24
    if(!dd)
    565a:	00 97       	sbiw	r24, 0x00	; 0
    565c:	61 f0       	breq	.+24     	; 0x5676 <fat_reset_dir+0x1e>
        return 0;

    dd->entry_cluster = dd->dir_entry.cluster;
    565e:	23 a1       	ldd	r18, Z+35	; 0x23
    5660:	34 a1       	ldd	r19, Z+36	; 0x24
    5662:	45 a1       	ldd	r20, Z+37	; 0x25
    5664:	56 a1       	ldd	r21, Z+38	; 0x26
    5666:	23 ab       	std	Z+51, r18	; 0x33
    5668:	34 ab       	std	Z+52, r19	; 0x34
    566a:	45 ab       	std	Z+53, r20	; 0x35
    566c:	56 ab       	std	Z+54, r21	; 0x36
    dd->entry_offset = 0;
    566e:	10 ae       	std	Z+56, r1	; 0x38
    5670:	17 aa       	std	Z+55, r1	; 0x37
    return 1;
    5672:	81 e0       	ldi	r24, 0x01	; 1
    5674:	08 95       	ret
 * \see fat_read_dir
 */
uint8_t fat_reset_dir(struct fat_dir_struct* dd)
{
    if(!dd)
        return 0;
    5676:	80 e0       	ldi	r24, 0x00	; 0

    dd->entry_cluster = dd->dir_entry.cluster;
    dd->entry_offset = 0;
    return 1;
}
    5678:	08 95       	ret

0000567a <fat_create_file>:
 * \param[out] dir_entry The directory entry to fill for the new file.
 * \returns 0 on failure, 1 on success.
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    567a:	af 92       	push	r10
    567c:	bf 92       	push	r11
    567e:	cf 92       	push	r12
    5680:	df 92       	push	r13
    5682:	ef 92       	push	r14
    5684:	ff 92       	push	r15
    5686:	0f 93       	push	r16
    5688:	1f 93       	push	r17
    568a:	cf 93       	push	r28
    568c:	df 93       	push	r29
    568e:	8c 01       	movw	r16, r24
    5690:	7b 01       	movw	r14, r22
    5692:	ea 01       	movw	r28, r20
    if(!parent || !file || !file[0] || !dir_entry)
    5694:	00 97       	sbiw	r24, 0x00	; 0
    5696:	09 f4       	brne	.+2      	; 0x569a <fat_create_file+0x20>
    5698:	47 c0       	rjmp	.+142    	; 0x5728 <fat_create_file+0xae>
    569a:	61 15       	cp	r22, r1
    569c:	71 05       	cpc	r23, r1
    569e:	09 f4       	brne	.+2      	; 0x56a2 <fat_create_file+0x28>
    56a0:	43 c0       	rjmp	.+134    	; 0x5728 <fat_create_file+0xae>
    56a2:	db 01       	movw	r26, r22
    56a4:	8c 91       	ld	r24, X
    56a6:	88 23       	and	r24, r24
    56a8:	09 f4       	brne	.+2      	; 0x56ac <fat_create_file+0x32>
    56aa:	3e c0       	rjmp	.+124    	; 0x5728 <fat_create_file+0xae>
    56ac:	20 97       	sbiw	r28, 0x00	; 0
    56ae:	09 f4       	brne	.+2      	; 0x56b2 <fat_create_file+0x38>
    56b0:	3b c0       	rjmp	.+118    	; 0x5728 <fat_create_file+0xae>
        return 0;

    /* check if the file already exists */
    while(1)
    {
        if(!fat_read_dir(parent, dir_entry))
    56b2:	c8 01       	movw	r24, r16
    56b4:	be 01       	movw	r22, r28
    56b6:	3e de       	rcall	.-900    	; 0x5334 <fat_read_dir>
    56b8:	88 23       	and	r24, r24
    56ba:	41 f0       	breq	.+16     	; 0x56cc <fat_create_file+0x52>
            break;

        if(strcmp(file, dir_entry->long_name) == 0)
    56bc:	c7 01       	movw	r24, r14
    56be:	be 01       	movw	r22, r28
    56c0:	a5 d7       	rcall	.+3914   	; 0x660c <strcmp>
    56c2:	00 97       	sbiw	r24, 0x00	; 0
    56c4:	b1 f7       	brne	.-20     	; 0x56b2 <fat_create_file+0x38>
        {
            fat_reset_dir(parent);
    56c6:	c8 01       	movw	r24, r16
    56c8:	c7 df       	rcall	.-114    	; 0x5658 <fat_reset_dir>
    56ca:	2e c0       	rjmp	.+92     	; 0x5728 <fat_create_file+0xae>
            return 0;
        }
    }

    struct fat_fs_struct* fs = parent->fs;
    56cc:	f8 01       	movw	r30, r16
    56ce:	c0 80       	ld	r12, Z
    56d0:	d1 80       	ldd	r13, Z+1	; 0x01

    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    56d2:	5e 01       	movw	r10, r28
    56d4:	ec 2f       	mov	r30, r28
    56d6:	fb 2d       	mov	r31, r11
    56d8:	81 e3       	ldi	r24, 0x31	; 49
    56da:	df 01       	movw	r26, r30
    56dc:	1d 92       	st	X+, r1
    56de:	8a 95       	dec	r24
    56e0:	e9 f7       	brne	.-6      	; 0x56dc <fat_create_file+0x62>
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);
    56e2:	ce 01       	movw	r24, r28
    56e4:	b7 01       	movw	r22, r14
    56e6:	4f e1       	ldi	r20, 0x1F	; 31
    56e8:	50 e0       	ldi	r21, 0x00	; 0
    56ea:	a7 d7       	rcall	.+3918   	; 0x663a <strncpy>
        if(cluster == HTOL32(FAT32_CLUSTER_FREE))
            ++(count_arg->cluster_count);
    }

    return 1;
}
    56ec:	b8 01       	movw	r22, r16
    56ee:	6d 5d       	subi	r22, 0xDD	; 221
    56f0:	7f 4f       	sbci	r23, 0xFF	; 255
    /* prepare directory entry with values already known */
    memset(dir_entry, 0, sizeof(*dir_entry));
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
    56f2:	c6 01       	movw	r24, r12
    56f4:	ae 01       	movw	r20, r28
    56f6:	0e 94 b7 1c 	call	0x396e	; 0x396e <fat_find_offset_for_dir_entry.clone.0>
    56fa:	29 a7       	std	Y+41, r18	; 0x29
    56fc:	3a a7       	std	Y+42, r19	; 0x2a
    56fe:	4b a7       	std	Y+43, r20	; 0x2b
    5700:	5c a7       	std	Y+44, r21	; 0x2c
    5702:	6d a7       	std	Y+45, r22	; 0x2d
    5704:	7e a7       	std	Y+46, r23	; 0x2e
    5706:	8f a7       	std	Y+47, r24	; 0x2f
    5708:	98 ab       	std	Y+48, r25	; 0x30
    570a:	23 2b       	or	r18, r19
    570c:	24 2b       	or	r18, r20
    570e:	25 2b       	or	r18, r21
    5710:	26 2b       	or	r18, r22
    5712:	27 2b       	or	r18, r23
    5714:	28 2b       	or	r18, r24
    5716:	29 2b       	or	r18, r25
    5718:	39 f0       	breq	.+14     	; 0x5728 <fat_create_file+0xae>
        return 0;
    
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
    571a:	c6 01       	movw	r24, r12
    571c:	be 01       	movw	r22, r28
    571e:	0e 94 cf 1a 	call	0x359e	; 0x359e <fat_write_dir_entry>
 * \see fat_delete_file
 */
uint8_t fat_create_file(struct fat_dir_struct* parent, const char* file, struct fat_dir_entry_struct* dir_entry)
{
    if(!parent || !file || !file[0] || !dir_entry)
        return 0;
    5722:	91 e0       	ldi	r25, 0x01	; 1
    5724:	88 23       	and	r24, r24
    5726:	09 f4       	brne	.+2      	; 0x572a <fat_create_file+0xb0>
    memset(dir_entry, 0, sizeof(*dir_entry));
    strncpy(dir_entry->long_name, file, sizeof(dir_entry->long_name) - 1);

    /* find place where to store directory entry */
    if(!(dir_entry->entry_offset = fat_find_offset_for_dir_entry(fs, parent, dir_entry)))
        return 0;
    5728:	90 e0       	ldi	r25, 0x00	; 0
    /* write directory entry to disk */
    if(!fat_write_dir_entry(fs, dir_entry))
        return 0;
    
    return 1;
}
    572a:	89 2f       	mov	r24, r25
    572c:	df 91       	pop	r29
    572e:	cf 91       	pop	r28
    5730:	1f 91       	pop	r17
    5732:	0f 91       	pop	r16
    5734:	ff 90       	pop	r15
    5736:	ef 90       	pop	r14
    5738:	df 90       	pop	r13
    573a:	cf 90       	pop	r12
    573c:	bf 90       	pop	r11
    573e:	af 90       	pop	r10
    5740:	08 95       	ret

00005742 <adc_init>:
#include "umeter_adc.h"

void adc_init(void) {
  ADMUX  |=	(1 << REFS1) | (1 << REFS0);	// internal 2.56V reference
    5742:	ec e7       	ldi	r30, 0x7C	; 124
    5744:	f0 e0       	ldi	r31, 0x00	; 0
    5746:	80 81       	ld	r24, Z
    5748:	80 6c       	ori	r24, 0xC0	; 192
    574a:	80 83       	st	Z, r24
  ADMUX  &=	~(1 << ADLAR);	// right adjusted ADC result: ADCH -> 2 bits, ADCL -> 8 bits
    574c:	80 81       	ld	r24, Z
    574e:	8f 7d       	andi	r24, 0xDF	; 223
    5750:	80 83       	st	Z, r24
  ADCSRA |=	(1 << ADEN);	// enable ADC
    5752:	ea e7       	ldi	r30, 0x7A	; 122
    5754:	f0 e0       	ldi	r31, 0x00	; 0
    5756:	80 81       	ld	r24, Z
    5758:	80 68       	ori	r24, 0x80	; 128
    575a:	80 83       	st	Z, r24
  ADCSRA &=	~(1 << ADATE);	// disable auto-triggering
    575c:	80 81       	ld	r24, Z
    575e:	8f 7d       	andi	r24, 0xDF	; 223
    5760:	80 83       	st	Z, r24
  ADCSRA &=	~(1 << ADIE);	// disable ADC interrupt
    5762:	80 81       	ld	r24, Z
    5764:	87 7f       	andi	r24, 0xF7	; 247
    5766:	80 83       	st	Z, r24
  ADCSRA |=	((1 << ADPS2)|(1 << ADPS1)|(1 << ADPS0)); // prescaler division factor 2
    5768:	80 81       	ld	r24, Z
    576a:	87 60       	ori	r24, 0x07	; 7
    576c:	80 83       	st	Z, r24

  SENSOR_DDR &= ~((1 << SENSOR1)|(1 << SENSOR2)|(1 << SENSOR3)|(1 << SENSOR4)); // set sensor pins to inputs
    576e:	80 b3       	in	r24, 0x10	; 16
    5770:	8c 7c       	andi	r24, 0xCC	; 204
    5772:	80 bb       	out	0x10, r24	; 16
  SENSOR_PRT &= ~((1 << SENSOR1)|(1 << SENSOR2)|(1 << SENSOR3)|(1 << SENSOR4)); // set pins low
    5774:	81 b3       	in	r24, 0x11	; 17
    5776:	8c 7c       	andi	r24, 0xCC	; 204
    5778:	81 bb       	out	0x11, r24	; 17
}
    577a:	08 95       	ret

0000577c <adc_conversion>:

unsigned int adc_conversion(void) {
  ADCSRA |= (1 << ADSC)|(1 << ADIF); // start conversion
    577c:	80 91 7a 00 	lds	r24, 0x007A
    5780:	80 65       	ori	r24, 0x50	; 80
    5782:	80 93 7a 00 	sts	0x007A, r24

  while( !(ADCSRA & (1 << ADIF)) ); // wait until ADIF (conversion done bit) is set
    5786:	80 91 7a 00 	lds	r24, 0x007A
    578a:	84 ff       	sbrs	r24, 4
    578c:	fc cf       	rjmp	.-8      	; 0x5786 <adc_conversion+0xa>

  return (ADCL | ((((unsigned int)ADCH) << 8) & 0x300) ); // MUST READ ADCL BEFORE ADCH
    578e:	80 91 78 00 	lds	r24, 0x0078
    5792:	90 91 79 00 	lds	r25, 0x0079
    5796:	39 2f       	mov	r19, r25
    5798:	20 e0       	ldi	r18, 0x00	; 0
    579a:	20 70       	andi	r18, 0x00	; 0
    579c:	33 70       	andi	r19, 0x03	; 3
    579e:	90 e0       	ldi	r25, 0x00	; 0
    57a0:	28 2b       	or	r18, r24
    57a2:	39 2b       	or	r19, r25
}
    57a4:	c9 01       	movw	r24, r18
    57a6:	08 95       	ret

000057a8 <select_adc>:

void select_adc(unsigned char mux) {
  ADMUX = (ADMUX & 0xE0) | (mux & 0x1F);
    57a8:	ec e7       	ldi	r30, 0x7C	; 124
    57aa:	f0 e0       	ldi	r31, 0x00	; 0
    57ac:	90 81       	ld	r25, Z
    57ae:	8f 71       	andi	r24, 0x1F	; 31
    57b0:	90 7e       	andi	r25, 0xE0	; 224
    57b2:	89 2b       	or	r24, r25
    57b4:	80 83       	st	Z, r24
}
    57b6:	08 95       	ret

000057b8 <select_sensor>:

void select_sensor(int i) {
  switch(i) {
    57b8:	82 30       	cpi	r24, 0x02	; 2
    57ba:	91 05       	cpc	r25, r1
    57bc:	81 f0       	breq	.+32     	; 0x57de <select_sensor+0x26>
    57be:	83 30       	cpi	r24, 0x03	; 3
    57c0:	91 05       	cpc	r25, r1
    57c2:	24 f4       	brge	.+8      	; 0x57cc <select_sensor+0x14>
    57c4:	81 30       	cpi	r24, 0x01	; 1
    57c6:	91 05       	cpc	r25, r1
    57c8:	81 f4       	brne	.+32     	; 0x57ea <select_sensor+0x32>
    57ca:	07 c0       	rjmp	.+14     	; 0x57da <select_sensor+0x22>
    57cc:	83 30       	cpi	r24, 0x03	; 3
    57ce:	91 05       	cpc	r25, r1
    57d0:	41 f0       	breq	.+16     	; 0x57e2 <select_sensor+0x2a>
    57d2:	84 30       	cpi	r24, 0x04	; 4
    57d4:	91 05       	cpc	r25, r1
    57d6:	49 f4       	brne	.+18     	; 0x57ea <select_sensor+0x32>
    57d8:	06 c0       	rjmp	.+12     	; 0x57e6 <select_sensor+0x2e>
    case 1:
      select_adc(SMUX1);
    57da:	80 e0       	ldi	r24, 0x00	; 0
    57dc:	03 c0       	rjmp	.+6      	; 0x57e4 <select_sensor+0x2c>
      return;
    case 2:
      select_adc(SMUX2);
    57de:	81 e0       	ldi	r24, 0x01	; 1
    57e0:	01 c0       	rjmp	.+2      	; 0x57e4 <select_sensor+0x2c>
      return;
    case 3:
      select_adc(SMUX3);
    57e2:	84 e0       	ldi	r24, 0x04	; 4
      return;
    57e4:	e1 cf       	rjmp	.-62     	; 0x57a8 <select_adc>
    case 4:
      select_adc(SMUX4);
    57e6:	85 e0       	ldi	r24, 0x05	; 5
    57e8:	df cf       	rjmp	.-66     	; 0x57a8 <select_adc>
    57ea:	08 95       	ret

000057ec <float2str>:
      return;
  }
}

int float2str(float f, char* buff) {
    57ec:	cf 92       	push	r12
    57ee:	df 92       	push	r13
    57f0:	ef 92       	push	r14
    57f2:	ff 92       	push	r15
    57f4:	0f 93       	push	r16
    57f6:	1f 93       	push	r17
    57f8:	cf 93       	push	r28
    57fa:	df 93       	push	r29
    57fc:	7b 01       	movw	r14, r22
    57fe:	8c 01       	movw	r16, r24
    5800:	ea 01       	movw	r28, r20
  int left = (int)f;		// integer section
    5802:	28 d5       	rcall	.+2640   	; 0x6254 <__fixsfsi>
  int right = (f - left)*1000;	// decimal section
  return sprintf(buff, "%d.%03d ", left, right);
    5804:	2d b7       	in	r18, 0x3d	; 61
    5806:	3e b7       	in	r19, 0x3e	; 62
    5808:	28 50       	subi	r18, 0x08	; 8
    580a:	30 40       	sbci	r19, 0x00	; 0
    580c:	0f b6       	in	r0, 0x3f	; 63
    580e:	f8 94       	cli
    5810:	3e bf       	out	0x3e, r19	; 62
    5812:	0f be       	out	0x3f, r0	; 63
    5814:	2d bf       	out	0x3d, r18	; 61
    5816:	cd b6       	in	r12, 0x3d	; 61
    5818:	de b6       	in	r13, 0x3e	; 62
    581a:	08 94       	sec
    581c:	c1 1c       	adc	r12, r1
    581e:	d1 1c       	adc	r13, r1
    5820:	ed b7       	in	r30, 0x3d	; 61
    5822:	fe b7       	in	r31, 0x3e	; 62
    5824:	d2 83       	std	Z+2, r29	; 0x02
    5826:	c1 83       	std	Z+1, r28	; 0x01
    5828:	22 e7       	ldi	r18, 0x72	; 114
    582a:	31 e0       	ldi	r19, 0x01	; 1
    582c:	f6 01       	movw	r30, r12
    582e:	33 83       	std	Z+3, r19	; 0x03
    5830:	22 83       	std	Z+2, r18	; 0x02
    5832:	75 83       	std	Z+5, r23	; 0x05
    5834:	64 83       	std	Z+4, r22	; 0x04
  }
}

int float2str(float f, char* buff) {
  int left = (int)f;		// integer section
  int right = (f - left)*1000;	// decimal section
    5836:	88 27       	eor	r24, r24
    5838:	77 fd       	sbrc	r23, 7
    583a:	80 95       	com	r24
    583c:	98 2f       	mov	r25, r24
    583e:	3d d5       	rcall	.+2682   	; 0x62ba <__floatsisf>
    5840:	9b 01       	movw	r18, r22
    5842:	ac 01       	movw	r20, r24
    5844:	c8 01       	movw	r24, r16
    5846:	b7 01       	movw	r22, r14
    5848:	38 d4       	rcall	.+2160   	; 0x60ba <__subsf3>
    584a:	20 e0       	ldi	r18, 0x00	; 0
    584c:	30 e0       	ldi	r19, 0x00	; 0
    584e:	4a e7       	ldi	r20, 0x7A	; 122
    5850:	54 e4       	ldi	r21, 0x44	; 68
    5852:	bf d5       	rcall	.+2942   	; 0x63d2 <__mulsf3>
    5854:	ff d4       	rcall	.+2558   	; 0x6254 <__fixsfsi>
  return sprintf(buff, "%d.%03d ", left, right);
    5856:	f6 01       	movw	r30, r12
    5858:	77 83       	std	Z+7, r23	; 0x07
    585a:	66 83       	std	Z+6, r22	; 0x06
    585c:	6e d7       	rcall	.+3804   	; 0x673a <sprintf>
    585e:	2d b7       	in	r18, 0x3d	; 61
    5860:	3e b7       	in	r19, 0x3e	; 62
    5862:	28 5f       	subi	r18, 0xF8	; 248
    5864:	3f 4f       	sbci	r19, 0xFF	; 255
    5866:	0f b6       	in	r0, 0x3f	; 63
    5868:	f8 94       	cli
    586a:	3e bf       	out	0x3e, r19	; 62
    586c:	0f be       	out	0x3f, r0	; 63
    586e:	2d bf       	out	0x3d, r18	; 61
    5870:	df 91       	pop	r29
    5872:	cf 91       	pop	r28
    5874:	1f 91       	pop	r17
    5876:	0f 91       	pop	r16
    5878:	ff 90       	pop	r15
    587a:	ef 90       	pop	r14
    587c:	df 90       	pop	r13
    587e:	cf 90       	pop	r12
    5880:	08 95       	ret

00005882 <SerialStream_TxByte>:
			 *
			 *  \param[in] DataByte  Byte to transmit through the USART
			 */
			static inline void Serial_TxByte(const char DataByte)
			{
				while (!(UCSR1A & (1 << UDRE1)));
    5882:	90 91 c8 00 	lds	r25, 0x00C8
    5886:	95 ff       	sbrs	r25, 5
    5888:	fc cf       	rjmp	.-8      	; 0x5882 <SerialStream_TxByte>
				UDR1 = DataByte;
    588a:	80 93 ce 00 	sts	0x00CE, r24
{
	(void)Stream;
	
	Serial_TxByte(DataByte);
	return 0;
}
    588e:	80 e0       	ldi	r24, 0x00	; 0
    5890:	90 e0       	ldi	r25, 0x00	; 0
    5892:	08 95       	ret

00005894 <SerialStream_RxByte>:
			 *
			 *  \return Byte received from the USART
			 */
			static inline char Serial_RxByte(void)
			{
				while (!(UCSR1A & (1 << RXC1)));
    5894:	80 91 c8 00 	lds	r24, 0x00C8
    5898:	87 ff       	sbrs	r24, 7
    589a:	fc cf       	rjmp	.-8      	; 0x5894 <SerialStream_RxByte>
				return UDR1; 
    589c:	80 91 ce 00 	lds	r24, 0x00CE
static int SerialStream_RxByte(FILE *Stream)
{
	(void)Stream;

	return Serial_RxByte();
}
    58a0:	90 e0       	ldi	r25, 0x00	; 0
    58a2:	08 95       	ret

000058a4 <USB_Device_ProcessControlRequest>:
#if !defined(NO_DEVICE_REMOTE_WAKEUP)
bool    USB_RemoteWakeupEnabled;
#endif

void USB_Device_ProcessControlRequest(void)
{
    58a4:	1f 93       	push	r17
    58a6:	df 93       	push	r29
    58a8:	cf 93       	push	r28
    58aa:	00 d0       	rcall	.+0      	; 0x58ac <USB_Device_ProcessControlRequest+0x8>
    58ac:	cd b7       	in	r28, 0x3d	; 61
    58ae:	de b7       	in	r29, 0x3e	; 62
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
    58b0:	ee ed       	ldi	r30, 0xDE	; 222
    58b2:	f4 e0       	ldi	r31, 0x04	; 4
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    58b4:	80 91 f1 00 	lds	r24, 0x00F1
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
	  *(RequestHeader++) = Endpoint_Read_Byte();
    58b8:	81 93       	st	Z+, r24
void USB_Device_ProcessControlRequest(void)
{
	bool     RequestHandled = false;
	uint8_t* RequestHeader  = (uint8_t*)&USB_ControlRequest;
	
	for (uint8_t RequestHeaderByte = 0; RequestHeaderByte < sizeof(USB_Request_Header_t); RequestHeaderByte++)
    58ba:	84 e0       	ldi	r24, 0x04	; 4
    58bc:	e6 3e       	cpi	r30, 0xE6	; 230
    58be:	f8 07       	cpc	r31, r24
    58c0:	c9 f7       	brne	.-14     	; 0x58b4 <USB_Device_ProcessControlRequest+0x10>
	  *(RequestHeader++) = Endpoint_Read_Byte();
	  
	uint8_t bmRequestType = USB_ControlRequest.bmRequestType;
    58c2:	80 91 de 04 	lds	r24, 0x04DE
	
	switch (USB_ControlRequest.bRequest)
    58c6:	20 91 df 04 	lds	r18, 0x04DF
    58ca:	25 30       	cpi	r18, 0x05	; 5
    58cc:	09 f4       	brne	.+2      	; 0x58d0 <USB_Device_ProcessControlRequest+0x2c>
    58ce:	83 c0       	rjmp	.+262    	; 0x59d6 <USB_Device_ProcessControlRequest+0x132>
    58d0:	26 30       	cpi	r18, 0x06	; 6
    58d2:	40 f4       	brcc	.+16     	; 0x58e4 <USB_Device_ProcessControlRequest+0x40>
    58d4:	21 30       	cpi	r18, 0x01	; 1
    58d6:	99 f1       	breq	.+102    	; 0x593e <USB_Device_ProcessControlRequest+0x9a>
    58d8:	21 30       	cpi	r18, 0x01	; 1
    58da:	70 f0       	brcs	.+28     	; 0x58f8 <USB_Device_ProcessControlRequest+0x54>
    58dc:	23 30       	cpi	r18, 0x03	; 3
    58de:	09 f0       	breq	.+2      	; 0x58e2 <USB_Device_ProcessControlRequest+0x3e>
    58e0:	e7 c0       	rjmp	.+462    	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
    58e2:	2d c0       	rjmp	.+90     	; 0x593e <USB_Device_ProcessControlRequest+0x9a>
    58e4:	28 30       	cpi	r18, 0x08	; 8
    58e6:	09 f4       	brne	.+2      	; 0x58ea <USB_Device_ProcessControlRequest+0x46>
    58e8:	b3 c0       	rjmp	.+358    	; 0x5a50 <USB_Device_ProcessControlRequest+0x1ac>
    58ea:	29 30       	cpi	r18, 0x09	; 9
    58ec:	09 f4       	brne	.+2      	; 0x58f0 <USB_Device_ProcessControlRequest+0x4c>
    58ee:	c6 c0       	rjmp	.+396    	; 0x5a7c <USB_Device_ProcessControlRequest+0x1d8>
    58f0:	26 30       	cpi	r18, 0x06	; 6
    58f2:	09 f0       	breq	.+2      	; 0x58f6 <USB_Device_ProcessControlRequest+0x52>
    58f4:	dd c0       	rjmp	.+442    	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
    58f6:	87 c0       	rjmp	.+270    	; 0x5a06 <USB_Device_ProcessControlRequest+0x162>
	{
		case REQ_GetStatus:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    58f8:	80 38       	cpi	r24, 0x80	; 128
    58fa:	21 f0       	breq	.+8      	; 0x5904 <USB_Device_ProcessControlRequest+0x60>
    58fc:	82 38       	cpi	r24, 0x82	; 130
    58fe:	09 f0       	breq	.+2      	; 0x5902 <USB_Device_ProcessControlRequest+0x5e>
    5900:	d7 c0       	rjmp	.+430    	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
    5902:	08 c0       	rjmp	.+16     	; 0x5914 <USB_Device_ProcessControlRequest+0x70>
	Endpoint_ClearOUT();
}

static void USB_Device_GetStatus(void)
{
	uint8_t CurrentStatus = 0;
    5904:	80 91 d9 04 	lds	r24, 0x04D9
			if (USB_CurrentlySelfPowered)
			  CurrentStatus |= FEATURE_SELFPOWERED_ENABLED;
	#endif

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
			if (USB_RemoteWakeupEnabled)
    5908:	90 91 da 04 	lds	r25, 0x04DA
    590c:	99 23       	and	r25, r25
    590e:	69 f0       	breq	.+26     	; 0x592a <USB_Device_ProcessControlRequest+0x86>
			  CurrentStatus |= FEATURE_REMOTE_WAKEUP_ENABLED;
    5910:	82 60       	ori	r24, 0x02	; 2
    5912:	0b c0       	rjmp	.+22     	; 0x592a <USB_Device_ProcessControlRequest+0x86>
	#endif
			break;
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_ENDPOINT):
			Endpoint_SelectEndpoint(USB_ControlRequest.wIndex & 0xFF);
    5914:	80 91 e2 04 	lds	r24, 0x04E2
    5918:	80 93 e9 00 	sts	0x00E9, r24

			CurrentStatus = Endpoint_IsStalled();
    591c:	90 91 eb 00 	lds	r25, 0x00EB
    5920:	81 e0       	ldi	r24, 0x01	; 1
    5922:	95 ff       	sbrs	r25, 5
    5924:	80 e0       	ldi	r24, 0x00	; 0

			Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);			  
    5926:	10 92 e9 00 	sts	0x00E9, r1
#endif
		default:
			return;
	}

	Endpoint_ClearSETUP();
    592a:	90 91 e8 00 	lds	r25, 0x00E8
    592e:	97 7f       	andi	r25, 0xF7	; 247
    5930:	90 93 e8 00 	sts	0x00E8, r25
			 *  \param[in] Word  Next word to write to the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Word_LE(const uint16_t Word) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Word_LE(const uint16_t Word)
			{
				UEDATX = (Word & 0xFF);
    5934:	80 93 f1 00 	sts	0x00F1, r24
				UEDATX = (Word >> 8);
    5938:	10 92 f1 00 	sts	0x00F1, r1
    593c:	94 c0       	rjmp	.+296    	; 0x5a66 <USB_Device_ProcessControlRequest+0x1c2>
			}

			break;
		case REQ_ClearFeature:
		case REQ_SetFeature:
			if ((bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    593e:	88 23       	and	r24, r24
    5940:	19 f0       	breq	.+6      	; 0x5948 <USB_Device_ProcessControlRequest+0xa4>
    5942:	82 30       	cpi	r24, 0x02	; 2
    5944:	09 f0       	breq	.+2      	; 0x5948 <USB_Device_ProcessControlRequest+0xa4>
    5946:	b4 c0       	rjmp	.+360    	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
	Endpoint_ClearStatusStage();
}

static void USB_Device_ClearSetFeature(void)
{	
	switch (USB_ControlRequest.bmRequestType & CONTROL_REQTYPE_RECIPIENT)
    5948:	90 e0       	ldi	r25, 0x00	; 0
    594a:	8f 71       	andi	r24, 0x1F	; 31
    594c:	90 70       	andi	r25, 0x00	; 0
    594e:	00 97       	sbiw	r24, 0x00	; 0
    5950:	29 f0       	breq	.+10     	; 0x595c <USB_Device_ProcessControlRequest+0xb8>
    5952:	82 30       	cpi	r24, 0x02	; 2
    5954:	91 05       	cpc	r25, r1
    5956:	09 f0       	breq	.+2      	; 0x595a <USB_Device_ProcessControlRequest+0xb6>
    5958:	ad c0       	rjmp	.+346    	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
    595a:	0b c0       	rjmp	.+22     	; 0x5972 <USB_Device_ProcessControlRequest+0xce>
	{
#if !defined(NO_DEVICE_REMOTE_WAKEUP)			
		case REQREC_DEVICE:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_REMOTE_WAKEUP)
    595c:	80 91 e0 04 	lds	r24, 0x04E0
    5960:	81 30       	cpi	r24, 0x01	; 1
    5962:	09 f0       	breq	.+2      	; 0x5966 <USB_Device_ProcessControlRequest+0xc2>
    5964:	a7 c0       	rjmp	.+334    	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
			  USB_RemoteWakeupEnabled = (USB_ControlRequest.bRequest == REQ_SetFeature);
    5966:	23 30       	cpi	r18, 0x03	; 3
    5968:	09 f0       	breq	.+2      	; 0x596c <USB_Device_ProcessControlRequest+0xc8>
    596a:	80 e0       	ldi	r24, 0x00	; 0
    596c:	80 93 da 04 	sts	0x04DA, r24
    5970:	2c c0       	rjmp	.+88     	; 0x59ca <USB_Device_ProcessControlRequest+0x126>
			
			break;			
#endif
#if !defined(CONTROL_ONLY_DEVICE)
		case REQREC_ENDPOINT:
			if ((uint8_t)USB_ControlRequest.wValue == FEATURE_ENDPOINT_HALT)
    5972:	80 91 e0 04 	lds	r24, 0x04E0
    5976:	88 23       	and	r24, r24
    5978:	41 f5       	brne	.+80     	; 0x59ca <USB_Device_ProcessControlRequest+0x126>
			{
				uint8_t EndpointIndex = ((uint8_t)USB_ControlRequest.wIndex & ENDPOINT_EPNUM_MASK);
    597a:	20 91 e2 04 	lds	r18, 0x04E2
    597e:	27 70       	andi	r18, 0x07	; 7
				
				if (EndpointIndex == ENDPOINT_CONTROLEP)
    5980:	09 f4       	brne	.+2      	; 0x5984 <USB_Device_ProcessControlRequest+0xe0>
    5982:	98 c0       	rjmp	.+304    	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
				  return;

				Endpoint_SelectEndpoint(EndpointIndex);
    5984:	20 93 e9 00 	sts	0x00E9, r18

				if (Endpoint_IsEnabled())
    5988:	80 91 eb 00 	lds	r24, 0x00EB
    598c:	80 ff       	sbrs	r24, 0
    598e:	1d c0       	rjmp	.+58     	; 0x59ca <USB_Device_ProcessControlRequest+0x126>
				{				
					if (USB_ControlRequest.bRequest == REQ_SetFeature)
    5990:	80 91 df 04 	lds	r24, 0x04DF
    5994:	83 30       	cpi	r24, 0x03	; 3
    5996:	21 f4       	brne	.+8      	; 0x59a0 <USB_Device_ProcessControlRequest+0xfc>
					{
						Endpoint_StallTransaction();
    5998:	80 91 eb 00 	lds	r24, 0x00EB
    599c:	80 62       	ori	r24, 0x20	; 32
    599e:	13 c0       	rjmp	.+38     	; 0x59c6 <USB_Device_ProcessControlRequest+0x122>
					}
					else
					{
						Endpoint_ClearStall();
    59a0:	80 91 eb 00 	lds	r24, 0x00EB
    59a4:	80 61       	ori	r24, 0x10	; 16
    59a6:	80 93 eb 00 	sts	0x00EB, r24
						Endpoint_ResetFIFO(EndpointIndex);
    59aa:	81 e0       	ldi	r24, 0x01	; 1
    59ac:	90 e0       	ldi	r25, 0x00	; 0
    59ae:	02 c0       	rjmp	.+4      	; 0x59b4 <USB_Device_ProcessControlRequest+0x110>
    59b0:	88 0f       	add	r24, r24
    59b2:	99 1f       	adc	r25, r25
    59b4:	2a 95       	dec	r18
    59b6:	e2 f7       	brpl	.-8      	; 0x59b0 <USB_Device_ProcessControlRequest+0x10c>
    59b8:	80 93 ea 00 	sts	0x00EA, r24
    59bc:	10 92 ea 00 	sts	0x00EA, r1
						Endpoint_ResetDataToggle();
    59c0:	80 91 eb 00 	lds	r24, 0x00EB
    59c4:	88 60       	ori	r24, 0x08	; 8
    59c6:	80 93 eb 00 	sts	0x00EB, r24
#endif
		default:
			return;
	}

	Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    59ca:	10 92 e9 00 	sts	0x00E9, r1

	Endpoint_ClearSETUP();
    59ce:	80 91 e8 00 	lds	r24, 0x00E8
    59d2:	87 7f       	andi	r24, 0xF7	; 247
    59d4:	4f c0       	rjmp	.+158    	; 0x5a74 <USB_Device_ProcessControlRequest+0x1d0>
				RequestHandled = true;
			}

			break;
		case REQ_SetAddress:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    59d6:	88 23       	and	r24, r24
    59d8:	09 f0       	breq	.+2      	; 0x59dc <USB_Device_ProcessControlRequest+0x138>
    59da:	6a c0       	rjmp	.+212    	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    59dc:	10 91 e0 04 	lds	r17, 0x04E0

	Endpoint_ClearSETUP();
    59e0:	80 91 e8 00 	lds	r24, 0x00E8
    59e4:	87 7f       	andi	r24, 0xF7	; 247
    59e6:	80 93 e8 00 	sts	0x00E8, r24
	
	Endpoint_ClearStatusStage();
    59ea:	a9 d0       	rcall	.+338    	; 0x5b3e <Endpoint_ClearStatusStage>
	
	while (!(Endpoint_IsINReady()))
    59ec:	80 91 e8 00 	lds	r24, 0x00E8
    59f0:	80 ff       	sbrs	r24, 0
    59f2:	6f c0       	rjmp	.+222    	; 0x5ad2 <USB_Device_ProcessControlRequest+0x22e>
	}
}

static void USB_Device_SetAddress(void)
{
	uint8_t DeviceAddress = (USB_ControlRequest.wValue & 0x7F);
    59f4:	1f 77       	andi	r17, 0x7F	; 127
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return;
	}

	if (DeviceAddress)
    59f6:	19 f0       	breq	.+6      	; 0x59fe <USB_Device_ProcessControlRequest+0x15a>
	  USB_DeviceState = DEVICE_STATE_Addressed;
    59f8:	83 e0       	ldi	r24, 0x03	; 3
    59fa:	80 93 dd 04 	sts	0x04DD, r24

	UDADDR = ((1 << ADDEN) | DeviceAddress);
    59fe:	10 68       	ori	r17, 0x80	; 128
    5a00:	10 93 e3 00 	sts	0x00E3, r17
    5a04:	57 c0       	rjmp	.+174    	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
				RequestHandled = true;
			}

			break;
		case REQ_GetDescriptor:
			if ((bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE)) ||
    5a06:	80 58       	subi	r24, 0x80	; 128
    5a08:	82 30       	cpi	r24, 0x02	; 2
    5a0a:	08 f0       	brcs	.+2      	; 0x5a0e <USB_Device_ProcessControlRequest+0x16a>
    5a0c:	51 c0       	rjmp	.+162    	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
		USB_Device_GetInternalSerialDescriptor();
		return;
	}
	#endif
	
	if ((DescriptorSize = CALLBACK_USB_GetDescriptor(USB_ControlRequest.wValue, USB_ControlRequest.wIndex,
    5a0e:	80 91 e0 04 	lds	r24, 0x04E0
    5a12:	90 91 e1 04 	lds	r25, 0x04E1
    5a16:	60 91 e2 04 	lds	r22, 0x04E2
    5a1a:	ae 01       	movw	r20, r28
    5a1c:	4f 5f       	subi	r20, 0xFF	; 255
    5a1e:	5f 4f       	sbci	r21, 0xFF	; 255
    5a20:	0e 94 90 04 	call	0x920	; 0x920 <CALLBACK_USB_GetDescriptor>
    5a24:	bc 01       	movw	r22, r24
    5a26:	00 97       	sbiw	r24, 0x00	; 0
    5a28:	09 f4       	brne	.+2      	; 0x5a2c <USB_Device_ProcessControlRequest+0x188>
    5a2a:	44 c0       	rjmp	.+136    	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
													 )) == NO_DESCRIPTOR)
	{
		return;
	}
	
	Endpoint_ClearSETUP();
    5a2c:	80 91 e8 00 	lds	r24, 0x00E8
    5a30:	87 7f       	andi	r24, 0xF7	; 247
    5a32:	80 93 e8 00 	sts	0x00E8, r24
	#if defined(USE_RAM_DESCRIPTORS)
	Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_EEPROM_DESCRIPTORS)
	Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	#elif defined(USE_FLASH_DESCRIPTORS)
	Endpoint_Write_Control_PStream_LE(DescriptorPointer, DescriptorSize);	
    5a36:	89 81       	ldd	r24, Y+1	; 0x01
    5a38:	9a 81       	ldd	r25, Y+2	; 0x02
    5a3a:	67 d1       	rcall	.+718    	; 0x5d0a <Endpoint_Write_Control_PStream_LE>
	  Endpoint_Write_Control_EStream_LE(DescriptorPointer, DescriptorSize);
	else
	  Endpoint_Write_Control_Stream_LE(DescriptorPointer, DescriptorSize);	
	#endif

	Endpoint_ClearOUT();
    5a3c:	80 91 e8 00 	lds	r24, 0x00E8
    5a40:	98 2f       	mov	r25, r24
    5a42:	9b 7f       	andi	r25, 0xFB	; 251
    5a44:	90 93 e8 00 	sts	0x00E8, r25
    5a48:	8f 77       	andi	r24, 0x7F	; 127
    5a4a:	80 93 e8 00 	sts	0x00E8, r24
    5a4e:	32 c0       	rjmp	.+100    	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
				RequestHandled = true;
			}
			
			break;
		case REQ_GetConfiguration:
			if (bmRequestType == (REQDIR_DEVICETOHOST | REQTYPE_STANDARD | REQREC_DEVICE))
    5a50:	80 38       	cpi	r24, 0x80	; 128
    5a52:	71 f5       	brne	.+92     	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
	EVENT_USB_Device_ConfigurationChanged();
}

void USB_Device_GetConfiguration(void)
{
	Endpoint_ClearSETUP();
    5a54:	80 91 e8 00 	lds	r24, 0x00E8
    5a58:	87 7f       	andi	r24, 0xF7	; 247
    5a5a:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_Write_Byte(USB_ConfigurationNumber);
    5a5e:	80 91 db 04 	lds	r24, 0x04DB
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    5a62:	80 93 f1 00 	sts	0x00F1, r24
	Endpoint_ClearIN();
    5a66:	80 91 e8 00 	lds	r24, 0x00E8
    5a6a:	98 2f       	mov	r25, r24
    5a6c:	9e 7f       	andi	r25, 0xFE	; 254
    5a6e:	90 93 e8 00 	sts	0x00E8, r25
    5a72:	8f 77       	andi	r24, 0x7F	; 127
    5a74:	80 93 e8 00 	sts	0x00E8, r24

	Endpoint_ClearStatusStage();
    5a78:	62 d0       	rcall	.+196    	; 0x5b3e <Endpoint_ClearStatusStage>
    5a7a:	1c c0       	rjmp	.+56     	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
				RequestHandled = true;
			}

			break;
		case REQ_SetConfiguration:
			if (bmRequestType == (REQDIR_HOSTTODEVICE | REQTYPE_STANDARD | REQREC_DEVICE))
    5a7c:	88 23       	and	r24, r24
    5a7e:	c1 f4       	brne	.+48     	; 0x5ab0 <USB_Device_ProcessControlRequest+0x20c>
}

static void USB_Device_SetConfiguration(void)
{
#if defined(FIXED_NUM_CONFIGURATIONS)
	if ((uint8_t)USB_ControlRequest.wValue > FIXED_NUM_CONFIGURATIONS)
    5a80:	90 91 e0 04 	lds	r25, 0x04E0
    5a84:	92 30       	cpi	r25, 0x02	; 2
    5a86:	b0 f4       	brcc	.+44     	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
		  return;
	}
	#endif
#endif
	
	Endpoint_ClearSETUP();
    5a88:	80 91 e8 00 	lds	r24, 0x00E8
    5a8c:	87 7f       	andi	r24, 0xF7	; 247
    5a8e:	80 93 e8 00 	sts	0x00E8, r24

	USB_ConfigurationNumber = (uint8_t)USB_ControlRequest.wValue;
    5a92:	90 93 db 04 	sts	0x04DB, r25

	Endpoint_ClearStatusStage();
    5a96:	53 d0       	rcall	.+166    	; 0x5b3e <Endpoint_ClearStatusStage>

	USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
    5a98:	80 91 db 04 	lds	r24, 0x04DB
    5a9c:	88 23       	and	r24, r24
    5a9e:	11 f0       	breq	.+4      	; 0x5aa4 <USB_Device_ProcessControlRequest+0x200>
    5aa0:	84 e0       	ldi	r24, 0x04	; 4
    5aa2:	01 c0       	rjmp	.+2      	; 0x5aa6 <USB_Device_ProcessControlRequest+0x202>
    5aa4:	83 e0       	ldi	r24, 0x03	; 3
    5aa6:	80 93 dd 04 	sts	0x04DD, r24

	EVENT_USB_Device_ConfigurationChanged();
    5aaa:	0e 94 45 03 	call	0x68a	; 0x68a <EVENT_USB_Device_ConfigurationChanged>
    5aae:	02 c0       	rjmp	.+4      	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>

			break;
	}

	if (!(RequestHandled))
	  EVENT_USB_Device_UnhandledControlRequest();
    5ab0:	0e 94 4f 03 	call	0x69e	; 0x69e <EVENT_USB_Device_UnhandledControlRequest>
	  
	if (Endpoint_IsSETUPReceived())
    5ab4:	80 91 e8 00 	lds	r24, 0x00E8
    5ab8:	83 ff       	sbrs	r24, 3
    5aba:	11 c0       	rjmp	.+34     	; 0x5ade <USB_Device_ProcessControlRequest+0x23a>
	{
		Endpoint_StallTransaction();
    5abc:	80 91 eb 00 	lds	r24, 0x00EB
    5ac0:	80 62       	ori	r24, 0x20	; 32
    5ac2:	80 93 eb 00 	sts	0x00EB, r24
		Endpoint_ClearSETUP();		
    5ac6:	80 91 e8 00 	lds	r24, 0x00E8
    5aca:	87 7f       	andi	r24, 0xF7	; 247
    5acc:	80 93 e8 00 	sts	0x00E8, r24
    5ad0:	06 c0       	rjmp	.+12     	; 0x5ade <USB_Device_ProcessControlRequest+0x23a>
	
	Endpoint_ClearStatusStage();
	
	while (!(Endpoint_IsINReady()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    5ad2:	80 91 dd 04 	lds	r24, 0x04DD
    5ad6:	88 23       	and	r24, r24
    5ad8:	09 f0       	breq	.+2      	; 0x5adc <USB_Device_ProcessControlRequest+0x238>
    5ada:	88 cf       	rjmp	.-240    	; 0x59ec <USB_Device_ProcessControlRequest+0x148>
    5adc:	eb cf       	rjmp	.-42     	; 0x5ab4 <USB_Device_ProcessControlRequest+0x210>
	if (Endpoint_IsSETUPReceived())
	{
		Endpoint_StallTransaction();
		Endpoint_ClearSETUP();		
	}
}
    5ade:	0f 90       	pop	r0
    5ae0:	0f 90       	pop	r0
    5ae2:	cf 91       	pop	r28
    5ae4:	df 91       	pop	r29
    5ae6:	1f 91       	pop	r17
    5ae8:	08 95       	ret

00005aea <Endpoint_ConfigureEndpoint_Prv>:

bool Endpoint_ConfigureEndpoint_Prv(const uint8_t Number, const uint8_t UECFG0XData, const uint8_t UECFG1XData)
{
	Endpoint_SelectEndpoint(Number);
    5aea:	80 93 e9 00 	sts	0x00E9, r24
	Endpoint_EnableEndpoint();
    5aee:	eb ee       	ldi	r30, 0xEB	; 235
    5af0:	f0 e0       	ldi	r31, 0x00	; 0
    5af2:	80 81       	ld	r24, Z
    5af4:	81 60       	ori	r24, 0x01	; 1
    5af6:	80 83       	st	Z, r24

	UECFG1X = 0;
    5af8:	ed ee       	ldi	r30, 0xED	; 237
    5afa:	f0 e0       	ldi	r31, 0x00	; 0
    5afc:	10 82       	st	Z, r1

	UECFG0X = UECFG0XData;
    5afe:	60 93 ec 00 	sts	0x00EC, r22
	UECFG1X = UECFG1XData;
    5b02:	40 83       	st	Z, r20

	return Endpoint_IsConfigured();
    5b04:	80 91 ee 00 	lds	r24, 0x00EE
}
    5b08:	88 1f       	adc	r24, r24
    5b0a:	88 27       	eor	r24, r24
    5b0c:	88 1f       	adc	r24, r24
    5b0e:	08 95       	ret

00005b10 <Endpoint_ClearEndpoints>:

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;
    5b10:	10 92 f4 00 	sts	0x00F4, r1

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    5b14:	80 e0       	ldi	r24, 0x00	; 0
	{
		Endpoint_SelectEndpoint(EPNum);	
    5b16:	80 93 e9 00 	sts	0x00E9, r24
		UEIENX = 0;
    5b1a:	10 92 f0 00 	sts	0x00F0, r1
		UEINTX = 0;
    5b1e:	10 92 e8 00 	sts	0x00E8, r1
		Endpoint_DeallocateMemory();
    5b22:	90 91 ed 00 	lds	r25, 0x00ED
    5b26:	9d 7f       	andi	r25, 0xFD	; 253
    5b28:	90 93 ed 00 	sts	0x00ED, r25
		Endpoint_DisableEndpoint();
    5b2c:	90 91 eb 00 	lds	r25, 0x00EB
    5b30:	9e 7f       	andi	r25, 0xFE	; 254
    5b32:	90 93 eb 00 	sts	0x00EB, r25

void Endpoint_ClearEndpoints(void)
{
	UEINT = 0;

	for (uint8_t EPNum = 0; EPNum < ENDPOINT_TOTAL_ENDPOINTS; EPNum++)
    5b36:	8f 5f       	subi	r24, 0xFF	; 255
    5b38:	87 30       	cpi	r24, 0x07	; 7
    5b3a:	69 f7       	brne	.-38     	; 0x5b16 <Endpoint_ClearEndpoints+0x6>
		UEIENX = 0;
		UEINTX = 0;
		Endpoint_DeallocateMemory();
		Endpoint_DisableEndpoint();
	}
}
    5b3c:	08 95       	ret

00005b3e <Endpoint_ClearStatusStage>:

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
    5b3e:	80 91 de 04 	lds	r24, 0x04DE
    5b42:	87 ff       	sbrs	r24, 7
    5b44:	0e c0       	rjmp	.+28     	; 0x5b62 <Endpoint_ClearStatusStage+0x24>
    5b46:	04 c0       	rjmp	.+8      	; 0x5b50 <Endpoint_ClearStatusStage+0x12>
	{
		while (!(Endpoint_IsOUTReceived()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    5b48:	80 91 dd 04 	lds	r24, 0x04DD
    5b4c:	88 23       	and	r24, r24
    5b4e:	d9 f0       	breq	.+54     	; 0x5b86 <Endpoint_ClearStatusStage+0x48>

void Endpoint_ClearStatusStage(void)
{
	if (USB_ControlRequest.bmRequestType & REQDIR_DEVICETOHOST)
	{
		while (!(Endpoint_IsOUTReceived()))
    5b50:	80 91 e8 00 	lds	r24, 0x00E8
    5b54:	82 ff       	sbrs	r24, 2
    5b56:	f8 cf       	rjmp	.-16     	; 0x5b48 <Endpoint_ClearStatusStage+0xa>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}

		Endpoint_ClearOUT();
    5b58:	80 91 e8 00 	lds	r24, 0x00E8
    5b5c:	98 2f       	mov	r25, r24
    5b5e:	9b 7f       	andi	r25, 0xFB	; 251
    5b60:	08 c0       	rjmp	.+16     	; 0x5b72 <Endpoint_ClearStatusStage+0x34>
	}
	else
	{
		while (!(Endpoint_IsINReady()))
    5b62:	80 91 e8 00 	lds	r24, 0x00E8
    5b66:	80 ff       	sbrs	r24, 0
    5b68:	0a c0       	rjmp	.+20     	; 0x5b7e <Endpoint_ClearStatusStage+0x40>
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
			  return;
		}
		
		Endpoint_ClearIN();
    5b6a:	80 91 e8 00 	lds	r24, 0x00E8
    5b6e:	98 2f       	mov	r25, r24
    5b70:	9e 7f       	andi	r25, 0xFE	; 254
    5b72:	90 93 e8 00 	sts	0x00E8, r25
    5b76:	8f 77       	andi	r24, 0x7F	; 127
    5b78:	80 93 e8 00 	sts	0x00E8, r24
    5b7c:	08 95       	ret
	}
	else
	{
		while (!(Endpoint_IsINReady()))
		{
			if (USB_DeviceState == DEVICE_STATE_Unattached)
    5b7e:	80 91 dd 04 	lds	r24, 0x04DD
    5b82:	88 23       	and	r24, r24
    5b84:	71 f7       	brne	.-36     	; 0x5b62 <Endpoint_ClearStatusStage+0x24>
    5b86:	08 95       	ret

00005b88 <Endpoint_WaitUntilReady>:

#if !defined(CONTROL_ONLY_DEVICE)
uint8_t Endpoint_WaitUntilReady(void)
{
	#if (USB_STREAM_TIMEOUT_MS < 0xFF)
	uint8_t  TimeoutMSRem = USB_STREAM_TIMEOUT_MS;	
    5b88:	84 e6       	ldi	r24, 0x64	; 100
	uint16_t TimeoutMSRem = USB_STREAM_TIMEOUT_MS;
	#endif

	for (;;)
	{
		if (Endpoint_GetEndpointDirection() == ENDPOINT_DIR_IN)
    5b8a:	90 91 ec 00 	lds	r25, 0x00EC
    5b8e:	90 ff       	sbrs	r25, 0
    5b90:	05 c0       	rjmp	.+10     	; 0x5b9c <Endpoint_WaitUntilReady+0x14>
		{
			if (Endpoint_IsINReady())
    5b92:	90 91 e8 00 	lds	r25, 0x00E8
    5b96:	90 ff       	sbrs	r25, 0
    5b98:	05 c0       	rjmp	.+10     	; 0x5ba4 <Endpoint_WaitUntilReady+0x1c>
    5b9a:	19 c0       	rjmp	.+50     	; 0x5bce <Endpoint_WaitUntilReady+0x46>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
    5b9c:	90 91 e8 00 	lds	r25, 0x00E8
    5ba0:	92 fd       	sbrc	r25, 2
    5ba2:	15 c0       	rjmp	.+42     	; 0x5bce <Endpoint_WaitUntilReady+0x46>
			  return ENDPOINT_READYWAIT_NoError;		
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    5ba4:	90 91 dd 04 	lds	r25, 0x04DD
    5ba8:	99 23       	and	r25, r25
    5baa:	99 f0       	breq	.+38     	; 0x5bd2 <Endpoint_WaitUntilReady+0x4a>
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
		else if (Endpoint_IsStalled())
    5bac:	90 91 eb 00 	lds	r25, 0x00EB
    5bb0:	95 fd       	sbrc	r25, 5
    5bb2:	11 c0       	rjmp	.+34     	; 0x5bd6 <Endpoint_WaitUntilReady+0x4e>
		  return ENDPOINT_READYWAIT_EndpointStalled;
			  
		if (USB_INT_HasOccurred(USB_INT_SOFI))
    5bb4:	90 91 e1 00 	lds	r25, 0x00E1
    5bb8:	92 ff       	sbrs	r25, 2
    5bba:	e7 cf       	rjmp	.-50     	; 0x5b8a <Endpoint_WaitUntilReady+0x2>
		{
			USB_INT_Clear(USB_INT_SOFI);
    5bbc:	90 91 e1 00 	lds	r25, 0x00E1
    5bc0:	9b 7f       	andi	r25, 0xFB	; 251
    5bc2:	90 93 e1 00 	sts	0x00E1, r25

			if (!(TimeoutMSRem--))
    5bc6:	88 23       	and	r24, r24
    5bc8:	41 f0       	breq	.+16     	; 0x5bda <Endpoint_WaitUntilReady+0x52>
    5bca:	81 50       	subi	r24, 0x01	; 1
    5bcc:	de cf       	rjmp	.-68     	; 0x5b8a <Endpoint_WaitUntilReady+0x2>
			  return ENDPOINT_READYWAIT_NoError;
		}
		else
		{
			if (Endpoint_IsOUTReceived())
			  return ENDPOINT_READYWAIT_NoError;		
    5bce:	80 e0       	ldi	r24, 0x00	; 0
    5bd0:	08 95       	ret
		}
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_READYWAIT_DeviceDisconnected;
    5bd2:	82 e0       	ldi	r24, 0x02	; 2
    5bd4:	08 95       	ret
		else if (Endpoint_IsStalled())
		  return ENDPOINT_READYWAIT_EndpointStalled;
    5bd6:	81 e0       	ldi	r24, 0x01	; 1
    5bd8:	08 95       	ret
		if (USB_INT_HasOccurred(USB_INT_SOFI))
		{
			USB_INT_Clear(USB_INT_SOFI);

			if (!(TimeoutMSRem--))
			  return ENDPOINT_READYWAIT_Timeout;
    5bda:	83 e0       	ldi	r24, 0x03	; 3
		}
	}
}
    5bdc:	08 95       	ret

00005bde <Endpoint_Write_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
    5bde:	af 92       	push	r10
    5be0:	bf 92       	push	r11
    5be2:	df 92       	push	r13
    5be4:	ef 92       	push	r14
    5be6:	ff 92       	push	r15
    5be8:	0f 93       	push	r16
    5bea:	1f 93       	push	r17
    5bec:	df 93       	push	r29
    5bee:	cf 93       	push	r28
    5bf0:	0f 92       	push	r0
    5bf2:	cd b7       	in	r28, 0x3d	; 61
    5bf4:	de b7       	in	r29, 0x3e	; 62
    5bf6:	08 2f       	mov	r16, r24
    5bf8:	5b 01       	movw	r10, r22
    5bfa:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    5bfc:	99 83       	std	Y+1, r25	; 0x01
    5bfe:	c4 df       	rcall	.-120    	; 0x5b88 <Endpoint_WaitUntilReady>
    5c00:	d8 2e       	mov	r13, r24
    5c02:	99 81       	ldd	r25, Y+1	; 0x01
    5c04:	88 23       	and	r24, r24
    5c06:	51 f5       	brne	.+84     	; 0x5c5c <Endpoint_Write_Stream_LE+0x7e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5c08:	19 2f       	mov	r17, r25
    5c0a:	20 c0       	rjmp	.+64     	; 0x5c4c <Endpoint_Write_Stream_LE+0x6e>
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    5c0c:	80 91 e8 00 	lds	r24, 0x00E8
    5c10:	85 fd       	sbrc	r24, 5
    5c12:	14 c0       	rjmp	.+40     	; 0x5c3c <Endpoint_Write_Stream_LE+0x5e>
		{
			TEMPLATE_CLEAR_ENDPOINT();
    5c14:	80 91 e8 00 	lds	r24, 0x00E8
    5c18:	98 2f       	mov	r25, r24
    5c1a:	9e 7f       	andi	r25, 0xFE	; 254
    5c1c:	90 93 e8 00 	sts	0x00E8, r25
    5c20:	8f 77       	andi	r24, 0x7F	; 127
    5c22:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    5c26:	e1 14       	cp	r14, r1
    5c28:	f1 04       	cpc	r15, r1
    5c2a:	21 f0       	breq	.+8      	; 0x5c34 <Endpoint_Write_Stream_LE+0x56>
    5c2c:	f7 01       	movw	r30, r14
    5c2e:	09 95       	icall
    5c30:	81 30       	cpi	r24, 0x01	; 1
    5c32:	81 f0       	breq	.+32     	; 0x5c54 <Endpoint_Write_Stream_LE+0x76>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5c34:	a9 df       	rcall	.-174    	; 0x5b88 <Endpoint_WaitUntilReady>
    5c36:	88 23       	and	r24, r24
    5c38:	49 f0       	breq	.+18     	; 0x5c4c <Endpoint_Write_Stream_LE+0x6e>
    5c3a:	0f c0       	rjmp	.+30     	; 0x5c5a <Endpoint_Write_Stream_LE+0x7c>
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    5c3c:	f8 01       	movw	r30, r16
    5c3e:	81 91       	ld	r24, Z+
    5c40:	8f 01       	movw	r16, r30
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    5c42:	80 93 f1 00 	sts	0x00F1, r24
			Length--;
    5c46:	08 94       	sec
    5c48:	a1 08       	sbc	r10, r1
    5c4a:	b1 08       	sbc	r11, r1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
    5c4c:	a1 14       	cp	r10, r1
    5c4e:	b1 04       	cpc	r11, r1
    5c50:	e9 f6       	brne	.-70     	; 0x5c0c <Endpoint_Write_Stream_LE+0x2e>
    5c52:	04 c0       	rjmp	.+8      	; 0x5c5c <Endpoint_Write_Stream_LE+0x7e>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
    5c54:	74 e0       	ldi	r23, 0x04	; 4
    5c56:	d7 2e       	mov	r13, r23
    5c58:	01 c0       	rjmp	.+2      	; 0x5c5c <Endpoint_Write_Stream_LE+0x7e>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5c5a:	d8 2e       	mov	r13, r24
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    5c5c:	8d 2d       	mov	r24, r13
    5c5e:	0f 90       	pop	r0
    5c60:	cf 91       	pop	r28
    5c62:	df 91       	pop	r29
    5c64:	1f 91       	pop	r17
    5c66:	0f 91       	pop	r16
    5c68:	ff 90       	pop	r15
    5c6a:	ef 90       	pop	r14
    5c6c:	df 90       	pop	r13
    5c6e:	bf 90       	pop	r11
    5c70:	af 90       	pop	r10
    5c72:	08 95       	ret

00005c74 <Endpoint_Read_Stream_LE>:
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
    5c74:	af 92       	push	r10
    5c76:	bf 92       	push	r11
    5c78:	df 92       	push	r13
    5c7a:	ef 92       	push	r14
    5c7c:	ff 92       	push	r15
    5c7e:	0f 93       	push	r16
    5c80:	1f 93       	push	r17
    5c82:	df 93       	push	r29
    5c84:	cf 93       	push	r28
    5c86:	0f 92       	push	r0
    5c88:	cd b7       	in	r28, 0x3d	; 61
    5c8a:	de b7       	in	r29, 0x3e	; 62
    5c8c:	08 2f       	mov	r16, r24
    5c8e:	5b 01       	movw	r10, r22
    5c90:	7a 01       	movw	r14, r20
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
	uint8_t  ErrorCode;
	
	if ((ErrorCode = Endpoint_WaitUntilReady()))
    5c92:	99 83       	std	Y+1, r25	; 0x01
    5c94:	79 df       	rcall	.-270    	; 0x5b88 <Endpoint_WaitUntilReady>
    5c96:	d8 2e       	mov	r13, r24
    5c98:	99 81       	ldd	r25, Y+1	; 0x01
    5c9a:	88 23       	and	r24, r24
    5c9c:	51 f5       	brne	.+84     	; 0x5cf2 <Endpoint_Read_Stream_LE+0x7e>
uint8_t TEMPLATE_FUNC_NAME (TEMPLATE_BUFFER_TYPE Buffer, uint16_t Length __CALLBACK_PARAM)
{
	uint8_t* DataStream = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5c9e:	19 2f       	mov	r17, r25
    5ca0:	20 c0       	rjmp	.+64     	; 0x5ce2 <Endpoint_Read_Stream_LE+0x6e>
	}
	#endif

	while (Length)
	{
		if (!(Endpoint_IsReadWriteAllowed()))
    5ca2:	80 91 e8 00 	lds	r24, 0x00E8
    5ca6:	85 fd       	sbrc	r24, 5
    5ca8:	14 c0       	rjmp	.+40     	; 0x5cd2 <Endpoint_Read_Stream_LE+0x5e>
		{
			TEMPLATE_CLEAR_ENDPOINT();
    5caa:	80 91 e8 00 	lds	r24, 0x00E8
    5cae:	98 2f       	mov	r25, r24
    5cb0:	9b 7f       	andi	r25, 0xFB	; 251
    5cb2:	90 93 e8 00 	sts	0x00E8, r25
    5cb6:	8f 77       	andi	r24, 0x7F	; 127
    5cb8:	80 93 e8 00 	sts	0x00E8, r24

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
    5cbc:	e1 14       	cp	r14, r1
    5cbe:	f1 04       	cpc	r15, r1
    5cc0:	21 f0       	breq	.+8      	; 0x5cca <Endpoint_Read_Stream_LE+0x56>
    5cc2:	f7 01       	movw	r30, r14
    5cc4:	09 95       	icall
    5cc6:	81 30       	cpi	r24, 0x01	; 1
    5cc8:	81 f0       	breq	.+32     	; 0x5cea <Endpoint_Read_Stream_LE+0x76>
			  return ENDPOINT_RWSTREAM_CallbackAborted;
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5cca:	5e df       	rcall	.-324    	; 0x5b88 <Endpoint_WaitUntilReady>
    5ccc:	88 23       	and	r24, r24
    5cce:	49 f0       	breq	.+18     	; 0x5ce2 <Endpoint_Read_Stream_LE+0x6e>
    5cd0:	0f c0       	rjmp	.+30     	; 0x5cf0 <Endpoint_Read_Stream_LE+0x7c>
			 *  \return Next byte in the currently selected endpoint's FIFO buffer
			 */
			static inline uint8_t Endpoint_Read_Byte(void) ATTR_WARN_UNUSED_RESULT ATTR_ALWAYS_INLINE;
			static inline uint8_t Endpoint_Read_Byte(void)
			{
				return UEDATX;
    5cd2:	80 91 f1 00 	lds	r24, 0x00F1
			  return ErrorCode;
		}
		else
		{
			TEMPLATE_TRANSFER_BYTE(DataStream);
    5cd6:	f8 01       	movw	r30, r16
    5cd8:	81 93       	st	Z+, r24
    5cda:	8f 01       	movw	r16, r30
			Length--;
    5cdc:	08 94       	sec
    5cde:	a1 08       	sbc	r10, r1
    5ce0:	b1 08       	sbc	r11, r1
				} while (Length >= 8);	
		}
	}
	#endif

	while (Length)
    5ce2:	a1 14       	cp	r10, r1
    5ce4:	b1 04       	cpc	r11, r1
    5ce6:	e9 f6       	brne	.-70     	; 0x5ca2 <Endpoint_Read_Stream_LE+0x2e>
    5ce8:	04 c0       	rjmp	.+8      	; 0x5cf2 <Endpoint_Read_Stream_LE+0x7e>
		{
			TEMPLATE_CLEAR_ENDPOINT();

			#if !defined(NO_STREAM_CALLBACKS)
			if ((Callback != NULL) && (Callback() == STREAMCALLBACK_Abort))
			  return ENDPOINT_RWSTREAM_CallbackAborted;
    5cea:	04 e0       	ldi	r16, 0x04	; 4
    5cec:	d0 2e       	mov	r13, r16
    5cee:	01 c0       	rjmp	.+2      	; 0x5cf2 <Endpoint_Read_Stream_LE+0x7e>
			#endif

			if ((ErrorCode = Endpoint_WaitUntilReady()))
    5cf0:	d8 2e       	mov	r13, r24
			Length--;
		}
	}

	return ENDPOINT_RWSTREAM_NoError;
}
    5cf2:	8d 2d       	mov	r24, r13
    5cf4:	0f 90       	pop	r0
    5cf6:	cf 91       	pop	r28
    5cf8:	df 91       	pop	r29
    5cfa:	1f 91       	pop	r17
    5cfc:	0f 91       	pop	r16
    5cfe:	ff 90       	pop	r15
    5d00:	ef 90       	pop	r14
    5d02:	df 90       	pop	r13
    5d04:	bf 90       	pop	r11
    5d06:	af 90       	pop	r10
    5d08:	08 95       	ret

00005d0a <Endpoint_Write_Control_PStream_LE>:
uint8_t TEMPLATE_FUNC_NAME (const void* Buffer, uint16_t Length)
{
	uint8_t* DataStream     = ((uint8_t*)Buffer + TEMPLATE_BUFFER_OFFSET(Length));
    5d0a:	48 2f       	mov	r20, r24
    5d0c:	59 2f       	mov	r21, r25
	bool     LastPacketFull = false;
	
	if (Length > USB_ControlRequest.wLength)
    5d0e:	80 91 e4 04 	lds	r24, 0x04E4
    5d12:	90 91 e5 04 	lds	r25, 0x04E5
    5d16:	86 17       	cp	r24, r22
    5d18:	97 07       	cpc	r25, r23
    5d1a:	18 f4       	brcc	.+6      	; 0x5d22 <Endpoint_Write_Control_PStream_LE+0x18>
    5d1c:	bc 01       	movw	r22, r24
    5d1e:	e0 e0       	ldi	r30, 0x00	; 0
    5d20:	45 c0       	rjmp	.+138    	; 0x5dac <Endpoint_Write_Control_PStream_LE+0xa2>
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
    5d22:	61 15       	cp	r22, r1
    5d24:	71 05       	cpc	r23, r1
    5d26:	d9 f7       	brne	.-10     	; 0x5d1e <Endpoint_Write_Control_PStream_LE+0x14>
	  Endpoint_ClearIN();
    5d28:	80 91 e8 00 	lds	r24, 0x00E8
    5d2c:	98 2f       	mov	r25, r24
    5d2e:	9e 7f       	andi	r25, 0xFE	; 254
    5d30:	90 93 e8 00 	sts	0x00E8, r25
    5d34:	8f 77       	andi	r24, 0x7F	; 127
    5d36:	80 93 e8 00 	sts	0x00E8, r24
    5d3a:	f1 cf       	rjmp	.-30     	; 0x5d1e <Endpoint_Write_Control_PStream_LE+0x14>

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
    5d3c:	80 91 e8 00 	lds	r24, 0x00E8
    5d40:	83 fd       	sbrc	r24, 3
    5d42:	45 c0       	rjmp	.+138    	; 0x5dce <Endpoint_Write_Control_PStream_LE+0xc4>
		  return ENDPOINT_RWCSTREAM_HostAborted;

		if (Endpoint_IsOUTReceived())
    5d44:	80 91 e8 00 	lds	r24, 0x00E8
    5d48:	82 fd       	sbrc	r24, 2
    5d4a:	3b c0       	rjmp	.+118    	; 0x5dc2 <Endpoint_Write_Control_PStream_LE+0xb8>
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    5d4c:	80 91 dd 04 	lds	r24, 0x04DD
    5d50:	88 23       	and	r24, r24
    5d52:	09 f4       	brne	.+2      	; 0x5d56 <Endpoint_Write_Control_PStream_LE+0x4c>
    5d54:	3e c0       	rjmp	.+124    	; 0x5dd2 <Endpoint_Write_Control_PStream_LE+0xc8>
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
		  
		if (Endpoint_IsINReady())
    5d56:	80 91 e8 00 	lds	r24, 0x00E8
    5d5a:	80 ff       	sbrs	r24, 0
    5d5c:	27 c0       	rjmp	.+78     	; 0x5dac <Endpoint_Write_Control_PStream_LE+0xa2>
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
    5d5e:	90 91 f3 00 	lds	r25, 0x00F3
    5d62:	80 91 f2 00 	lds	r24, 0x00F2
    5d66:	39 2f       	mov	r19, r25
    5d68:	20 e0       	ldi	r18, 0x00	; 0
    5d6a:	90 e0       	ldi	r25, 0x00	; 0
    5d6c:	82 2b       	or	r24, r18
    5d6e:	93 2b       	or	r25, r19
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    5d70:	09 c0       	rjmp	.+18     	; 0x5d84 <Endpoint_Write_Control_PStream_LE+0x7a>
    5d72:	fa 01       	movw	r30, r20
			{
				TEMPLATE_TRANSFER_BYTE(DataStream);
    5d74:	4f 5f       	subi	r20, 0xFF	; 255
    5d76:	5f 4f       	sbci	r21, 0xFF	; 255
    5d78:	e4 91       	lpm	r30, Z+
			 *  \param[in] Byte  Next byte to write into the the currently selected endpoint's FIFO buffer
			 */
			static inline void Endpoint_Write_Byte(const uint8_t Byte) ATTR_ALWAYS_INLINE;
			static inline void Endpoint_Write_Byte(const uint8_t Byte)
			{
				UEDATX = Byte;
    5d7a:	e0 93 f1 00 	sts	0x00F1, r30
				Length--;
    5d7e:	61 50       	subi	r22, 0x01	; 1
    5d80:	70 40       	sbci	r23, 0x00	; 0
				BytesInEndpoint++;
    5d82:	01 96       	adiw	r24, 0x01	; 1
		  
		if (Endpoint_IsINReady())
		{
			uint16_t BytesInEndpoint = Endpoint_BytesInEndpoint();
		
			while (Length && (BytesInEndpoint < USB_ControlEndpointSize))
    5d84:	61 15       	cp	r22, r1
    5d86:	71 05       	cpc	r23, r1
    5d88:	19 f0       	breq	.+6      	; 0x5d90 <Endpoint_Write_Control_PStream_LE+0x86>
    5d8a:	88 30       	cpi	r24, 0x08	; 8
    5d8c:	91 05       	cpc	r25, r1
    5d8e:	88 f3       	brcs	.-30     	; 0x5d72 <Endpoint_Write_Control_PStream_LE+0x68>
				TEMPLATE_TRANSFER_BYTE(DataStream);
				Length--;
				BytesInEndpoint++;
			}
			
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
    5d90:	e1 e0       	ldi	r30, 0x01	; 1
    5d92:	88 30       	cpi	r24, 0x08	; 8
    5d94:	91 05       	cpc	r25, r1
    5d96:	09 f0       	breq	.+2      	; 0x5d9a <Endpoint_Write_Control_PStream_LE+0x90>
    5d98:	e0 e0       	ldi	r30, 0x00	; 0
			Endpoint_ClearIN();
    5d9a:	80 91 e8 00 	lds	r24, 0x00E8
    5d9e:	98 2f       	mov	r25, r24
    5da0:	9e 7f       	andi	r25, 0xFE	; 254
    5da2:	90 93 e8 00 	sts	0x00E8, r25
    5da6:	8f 77       	andi	r24, 0x7F	; 127
    5da8:	80 93 e8 00 	sts	0x00E8, r24
	if (Length > USB_ControlRequest.wLength)
	  Length = USB_ControlRequest.wLength;
	else if (!(Length))
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
    5dac:	61 15       	cp	r22, r1
    5dae:	71 05       	cpc	r23, r1
    5db0:	29 f6       	brne	.-118    	; 0x5d3c <Endpoint_Write_Control_PStream_LE+0x32>
    5db2:	ee 23       	and	r30, r30
    5db4:	09 f0       	breq	.+2      	; 0x5db8 <Endpoint_Write_Control_PStream_LE+0xae>
    5db6:	c2 cf       	rjmp	.-124    	; 0x5d3c <Endpoint_Write_Control_PStream_LE+0x32>
    5db8:	04 c0       	rjmp	.+8      	; 0x5dc2 <Endpoint_Write_Control_PStream_LE+0xb8>
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
    5dba:	80 91 dd 04 	lds	r24, 0x04DD
    5dbe:	88 23       	and	r24, r24
    5dc0:	51 f0       	breq	.+20     	; 0x5dd6 <Endpoint_Write_Control_PStream_LE+0xcc>
			LastPacketFull = (BytesInEndpoint == USB_ControlEndpointSize);
			Endpoint_ClearIN();
		}
	}
	
	while (!(Endpoint_IsOUTReceived()))
    5dc2:	80 91 e8 00 	lds	r24, 0x00E8
    5dc6:	82 ff       	sbrs	r24, 2
    5dc8:	f8 cf       	rjmp	.-16     	; 0x5dba <Endpoint_Write_Control_PStream_LE+0xb0>
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
	}

	return ENDPOINT_RWCSTREAM_NoError;
    5dca:	80 e0       	ldi	r24, 0x00	; 0
    5dcc:	08 95       	ret
	  Endpoint_ClearIN();

	while (Length || LastPacketFull)
	{
		if (Endpoint_IsSETUPReceived())
		  return ENDPOINT_RWCSTREAM_HostAborted;
    5dce:	81 e0       	ldi	r24, 0x01	; 1
    5dd0:	08 95       	ret

		if (Endpoint_IsOUTReceived())
		  break;
		
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;
    5dd2:	82 e0       	ldi	r24, 0x02	; 2
    5dd4:	08 95       	ret
	}
	
	while (!(Endpoint_IsOUTReceived()))
	{
		if (USB_DeviceState == DEVICE_STATE_Unattached)
		  return ENDPOINT_RWCSTREAM_DeviceDisconnected;	
    5dd6:	82 e0       	ldi	r24, 0x02	; 2
	}

	return ENDPOINT_RWCSTREAM_NoError;
}
    5dd8:	08 95       	ret

00005dda <USB_ResetInterface>:
	#endif
}

void USB_ResetInterface(void)
{
	USB_INT_DisableAllInterrupts();
    5dda:	56 d0       	rcall	.+172    	; 0x5e88 <USB_INT_DisableAllInterrupts>
	USB_INT_ClearAllInterrupts();
    5ddc:	5d d0       	rcall	.+186    	; 0x5e98 <USB_INT_ClearAllInterrupts>
	#if defined(USB_CAN_BE_HOST)
	USB_HostState   = HOST_STATE_Unattached;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	USB_DeviceState = DEVICE_STATE_Unattached;
    5dde:	10 92 dd 04 	sts	0x04DD, r1
	USB_ConfigurationNumber  = 0;
    5de2:	10 92 db 04 	sts	0x04DB, r1

	#if !defined(NO_DEVICE_REMOTE_WAKEUP)
		USB_RemoteWakeupEnabled  = false;
    5de6:	10 92 da 04 	sts	0x04DA, r1
	#endif
	
	#if !defined(NO_DEVICE_SELF_POWER)
		USB_CurrentlySelfPowered = false;
    5dea:	10 92 d9 04 	sts	0x04D9, r1
	#endif
	
	if (!(USB_Options & USB_OPT_MANUAL_PLL))
	{
		#if defined(USB_SERIES_4_AVR)
		PLLFRQ = ((1 << PLLUSB) | (1 << PDIV3) | (1 << PDIV1));
    5dee:	8a e4       	ldi	r24, 0x4A	; 74
    5df0:	82 bf       	out	0x32, r24	; 50
		#endif

		USB_PLL_On();
    5df2:	80 e1       	ldi	r24, 0x10	; 16
    5df4:	89 bd       	out	0x29, r24	; 41
    5df6:	89 b5       	in	r24, 0x29	; 41
    5df8:	82 60       	ori	r24, 0x02	; 2
    5dfa:	89 bd       	out	0x29, r24	; 41
		while (!(USB_PLL_IsReady()));
    5dfc:	09 b4       	in	r0, 0x29	; 41
    5dfe:	00 fe       	sbrs	r0, 0
    5e00:	fd cf       	rjmp	.-6      	; 0x5dfc <USB_ResetInterface+0x22>
	}
	
	USB_Controller_Reset();
    5e02:	80 91 d8 00 	lds	r24, 0x00D8
    5e06:	98 2f       	mov	r25, r24
    5e08:	9f 77       	andi	r25, 0x7F	; 127
    5e0a:	90 93 d8 00 	sts	0x00D8, r25
    5e0e:	80 68       	ori	r24, 0x80	; 128
    5e10:	80 93 d8 00 	sts	0x00D8, r24
		USB_CurrentMode = USB_GetUSBModeFromUID();
	}
	#endif
		
	if (!(USB_Options & USB_OPT_REG_DISABLED))
	  USB_REG_On();
    5e14:	80 91 d7 00 	lds	r24, 0x00D7
    5e18:	81 60       	ori	r24, 0x01	; 1
    5e1a:	80 93 d7 00 	sts	0x00D7, r24
	else
	  USB_REG_Off();
	
	USB_CLK_Unfreeze();
    5e1e:	80 91 d8 00 	lds	r24, 0x00D8
    5e22:	8f 7d       	andi	r24, 0xDF	; 223
    5e24:	80 93 d8 00 	sts	0x00D8, r24
	if (USB_CurrentMode == USB_MODE_DEVICE)
	{
		if (USB_Options & USB_DEVICE_OPT_LOWSPEED)
		  USB_Device_SetLowSpeed();
		else
		  USB_Device_SetFullSpeed();
    5e28:	80 91 e0 00 	lds	r24, 0x00E0
    5e2c:	8b 7f       	andi	r24, 0xFB	; 251
    5e2e:	80 93 e0 00 	sts	0x00E0, r24
			#endif
		}
	}
	#endif

	USB_Attach();
    5e32:	80 91 e0 00 	lds	r24, 0x00E0
    5e36:	8e 7f       	andi	r24, 0xFE	; 254
    5e38:	80 93 e0 00 	sts	0x00E0, r24
	
	#if defined(USB_DEVICE_ONLY)
	USB_INT_Clear(USB_INT_SUSPEND);
    5e3c:	80 91 e1 00 	lds	r24, 0x00E1
    5e40:	8e 7f       	andi	r24, 0xFE	; 254
    5e42:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_SUSPEND);
    5e46:	80 91 e2 00 	lds	r24, 0x00E2
    5e4a:	81 60       	ori	r24, 0x01	; 1
    5e4c:	80 93 e2 00 	sts	0x00E2, r24
	USB_INT_Clear(USB_INT_EORSTI);
    5e50:	80 91 e1 00 	lds	r24, 0x00E1
    5e54:	87 7f       	andi	r24, 0xF7	; 247
    5e56:	80 93 e1 00 	sts	0x00E1, r24
	USB_INT_Enable(USB_INT_EORSTI);
    5e5a:	80 91 e2 00 	lds	r24, 0x00E2
    5e5e:	88 60       	ori	r24, 0x08	; 8
    5e60:	80 93 e2 00 	sts	0x00E2, r24

		#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
		USB_INT_Enable(USB_INT_VBUS);
    5e64:	80 91 d8 00 	lds	r24, 0x00D8
    5e68:	81 60       	ori	r24, 0x01	; 1
    5e6a:	80 93 d8 00 	sts	0x00D8, r24
		
		USB_INT_Enable(USB_INT_SRPI);
		USB_INT_Enable(USB_INT_BCERRI);
	}
	#endif
}
    5e6e:	08 95       	ret

00005e70 <USB_Init>:
		EVENT_USB_InitFailure(USB_INITERROR_NoUSBModeSpecified);
		return;
	}
	#endif
	
	USB_ResetInterface();
    5e70:	b4 df       	rcall	.-152    	; 0x5dda <USB_ResetInterface>

	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USB_OTGPAD_On();
    5e72:	e8 ed       	ldi	r30, 0xD8	; 216
    5e74:	f0 e0       	ldi	r31, 0x00	; 0
    5e76:	80 81       	ld	r24, Z
    5e78:	80 61       	ori	r24, 0x10	; 16
    5e7a:	80 83       	st	Z, r24
	#endif

	USB_IsInitialized = true;
    5e7c:	81 e0       	ldi	r24, 0x01	; 1
    5e7e:	80 93 dc 04 	sts	0x04DC, r24

	sei();
    5e82:	78 94       	sei
}
    5e84:	08 95       	ret

00005e86 <USB_Event_Stub>:
#include "Events.h"

void USB_Event_Stub(void)
{

}
    5e86:	08 95       	ret

00005e88 <USB_INT_DisableAllInterrupts>:
void USB_INT_DisableAllInterrupts(void)
{
	#if defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBCON &= ~((1 << VBUSTE) | (1 << IDTE));				
	#elif defined(USB_SERIES_4_AVR)
	USBCON &= ~(1 << VBUSTE);					
    5e88:	e8 ed       	ldi	r30, 0xD8	; 216
    5e8a:	f0 e0       	ldi	r31, 0x00	; 0
    5e8c:	80 81       	ld	r24, Z
    5e8e:	8e 7f       	andi	r24, 0xFE	; 254
    5e90:	80 83       	st	Z, r24
	UHIEN   = 0;
	OTGIEN  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDIEN   = 0;
    5e92:	10 92 e2 00 	sts	0x00E2, r1
	#endif
}
    5e96:	08 95       	ret

00005e98 <USB_INT_ClearAllInterrupts>:

void USB_INT_ClearAllInterrupts(void)
{
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	USBINT  = 0;
    5e98:	10 92 da 00 	sts	0x00DA, r1
	UHINT   = 0;
	OTGINT  = 0;
	#endif
	
	#if defined(USB_CAN_BE_DEVICE)
	UDINT   = 0;
    5e9c:	10 92 e1 00 	sts	0x00E1, r1
	#endif
}
    5ea0:	08 95       	ret

00005ea2 <__vector_10>:

ISR(USB_GEN_vect, ISR_BLOCK)
{
    5ea2:	1f 92       	push	r1
    5ea4:	0f 92       	push	r0
    5ea6:	0f b6       	in	r0, 0x3f	; 63
    5ea8:	0f 92       	push	r0
    5eaa:	11 24       	eor	r1, r1
    5eac:	2f 93       	push	r18
    5eae:	3f 93       	push	r19
    5eb0:	4f 93       	push	r20
    5eb2:	5f 93       	push	r21
    5eb4:	6f 93       	push	r22
    5eb6:	7f 93       	push	r23
    5eb8:	8f 93       	push	r24
    5eba:	9f 93       	push	r25
    5ebc:	af 93       	push	r26
    5ebe:	bf 93       	push	r27
    5ec0:	ef 93       	push	r30
    5ec2:	ff 93       	push	r31
	#if defined(USB_CAN_BE_DEVICE)
	#if defined(USB_SERIES_4_AVR) || defined(USB_SERIES_6_AVR) || defined(USB_SERIES_7_AVR)
	if (USB_INT_HasOccurred(USB_INT_VBUS) && USB_INT_IsEnabled(USB_INT_VBUS))
    5ec4:	80 91 da 00 	lds	r24, 0x00DA
    5ec8:	80 ff       	sbrs	r24, 0
    5eca:	17 c0       	rjmp	.+46     	; 0x5efa <__vector_10+0x58>
    5ecc:	80 91 d8 00 	lds	r24, 0x00D8
    5ed0:	80 ff       	sbrs	r24, 0
    5ed2:	13 c0       	rjmp	.+38     	; 0x5efa <__vector_10+0x58>
	{
		USB_INT_Clear(USB_INT_VBUS);
    5ed4:	80 91 da 00 	lds	r24, 0x00DA
    5ed8:	8e 7f       	andi	r24, 0xFE	; 254
    5eda:	80 93 da 00 	sts	0x00DA, r24

		if (USB_VBUS_GetStatus())
    5ede:	80 91 d9 00 	lds	r24, 0x00D9
    5ee2:	80 ff       	sbrs	r24, 0
    5ee4:	06 c0       	rjmp	.+12     	; 0x5ef2 <__vector_10+0x50>
		{
			USB_DeviceState = DEVICE_STATE_Powered;
    5ee6:	81 e0       	ldi	r24, 0x01	; 1
    5ee8:	80 93 dd 04 	sts	0x04DD, r24
			EVENT_USB_Device_Connect();
    5eec:	0e 94 41 03 	call	0x682	; 0x682 <EVENT_USB_Device_Connect>
    5ef0:	04 c0       	rjmp	.+8      	; 0x5efa <__vector_10+0x58>
		}
		else
		{
			USB_DeviceState = DEVICE_STATE_Unattached;		
    5ef2:	10 92 dd 04 	sts	0x04DD, r1
			EVENT_USB_Device_Disconnect();
    5ef6:	0e 94 44 03 	call	0x688	; 0x688 <EVENT_USB_Device_Disconnect>
		}
	}
	#endif

	if (USB_INT_HasOccurred(USB_INT_SUSPEND) && USB_INT_IsEnabled(USB_INT_SUSPEND))
    5efa:	80 91 e1 00 	lds	r24, 0x00E1
    5efe:	80 ff       	sbrs	r24, 0
    5f00:	1d c0       	rjmp	.+58     	; 0x5f3c <__vector_10+0x9a>
    5f02:	80 91 e2 00 	lds	r24, 0x00E2
    5f06:	80 ff       	sbrs	r24, 0
    5f08:	19 c0       	rjmp	.+50     	; 0x5f3c <__vector_10+0x9a>
	{
		USB_INT_Clear(USB_INT_SUSPEND);
    5f0a:	80 91 e1 00 	lds	r24, 0x00E1
    5f0e:	8e 7f       	andi	r24, 0xFE	; 254
    5f10:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_SUSPEND);
    5f14:	80 91 e2 00 	lds	r24, 0x00E2
    5f18:	8e 7f       	andi	r24, 0xFE	; 254
    5f1a:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    5f1e:	80 91 e2 00 	lds	r24, 0x00E2
    5f22:	80 61       	ori	r24, 0x10	; 16
    5f24:	80 93 e2 00 	sts	0x00E2, r24
		
		USB_CLK_Freeze();
    5f28:	80 91 d8 00 	lds	r24, 0x00D8
    5f2c:	80 62       	ori	r24, 0x20	; 32
    5f2e:	80 93 d8 00 	sts	0x00D8, r24
		
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		  USB_PLL_Off();
    5f32:	19 bc       	out	0x29, r1	; 41

		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = DEVICE_STATE_Unattached;
		EVENT_USB_Device_Disconnect();
		#else
		USB_DeviceState = DEVICE_STATE_Suspended;
    5f34:	85 e0       	ldi	r24, 0x05	; 5
    5f36:	80 93 dd 04 	sts	0x04DD, r24
		EVENT_USB_Device_Suspend();
    5f3a:	a5 df       	rcall	.-182    	; 0x5e86 <USB_Event_Stub>
		#endif
	}

	if (USB_INT_HasOccurred(USB_INT_WAKEUP) && USB_INT_IsEnabled(USB_INT_WAKEUP))
    5f3c:	80 91 e1 00 	lds	r24, 0x00E1
    5f40:	84 ff       	sbrs	r24, 4
    5f42:	2a c0       	rjmp	.+84     	; 0x5f98 <__vector_10+0xf6>
    5f44:	80 91 e2 00 	lds	r24, 0x00E2
    5f48:	84 ff       	sbrs	r24, 4
    5f4a:	26 c0       	rjmp	.+76     	; 0x5f98 <__vector_10+0xf6>
	{
		if (!(USB_Options & USB_OPT_MANUAL_PLL))
		{
			USB_PLL_On();
    5f4c:	80 e1       	ldi	r24, 0x10	; 16
    5f4e:	89 bd       	out	0x29, r24	; 41
    5f50:	89 b5       	in	r24, 0x29	; 41
    5f52:	82 60       	ori	r24, 0x02	; 2
    5f54:	89 bd       	out	0x29, r24	; 41
			while (!(USB_PLL_IsReady()));
    5f56:	09 b4       	in	r0, 0x29	; 41
    5f58:	00 fe       	sbrs	r0, 0
    5f5a:	fd cf       	rjmp	.-6      	; 0x5f56 <__vector_10+0xb4>
		}

		USB_CLK_Unfreeze();
    5f5c:	80 91 d8 00 	lds	r24, 0x00D8
    5f60:	8f 7d       	andi	r24, 0xDF	; 223
    5f62:	80 93 d8 00 	sts	0x00D8, r24

		USB_INT_Clear(USB_INT_WAKEUP);
    5f66:	80 91 e1 00 	lds	r24, 0x00E1
    5f6a:	8f 7e       	andi	r24, 0xEF	; 239
    5f6c:	80 93 e1 00 	sts	0x00E1, r24

		USB_INT_Disable(USB_INT_WAKEUP);
    5f70:	80 91 e2 00 	lds	r24, 0x00E2
    5f74:	8f 7e       	andi	r24, 0xEF	; 239
    5f76:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_SUSPEND);
    5f7a:	80 91 e2 00 	lds	r24, 0x00E2
    5f7e:	81 60       	ori	r24, 0x01	; 1
    5f80:	80 93 e2 00 	sts	0x00E2, r24
		
		#if defined(USB_SERIES_2_AVR) && !defined(NO_LIMITED_CONTROLLER_CONNECT)
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Powered;
		EVENT_USB_Device_Connect();
		#else
		USB_DeviceState = (USB_ConfigurationNumber) ? DEVICE_STATE_Configured : DEVICE_STATE_Addressed;
    5f84:	80 91 db 04 	lds	r24, 0x04DB
    5f88:	88 23       	and	r24, r24
    5f8a:	11 f0       	breq	.+4      	; 0x5f90 <__vector_10+0xee>
    5f8c:	84 e0       	ldi	r24, 0x04	; 4
    5f8e:	01 c0       	rjmp	.+2      	; 0x5f92 <__vector_10+0xf0>
    5f90:	83 e0       	ldi	r24, 0x03	; 3
    5f92:	80 93 dd 04 	sts	0x04DD, r24
		EVENT_USB_Device_WakeUp();		
    5f96:	77 df       	rcall	.-274    	; 0x5e86 <USB_Event_Stub>
		#endif
	}
   
	if (USB_INT_HasOccurred(USB_INT_EORSTI) && USB_INT_IsEnabled(USB_INT_EORSTI))
    5f98:	80 91 e1 00 	lds	r24, 0x00E1
    5f9c:	83 ff       	sbrs	r24, 3
    5f9e:	28 c0       	rjmp	.+80     	; 0x5ff0 <__vector_10+0x14e>
    5fa0:	80 91 e2 00 	lds	r24, 0x00E2
    5fa4:	83 ff       	sbrs	r24, 3
    5fa6:	24 c0       	rjmp	.+72     	; 0x5ff0 <__vector_10+0x14e>
	{
		USB_INT_Clear(USB_INT_EORSTI);
    5fa8:	80 91 e1 00 	lds	r24, 0x00E1
    5fac:	87 7f       	andi	r24, 0xF7	; 247
    5fae:	80 93 e1 00 	sts	0x00E1, r24

		USB_DeviceState         = DEVICE_STATE_Default;
    5fb2:	82 e0       	ldi	r24, 0x02	; 2
    5fb4:	80 93 dd 04 	sts	0x04DD, r24
		USB_ConfigurationNumber = 0;
    5fb8:	10 92 db 04 	sts	0x04DB, r1

		USB_INT_Clear(USB_INT_SUSPEND);
    5fbc:	80 91 e1 00 	lds	r24, 0x00E1
    5fc0:	8e 7f       	andi	r24, 0xFE	; 254
    5fc2:	80 93 e1 00 	sts	0x00E1, r24
		USB_INT_Disable(USB_INT_SUSPEND);
    5fc6:	80 91 e2 00 	lds	r24, 0x00E2
    5fca:	8e 7f       	andi	r24, 0xFE	; 254
    5fcc:	80 93 e2 00 	sts	0x00E2, r24
		USB_INT_Enable(USB_INT_WAKEUP);
    5fd0:	80 91 e2 00 	lds	r24, 0x00E2
    5fd4:	80 61       	ori	r24, 0x10	; 16
    5fd6:	80 93 e2 00 	sts	0x00E2, r24

		Endpoint_ClearEndpoints();
    5fda:	9a dd       	rcall	.-1228   	; 0x5b10 <Endpoint_ClearEndpoints>

		Endpoint_ConfigureEndpoint(ENDPOINT_CONTROLEP, EP_TYPE_CONTROL,
    5fdc:	80 e0       	ldi	r24, 0x00	; 0
    5fde:	60 e0       	ldi	r22, 0x00	; 0
    5fe0:	42 e0       	ldi	r20, 0x02	; 2
    5fe2:	83 dd       	rcall	.-1274   	; 0x5aea <Endpoint_ConfigureEndpoint_Prv>
		                           ENDPOINT_DIR_OUT, USB_ControlEndpointSize,
		                           ENDPOINT_BANK_SINGLE);

		#if defined(INTERRUPT_CONTROL_ENDPOINT)
		USB_INT_Enable(USB_INT_RXSTPI);
    5fe4:	80 91 f0 00 	lds	r24, 0x00F0
    5fe8:	88 60       	ori	r24, 0x08	; 8
    5fea:	80 93 f0 00 	sts	0x00F0, r24
		#endif

		EVENT_USB_Device_Reset();
    5fee:	4b df       	rcall	.-362    	; 0x5e86 <USB_Event_Stub>
	}
	
	if (USB_INT_HasOccurred(USB_INT_SOFI) && USB_INT_IsEnabled(USB_INT_SOFI))
    5ff0:	80 91 e1 00 	lds	r24, 0x00E1
    5ff4:	82 ff       	sbrs	r24, 2
    5ff6:	0a c0       	rjmp	.+20     	; 0x600c <__vector_10+0x16a>
    5ff8:	80 91 e2 00 	lds	r24, 0x00E2
    5ffc:	82 ff       	sbrs	r24, 2
    5ffe:	06 c0       	rjmp	.+12     	; 0x600c <__vector_10+0x16a>
	{
		USB_INT_Clear(USB_INT_SOFI);
    6000:	80 91 e1 00 	lds	r24, 0x00E1
    6004:	8b 7f       	andi	r24, 0xFB	; 251
    6006:	80 93 e1 00 	sts	0x00E1, r24
		
		EVENT_USB_Device_StartOfFrame();
    600a:	3d df       	rcall	.-390    	; 0x5e86 <USB_Event_Stub>
		EVENT_USB_UIDChange();

		USB_ResetInterface();
	}
	#endif
}
    600c:	ff 91       	pop	r31
    600e:	ef 91       	pop	r30
    6010:	bf 91       	pop	r27
    6012:	af 91       	pop	r26
    6014:	9f 91       	pop	r25
    6016:	8f 91       	pop	r24
    6018:	7f 91       	pop	r23
    601a:	6f 91       	pop	r22
    601c:	5f 91       	pop	r21
    601e:	4f 91       	pop	r20
    6020:	3f 91       	pop	r19
    6022:	2f 91       	pop	r18
    6024:	0f 90       	pop	r0
    6026:	0f be       	out	0x3f, r0	; 63
    6028:	0f 90       	pop	r0
    602a:	1f 90       	pop	r1
    602c:	18 95       	reti

0000602e <__vector_11>:

#if defined(INTERRUPT_CONTROL_ENDPOINT) && defined(USB_CAN_BE_DEVICE)
ISR(USB_COM_vect, ISR_BLOCK)
{
    602e:	1f 92       	push	r1
    6030:	0f 92       	push	r0
    6032:	0f b6       	in	r0, 0x3f	; 63
    6034:	0f 92       	push	r0
    6036:	11 24       	eor	r1, r1
    6038:	1f 93       	push	r17
    603a:	2f 93       	push	r18
    603c:	3f 93       	push	r19
    603e:	4f 93       	push	r20
    6040:	5f 93       	push	r21
    6042:	6f 93       	push	r22
    6044:	7f 93       	push	r23
    6046:	8f 93       	push	r24
    6048:	9f 93       	push	r25
    604a:	af 93       	push	r26
    604c:	bf 93       	push	r27
    604e:	cf 93       	push	r28
    6050:	df 93       	push	r29
    6052:	ef 93       	push	r30
    6054:	ff 93       	push	r31
	uint8_t PrevSelectedEndpoint = Endpoint_GetCurrentEndpoint();
    6056:	c9 ee       	ldi	r28, 0xE9	; 233
    6058:	d0 e0       	ldi	r29, 0x00	; 0
    605a:	18 81       	ld	r17, Y
    605c:	17 70       	andi	r17, 0x07	; 7

	USB_USBTask();
    605e:	1a d0       	rcall	.+52     	; 0x6094 <USB_USBTask>

	USB_INT_Clear(USB_INT_RXSTPI);
    6060:	e8 ee       	ldi	r30, 0xE8	; 232
    6062:	f0 e0       	ldi	r31, 0x00	; 0
    6064:	80 81       	ld	r24, Z
    6066:	87 7f       	andi	r24, 0xF7	; 247
    6068:	80 83       	st	Z, r24
	
	Endpoint_SelectEndpoint(PrevSelectedEndpoint);
    606a:	18 83       	st	Y, r17
}
    606c:	ff 91       	pop	r31
    606e:	ef 91       	pop	r30
    6070:	df 91       	pop	r29
    6072:	cf 91       	pop	r28
    6074:	bf 91       	pop	r27
    6076:	af 91       	pop	r26
    6078:	9f 91       	pop	r25
    607a:	8f 91       	pop	r24
    607c:	7f 91       	pop	r23
    607e:	6f 91       	pop	r22
    6080:	5f 91       	pop	r21
    6082:	4f 91       	pop	r20
    6084:	3f 91       	pop	r19
    6086:	2f 91       	pop	r18
    6088:	1f 91       	pop	r17
    608a:	0f 90       	pop	r0
    608c:	0f be       	out	0x3f, r0	; 63
    608e:	0f 90       	pop	r0
    6090:	1f 90       	pop	r1
    6092:	18 95       	reti

00006094 <USB_USBTask>:
#if defined(USB_CAN_BE_DEVICE) && !defined(DEVICE_STATE_AS_GPIOR)
volatile uint8_t     USB_DeviceState;
#endif

void USB_USBTask(void)
{
    6094:	1f 93       	push	r17
}

#if defined(USB_CAN_BE_DEVICE)
static void USB_DeviceTask(void)
{
	if (USB_DeviceState != DEVICE_STATE_Unattached)
    6096:	80 91 dd 04 	lds	r24, 0x04DD
    609a:	88 23       	and	r24, r24
    609c:	61 f0       	breq	.+24     	; 0x60b6 <USB_USBTask+0x22>
	{
		uint8_t PrevEndpoint = Endpoint_GetCurrentEndpoint();
    609e:	10 91 e9 00 	lds	r17, 0x00E9
    60a2:	17 70       	andi	r17, 0x07	; 7
	
		Endpoint_SelectEndpoint(ENDPOINT_CONTROLEP);
    60a4:	10 92 e9 00 	sts	0x00E9, r1

		if (Endpoint_IsSETUPReceived())
    60a8:	80 91 e8 00 	lds	r24, 0x00E8
    60ac:	83 ff       	sbrs	r24, 3
    60ae:	01 c0       	rjmp	.+2      	; 0x60b2 <USB_USBTask+0x1e>
		  USB_Device_ProcessControlRequest();
    60b0:	f9 db       	rcall	.-2062   	; 0x58a4 <USB_Device_ProcessControlRequest>
		
		Endpoint_SelectEndpoint(PrevEndpoint);
    60b2:	10 93 e9 00 	sts	0x00E9, r17
		if (USB_CurrentMode == USB_MODE_DEVICE)
		  USB_DeviceTask();
		else if (USB_CurrentMode == USB_MODE_HOST)
		  USB_HostTask();
	#endif
}
    60b6:	1f 91       	pop	r17
    60b8:	08 95       	ret

000060ba <__subsf3>:
    60ba:	50 58       	subi	r21, 0x80	; 128

000060bc <__addsf3>:
    60bc:	bb 27       	eor	r27, r27
    60be:	aa 27       	eor	r26, r26
    60c0:	0e d0       	rcall	.+28     	; 0x60de <__addsf3x>
    60c2:	4d c1       	rjmp	.+666    	; 0x635e <__fp_round>
    60c4:	3e d1       	rcall	.+636    	; 0x6342 <__fp_pscA>
    60c6:	30 f0       	brcs	.+12     	; 0x60d4 <__addsf3+0x18>
    60c8:	43 d1       	rcall	.+646    	; 0x6350 <__fp_pscB>
    60ca:	20 f0       	brcs	.+8      	; 0x60d4 <__addsf3+0x18>
    60cc:	31 f4       	brne	.+12     	; 0x60da <__addsf3+0x1e>
    60ce:	9f 3f       	cpi	r25, 0xFF	; 255
    60d0:	11 f4       	brne	.+4      	; 0x60d6 <__addsf3+0x1a>
    60d2:	1e f4       	brtc	.+6      	; 0x60da <__addsf3+0x1e>
    60d4:	33 c1       	rjmp	.+614    	; 0x633c <__fp_nan>
    60d6:	0e f4       	brtc	.+2      	; 0x60da <__addsf3+0x1e>
    60d8:	e0 95       	com	r30
    60da:	e7 fb       	bst	r30, 7
    60dc:	29 c1       	rjmp	.+594    	; 0x6330 <__fp_inf>

000060de <__addsf3x>:
    60de:	e9 2f       	mov	r30, r25
    60e0:	4f d1       	rcall	.+670    	; 0x6380 <__fp_split3>
    60e2:	80 f3       	brcs	.-32     	; 0x60c4 <__addsf3+0x8>
    60e4:	ba 17       	cp	r27, r26
    60e6:	62 07       	cpc	r22, r18
    60e8:	73 07       	cpc	r23, r19
    60ea:	84 07       	cpc	r24, r20
    60ec:	95 07       	cpc	r25, r21
    60ee:	18 f0       	brcs	.+6      	; 0x60f6 <__addsf3x+0x18>
    60f0:	71 f4       	brne	.+28     	; 0x610e <__addsf3x+0x30>
    60f2:	9e f5       	brtc	.+102    	; 0x615a <__addsf3x+0x7c>
    60f4:	67 c1       	rjmp	.+718    	; 0x63c4 <__fp_zero>
    60f6:	0e f4       	brtc	.+2      	; 0x60fa <__addsf3x+0x1c>
    60f8:	e0 95       	com	r30
    60fa:	0b 2e       	mov	r0, r27
    60fc:	ba 2f       	mov	r27, r26
    60fe:	a0 2d       	mov	r26, r0
    6100:	0b 01       	movw	r0, r22
    6102:	b9 01       	movw	r22, r18
    6104:	90 01       	movw	r18, r0
    6106:	0c 01       	movw	r0, r24
    6108:	ca 01       	movw	r24, r20
    610a:	a0 01       	movw	r20, r0
    610c:	11 24       	eor	r1, r1
    610e:	ff 27       	eor	r31, r31
    6110:	59 1b       	sub	r21, r25
    6112:	99 f0       	breq	.+38     	; 0x613a <__addsf3x+0x5c>
    6114:	59 3f       	cpi	r21, 0xF9	; 249
    6116:	50 f4       	brcc	.+20     	; 0x612c <__addsf3x+0x4e>
    6118:	50 3e       	cpi	r21, 0xE0	; 224
    611a:	68 f1       	brcs	.+90     	; 0x6176 <__addsf3x+0x98>
    611c:	1a 16       	cp	r1, r26
    611e:	f0 40       	sbci	r31, 0x00	; 0
    6120:	a2 2f       	mov	r26, r18
    6122:	23 2f       	mov	r18, r19
    6124:	34 2f       	mov	r19, r20
    6126:	44 27       	eor	r20, r20
    6128:	58 5f       	subi	r21, 0xF8	; 248
    612a:	f3 cf       	rjmp	.-26     	; 0x6112 <__addsf3x+0x34>
    612c:	46 95       	lsr	r20
    612e:	37 95       	ror	r19
    6130:	27 95       	ror	r18
    6132:	a7 95       	ror	r26
    6134:	f0 40       	sbci	r31, 0x00	; 0
    6136:	53 95       	inc	r21
    6138:	c9 f7       	brne	.-14     	; 0x612c <__addsf3x+0x4e>
    613a:	7e f4       	brtc	.+30     	; 0x615a <__addsf3x+0x7c>
    613c:	1f 16       	cp	r1, r31
    613e:	ba 0b       	sbc	r27, r26
    6140:	62 0b       	sbc	r22, r18
    6142:	73 0b       	sbc	r23, r19
    6144:	84 0b       	sbc	r24, r20
    6146:	ba f0       	brmi	.+46     	; 0x6176 <__addsf3x+0x98>
    6148:	91 50       	subi	r25, 0x01	; 1
    614a:	a1 f0       	breq	.+40     	; 0x6174 <__addsf3x+0x96>
    614c:	ff 0f       	add	r31, r31
    614e:	bb 1f       	adc	r27, r27
    6150:	66 1f       	adc	r22, r22
    6152:	77 1f       	adc	r23, r23
    6154:	88 1f       	adc	r24, r24
    6156:	c2 f7       	brpl	.-16     	; 0x6148 <__addsf3x+0x6a>
    6158:	0e c0       	rjmp	.+28     	; 0x6176 <__addsf3x+0x98>
    615a:	ba 0f       	add	r27, r26
    615c:	62 1f       	adc	r22, r18
    615e:	73 1f       	adc	r23, r19
    6160:	84 1f       	adc	r24, r20
    6162:	48 f4       	brcc	.+18     	; 0x6176 <__addsf3x+0x98>
    6164:	87 95       	ror	r24
    6166:	77 95       	ror	r23
    6168:	67 95       	ror	r22
    616a:	b7 95       	ror	r27
    616c:	f7 95       	ror	r31
    616e:	9e 3f       	cpi	r25, 0xFE	; 254
    6170:	08 f0       	brcs	.+2      	; 0x6174 <__addsf3x+0x96>
    6172:	b3 cf       	rjmp	.-154    	; 0x60da <__addsf3+0x1e>
    6174:	93 95       	inc	r25
    6176:	88 0f       	add	r24, r24
    6178:	08 f0       	brcs	.+2      	; 0x617c <__addsf3x+0x9e>
    617a:	99 27       	eor	r25, r25
    617c:	ee 0f       	add	r30, r30
    617e:	97 95       	ror	r25
    6180:	87 95       	ror	r24
    6182:	08 95       	ret

00006184 <__divsf3>:
    6184:	0c d0       	rcall	.+24     	; 0x619e <__divsf3x>
    6186:	eb c0       	rjmp	.+470    	; 0x635e <__fp_round>
    6188:	e3 d0       	rcall	.+454    	; 0x6350 <__fp_pscB>
    618a:	40 f0       	brcs	.+16     	; 0x619c <__divsf3+0x18>
    618c:	da d0       	rcall	.+436    	; 0x6342 <__fp_pscA>
    618e:	30 f0       	brcs	.+12     	; 0x619c <__divsf3+0x18>
    6190:	21 f4       	brne	.+8      	; 0x619a <__divsf3+0x16>
    6192:	5f 3f       	cpi	r21, 0xFF	; 255
    6194:	19 f0       	breq	.+6      	; 0x619c <__divsf3+0x18>
    6196:	cc c0       	rjmp	.+408    	; 0x6330 <__fp_inf>
    6198:	51 11       	cpse	r21, r1
    619a:	15 c1       	rjmp	.+554    	; 0x63c6 <__fp_szero>
    619c:	cf c0       	rjmp	.+414    	; 0x633c <__fp_nan>

0000619e <__divsf3x>:
    619e:	f0 d0       	rcall	.+480    	; 0x6380 <__fp_split3>
    61a0:	98 f3       	brcs	.-26     	; 0x6188 <__divsf3+0x4>

000061a2 <__divsf3_pse>:
    61a2:	99 23       	and	r25, r25
    61a4:	c9 f3       	breq	.-14     	; 0x6198 <__divsf3+0x14>
    61a6:	55 23       	and	r21, r21
    61a8:	b1 f3       	breq	.-20     	; 0x6196 <__divsf3+0x12>
    61aa:	95 1b       	sub	r25, r21
    61ac:	55 0b       	sbc	r21, r21
    61ae:	bb 27       	eor	r27, r27
    61b0:	aa 27       	eor	r26, r26
    61b2:	62 17       	cp	r22, r18
    61b4:	73 07       	cpc	r23, r19
    61b6:	84 07       	cpc	r24, r20
    61b8:	38 f0       	brcs	.+14     	; 0x61c8 <__divsf3_pse+0x26>
    61ba:	9f 5f       	subi	r25, 0xFF	; 255
    61bc:	5f 4f       	sbci	r21, 0xFF	; 255
    61be:	22 0f       	add	r18, r18
    61c0:	33 1f       	adc	r19, r19
    61c2:	44 1f       	adc	r20, r20
    61c4:	aa 1f       	adc	r26, r26
    61c6:	a9 f3       	breq	.-22     	; 0x61b2 <__divsf3_pse+0x10>
    61c8:	33 d0       	rcall	.+102    	; 0x6230 <__divsf3_pse+0x8e>
    61ca:	0e 2e       	mov	r0, r30
    61cc:	3a f0       	brmi	.+14     	; 0x61dc <__divsf3_pse+0x3a>
    61ce:	e0 e8       	ldi	r30, 0x80	; 128
    61d0:	30 d0       	rcall	.+96     	; 0x6232 <__divsf3_pse+0x90>
    61d2:	91 50       	subi	r25, 0x01	; 1
    61d4:	50 40       	sbci	r21, 0x00	; 0
    61d6:	e6 95       	lsr	r30
    61d8:	00 1c       	adc	r0, r0
    61da:	ca f7       	brpl	.-14     	; 0x61ce <__divsf3_pse+0x2c>
    61dc:	29 d0       	rcall	.+82     	; 0x6230 <__divsf3_pse+0x8e>
    61de:	fe 2f       	mov	r31, r30
    61e0:	27 d0       	rcall	.+78     	; 0x6230 <__divsf3_pse+0x8e>
    61e2:	66 0f       	add	r22, r22
    61e4:	77 1f       	adc	r23, r23
    61e6:	88 1f       	adc	r24, r24
    61e8:	bb 1f       	adc	r27, r27
    61ea:	26 17       	cp	r18, r22
    61ec:	37 07       	cpc	r19, r23
    61ee:	48 07       	cpc	r20, r24
    61f0:	ab 07       	cpc	r26, r27
    61f2:	b0 e8       	ldi	r27, 0x80	; 128
    61f4:	09 f0       	breq	.+2      	; 0x61f8 <__divsf3_pse+0x56>
    61f6:	bb 0b       	sbc	r27, r27
    61f8:	80 2d       	mov	r24, r0
    61fa:	bf 01       	movw	r22, r30
    61fc:	ff 27       	eor	r31, r31
    61fe:	93 58       	subi	r25, 0x83	; 131
    6200:	5f 4f       	sbci	r21, 0xFF	; 255
    6202:	2a f0       	brmi	.+10     	; 0x620e <__divsf3_pse+0x6c>
    6204:	9e 3f       	cpi	r25, 0xFE	; 254
    6206:	51 05       	cpc	r21, r1
    6208:	68 f0       	brcs	.+26     	; 0x6224 <__divsf3_pse+0x82>
    620a:	92 c0       	rjmp	.+292    	; 0x6330 <__fp_inf>
    620c:	dc c0       	rjmp	.+440    	; 0x63c6 <__fp_szero>
    620e:	5f 3f       	cpi	r21, 0xFF	; 255
    6210:	ec f3       	brlt	.-6      	; 0x620c <__divsf3_pse+0x6a>
    6212:	98 3e       	cpi	r25, 0xE8	; 232
    6214:	dc f3       	brlt	.-10     	; 0x620c <__divsf3_pse+0x6a>
    6216:	86 95       	lsr	r24
    6218:	77 95       	ror	r23
    621a:	67 95       	ror	r22
    621c:	b7 95       	ror	r27
    621e:	f7 95       	ror	r31
    6220:	9f 5f       	subi	r25, 0xFF	; 255
    6222:	c9 f7       	brne	.-14     	; 0x6216 <__divsf3_pse+0x74>
    6224:	88 0f       	add	r24, r24
    6226:	91 1d       	adc	r25, r1
    6228:	96 95       	lsr	r25
    622a:	87 95       	ror	r24
    622c:	97 f9       	bld	r25, 7
    622e:	08 95       	ret
    6230:	e1 e0       	ldi	r30, 0x01	; 1
    6232:	66 0f       	add	r22, r22
    6234:	77 1f       	adc	r23, r23
    6236:	88 1f       	adc	r24, r24
    6238:	bb 1f       	adc	r27, r27
    623a:	62 17       	cp	r22, r18
    623c:	73 07       	cpc	r23, r19
    623e:	84 07       	cpc	r24, r20
    6240:	ba 07       	cpc	r27, r26
    6242:	20 f0       	brcs	.+8      	; 0x624c <__divsf3_pse+0xaa>
    6244:	62 1b       	sub	r22, r18
    6246:	73 0b       	sbc	r23, r19
    6248:	84 0b       	sbc	r24, r20
    624a:	ba 0b       	sbc	r27, r26
    624c:	ee 1f       	adc	r30, r30
    624e:	88 f7       	brcc	.-30     	; 0x6232 <__divsf3_pse+0x90>
    6250:	e0 95       	com	r30
    6252:	08 95       	ret

00006254 <__fixsfsi>:
    6254:	04 d0       	rcall	.+8      	; 0x625e <__fixunssfsi>
    6256:	68 94       	set
    6258:	b1 11       	cpse	r27, r1
    625a:	b5 c0       	rjmp	.+362    	; 0x63c6 <__fp_szero>
    625c:	08 95       	ret

0000625e <__fixunssfsi>:
    625e:	98 d0       	rcall	.+304    	; 0x6390 <__fp_splitA>
    6260:	88 f0       	brcs	.+34     	; 0x6284 <__fixunssfsi+0x26>
    6262:	9f 57       	subi	r25, 0x7F	; 127
    6264:	90 f0       	brcs	.+36     	; 0x628a <__fixunssfsi+0x2c>
    6266:	b9 2f       	mov	r27, r25
    6268:	99 27       	eor	r25, r25
    626a:	b7 51       	subi	r27, 0x17	; 23
    626c:	a0 f0       	brcs	.+40     	; 0x6296 <__fixunssfsi+0x38>
    626e:	d1 f0       	breq	.+52     	; 0x62a4 <__fixunssfsi+0x46>
    6270:	66 0f       	add	r22, r22
    6272:	77 1f       	adc	r23, r23
    6274:	88 1f       	adc	r24, r24
    6276:	99 1f       	adc	r25, r25
    6278:	1a f0       	brmi	.+6      	; 0x6280 <__fixunssfsi+0x22>
    627a:	ba 95       	dec	r27
    627c:	c9 f7       	brne	.-14     	; 0x6270 <__fixunssfsi+0x12>
    627e:	12 c0       	rjmp	.+36     	; 0x62a4 <__fixunssfsi+0x46>
    6280:	b1 30       	cpi	r27, 0x01	; 1
    6282:	81 f0       	breq	.+32     	; 0x62a4 <__fixunssfsi+0x46>
    6284:	9f d0       	rcall	.+318    	; 0x63c4 <__fp_zero>
    6286:	b1 e0       	ldi	r27, 0x01	; 1
    6288:	08 95       	ret
    628a:	9c c0       	rjmp	.+312    	; 0x63c4 <__fp_zero>
    628c:	67 2f       	mov	r22, r23
    628e:	78 2f       	mov	r23, r24
    6290:	88 27       	eor	r24, r24
    6292:	b8 5f       	subi	r27, 0xF8	; 248
    6294:	39 f0       	breq	.+14     	; 0x62a4 <__fixunssfsi+0x46>
    6296:	b9 3f       	cpi	r27, 0xF9	; 249
    6298:	cc f3       	brlt	.-14     	; 0x628c <__fixunssfsi+0x2e>
    629a:	86 95       	lsr	r24
    629c:	77 95       	ror	r23
    629e:	67 95       	ror	r22
    62a0:	b3 95       	inc	r27
    62a2:	d9 f7       	brne	.-10     	; 0x629a <__fixunssfsi+0x3c>
    62a4:	3e f4       	brtc	.+14     	; 0x62b4 <__fixunssfsi+0x56>
    62a6:	90 95       	com	r25
    62a8:	80 95       	com	r24
    62aa:	70 95       	com	r23
    62ac:	61 95       	neg	r22
    62ae:	7f 4f       	sbci	r23, 0xFF	; 255
    62b0:	8f 4f       	sbci	r24, 0xFF	; 255
    62b2:	9f 4f       	sbci	r25, 0xFF	; 255
    62b4:	08 95       	ret

000062b6 <__floatunsisf>:
    62b6:	e8 94       	clt
    62b8:	09 c0       	rjmp	.+18     	; 0x62cc <__floatsisf+0x12>

000062ba <__floatsisf>:
    62ba:	97 fb       	bst	r25, 7
    62bc:	3e f4       	brtc	.+14     	; 0x62cc <__floatsisf+0x12>
    62be:	90 95       	com	r25
    62c0:	80 95       	com	r24
    62c2:	70 95       	com	r23
    62c4:	61 95       	neg	r22
    62c6:	7f 4f       	sbci	r23, 0xFF	; 255
    62c8:	8f 4f       	sbci	r24, 0xFF	; 255
    62ca:	9f 4f       	sbci	r25, 0xFF	; 255
    62cc:	99 23       	and	r25, r25
    62ce:	a9 f0       	breq	.+42     	; 0x62fa <__floatsisf+0x40>
    62d0:	f9 2f       	mov	r31, r25
    62d2:	96 e9       	ldi	r25, 0x96	; 150
    62d4:	bb 27       	eor	r27, r27
    62d6:	93 95       	inc	r25
    62d8:	f6 95       	lsr	r31
    62da:	87 95       	ror	r24
    62dc:	77 95       	ror	r23
    62de:	67 95       	ror	r22
    62e0:	b7 95       	ror	r27
    62e2:	f1 11       	cpse	r31, r1
    62e4:	f8 cf       	rjmp	.-16     	; 0x62d6 <__floatsisf+0x1c>
    62e6:	fa f4       	brpl	.+62     	; 0x6326 <__floatsisf+0x6c>
    62e8:	bb 0f       	add	r27, r27
    62ea:	11 f4       	brne	.+4      	; 0x62f0 <__floatsisf+0x36>
    62ec:	60 ff       	sbrs	r22, 0
    62ee:	1b c0       	rjmp	.+54     	; 0x6326 <__floatsisf+0x6c>
    62f0:	6f 5f       	subi	r22, 0xFF	; 255
    62f2:	7f 4f       	sbci	r23, 0xFF	; 255
    62f4:	8f 4f       	sbci	r24, 0xFF	; 255
    62f6:	9f 4f       	sbci	r25, 0xFF	; 255
    62f8:	16 c0       	rjmp	.+44     	; 0x6326 <__floatsisf+0x6c>
    62fa:	88 23       	and	r24, r24
    62fc:	11 f0       	breq	.+4      	; 0x6302 <__floatsisf+0x48>
    62fe:	96 e9       	ldi	r25, 0x96	; 150
    6300:	11 c0       	rjmp	.+34     	; 0x6324 <__floatsisf+0x6a>
    6302:	77 23       	and	r23, r23
    6304:	21 f0       	breq	.+8      	; 0x630e <__floatsisf+0x54>
    6306:	9e e8       	ldi	r25, 0x8E	; 142
    6308:	87 2f       	mov	r24, r23
    630a:	76 2f       	mov	r23, r22
    630c:	05 c0       	rjmp	.+10     	; 0x6318 <__floatsisf+0x5e>
    630e:	66 23       	and	r22, r22
    6310:	71 f0       	breq	.+28     	; 0x632e <__floatsisf+0x74>
    6312:	96 e8       	ldi	r25, 0x86	; 134
    6314:	86 2f       	mov	r24, r22
    6316:	70 e0       	ldi	r23, 0x00	; 0
    6318:	60 e0       	ldi	r22, 0x00	; 0
    631a:	2a f0       	brmi	.+10     	; 0x6326 <__floatsisf+0x6c>
    631c:	9a 95       	dec	r25
    631e:	66 0f       	add	r22, r22
    6320:	77 1f       	adc	r23, r23
    6322:	88 1f       	adc	r24, r24
    6324:	da f7       	brpl	.-10     	; 0x631c <__floatsisf+0x62>
    6326:	88 0f       	add	r24, r24
    6328:	96 95       	lsr	r25
    632a:	87 95       	ror	r24
    632c:	97 f9       	bld	r25, 7
    632e:	08 95       	ret

00006330 <__fp_inf>:
    6330:	97 f9       	bld	r25, 7
    6332:	9f 67       	ori	r25, 0x7F	; 127
    6334:	80 e8       	ldi	r24, 0x80	; 128
    6336:	70 e0       	ldi	r23, 0x00	; 0
    6338:	60 e0       	ldi	r22, 0x00	; 0
    633a:	08 95       	ret

0000633c <__fp_nan>:
    633c:	9f ef       	ldi	r25, 0xFF	; 255
    633e:	80 ec       	ldi	r24, 0xC0	; 192
    6340:	08 95       	ret

00006342 <__fp_pscA>:
    6342:	00 24       	eor	r0, r0
    6344:	0a 94       	dec	r0
    6346:	16 16       	cp	r1, r22
    6348:	17 06       	cpc	r1, r23
    634a:	18 06       	cpc	r1, r24
    634c:	09 06       	cpc	r0, r25
    634e:	08 95       	ret

00006350 <__fp_pscB>:
    6350:	00 24       	eor	r0, r0
    6352:	0a 94       	dec	r0
    6354:	12 16       	cp	r1, r18
    6356:	13 06       	cpc	r1, r19
    6358:	14 06       	cpc	r1, r20
    635a:	05 06       	cpc	r0, r21
    635c:	08 95       	ret

0000635e <__fp_round>:
    635e:	09 2e       	mov	r0, r25
    6360:	03 94       	inc	r0
    6362:	00 0c       	add	r0, r0
    6364:	11 f4       	brne	.+4      	; 0x636a <__fp_round+0xc>
    6366:	88 23       	and	r24, r24
    6368:	52 f0       	brmi	.+20     	; 0x637e <__fp_round+0x20>
    636a:	bb 0f       	add	r27, r27
    636c:	40 f4       	brcc	.+16     	; 0x637e <__fp_round+0x20>
    636e:	bf 2b       	or	r27, r31
    6370:	11 f4       	brne	.+4      	; 0x6376 <__fp_round+0x18>
    6372:	60 ff       	sbrs	r22, 0
    6374:	04 c0       	rjmp	.+8      	; 0x637e <__fp_round+0x20>
    6376:	6f 5f       	subi	r22, 0xFF	; 255
    6378:	7f 4f       	sbci	r23, 0xFF	; 255
    637a:	8f 4f       	sbci	r24, 0xFF	; 255
    637c:	9f 4f       	sbci	r25, 0xFF	; 255
    637e:	08 95       	ret

00006380 <__fp_split3>:
    6380:	57 fd       	sbrc	r21, 7
    6382:	90 58       	subi	r25, 0x80	; 128
    6384:	44 0f       	add	r20, r20
    6386:	55 1f       	adc	r21, r21
    6388:	59 f0       	breq	.+22     	; 0x63a0 <__fp_splitA+0x10>
    638a:	5f 3f       	cpi	r21, 0xFF	; 255
    638c:	71 f0       	breq	.+28     	; 0x63aa <__fp_splitA+0x1a>
    638e:	47 95       	ror	r20

00006390 <__fp_splitA>:
    6390:	88 0f       	add	r24, r24
    6392:	97 fb       	bst	r25, 7
    6394:	99 1f       	adc	r25, r25
    6396:	61 f0       	breq	.+24     	; 0x63b0 <__fp_splitA+0x20>
    6398:	9f 3f       	cpi	r25, 0xFF	; 255
    639a:	79 f0       	breq	.+30     	; 0x63ba <__fp_splitA+0x2a>
    639c:	87 95       	ror	r24
    639e:	08 95       	ret
    63a0:	12 16       	cp	r1, r18
    63a2:	13 06       	cpc	r1, r19
    63a4:	14 06       	cpc	r1, r20
    63a6:	55 1f       	adc	r21, r21
    63a8:	f2 cf       	rjmp	.-28     	; 0x638e <__fp_split3+0xe>
    63aa:	46 95       	lsr	r20
    63ac:	f1 df       	rcall	.-30     	; 0x6390 <__fp_splitA>
    63ae:	08 c0       	rjmp	.+16     	; 0x63c0 <__fp_splitA+0x30>
    63b0:	16 16       	cp	r1, r22
    63b2:	17 06       	cpc	r1, r23
    63b4:	18 06       	cpc	r1, r24
    63b6:	99 1f       	adc	r25, r25
    63b8:	f1 cf       	rjmp	.-30     	; 0x639c <__fp_splitA+0xc>
    63ba:	86 95       	lsr	r24
    63bc:	71 05       	cpc	r23, r1
    63be:	61 05       	cpc	r22, r1
    63c0:	08 94       	sec
    63c2:	08 95       	ret

000063c4 <__fp_zero>:
    63c4:	e8 94       	clt

000063c6 <__fp_szero>:
    63c6:	bb 27       	eor	r27, r27
    63c8:	66 27       	eor	r22, r22
    63ca:	77 27       	eor	r23, r23
    63cc:	cb 01       	movw	r24, r22
    63ce:	97 f9       	bld	r25, 7
    63d0:	08 95       	ret

000063d2 <__mulsf3>:
    63d2:	0b d0       	rcall	.+22     	; 0x63ea <__mulsf3x>
    63d4:	c4 cf       	rjmp	.-120    	; 0x635e <__fp_round>
    63d6:	b5 df       	rcall	.-150    	; 0x6342 <__fp_pscA>
    63d8:	28 f0       	brcs	.+10     	; 0x63e4 <__mulsf3+0x12>
    63da:	ba df       	rcall	.-140    	; 0x6350 <__fp_pscB>
    63dc:	18 f0       	brcs	.+6      	; 0x63e4 <__mulsf3+0x12>
    63de:	95 23       	and	r25, r21
    63e0:	09 f0       	breq	.+2      	; 0x63e4 <__mulsf3+0x12>
    63e2:	a6 cf       	rjmp	.-180    	; 0x6330 <__fp_inf>
    63e4:	ab cf       	rjmp	.-170    	; 0x633c <__fp_nan>
    63e6:	11 24       	eor	r1, r1
    63e8:	ee cf       	rjmp	.-36     	; 0x63c6 <__fp_szero>

000063ea <__mulsf3x>:
    63ea:	ca df       	rcall	.-108    	; 0x6380 <__fp_split3>
    63ec:	a0 f3       	brcs	.-24     	; 0x63d6 <__mulsf3+0x4>

000063ee <__mulsf3_pse>:
    63ee:	95 9f       	mul	r25, r21
    63f0:	d1 f3       	breq	.-12     	; 0x63e6 <__mulsf3+0x14>
    63f2:	95 0f       	add	r25, r21
    63f4:	50 e0       	ldi	r21, 0x00	; 0
    63f6:	55 1f       	adc	r21, r21
    63f8:	62 9f       	mul	r22, r18
    63fa:	f0 01       	movw	r30, r0
    63fc:	72 9f       	mul	r23, r18
    63fe:	bb 27       	eor	r27, r27
    6400:	f0 0d       	add	r31, r0
    6402:	b1 1d       	adc	r27, r1
    6404:	63 9f       	mul	r22, r19
    6406:	aa 27       	eor	r26, r26
    6408:	f0 0d       	add	r31, r0
    640a:	b1 1d       	adc	r27, r1
    640c:	aa 1f       	adc	r26, r26
    640e:	64 9f       	mul	r22, r20
    6410:	66 27       	eor	r22, r22
    6412:	b0 0d       	add	r27, r0
    6414:	a1 1d       	adc	r26, r1
    6416:	66 1f       	adc	r22, r22
    6418:	82 9f       	mul	r24, r18
    641a:	22 27       	eor	r18, r18
    641c:	b0 0d       	add	r27, r0
    641e:	a1 1d       	adc	r26, r1
    6420:	62 1f       	adc	r22, r18
    6422:	73 9f       	mul	r23, r19
    6424:	b0 0d       	add	r27, r0
    6426:	a1 1d       	adc	r26, r1
    6428:	62 1f       	adc	r22, r18
    642a:	83 9f       	mul	r24, r19
    642c:	a0 0d       	add	r26, r0
    642e:	61 1d       	adc	r22, r1
    6430:	22 1f       	adc	r18, r18
    6432:	74 9f       	mul	r23, r20
    6434:	33 27       	eor	r19, r19
    6436:	a0 0d       	add	r26, r0
    6438:	61 1d       	adc	r22, r1
    643a:	23 1f       	adc	r18, r19
    643c:	84 9f       	mul	r24, r20
    643e:	60 0d       	add	r22, r0
    6440:	21 1d       	adc	r18, r1
    6442:	82 2f       	mov	r24, r18
    6444:	76 2f       	mov	r23, r22
    6446:	6a 2f       	mov	r22, r26
    6448:	11 24       	eor	r1, r1
    644a:	9f 57       	subi	r25, 0x7F	; 127
    644c:	50 40       	sbci	r21, 0x00	; 0
    644e:	8a f0       	brmi	.+34     	; 0x6472 <__mulsf3_pse+0x84>
    6450:	e1 f0       	breq	.+56     	; 0x648a <__mulsf3_pse+0x9c>
    6452:	88 23       	and	r24, r24
    6454:	4a f0       	brmi	.+18     	; 0x6468 <__mulsf3_pse+0x7a>
    6456:	ee 0f       	add	r30, r30
    6458:	ff 1f       	adc	r31, r31
    645a:	bb 1f       	adc	r27, r27
    645c:	66 1f       	adc	r22, r22
    645e:	77 1f       	adc	r23, r23
    6460:	88 1f       	adc	r24, r24
    6462:	91 50       	subi	r25, 0x01	; 1
    6464:	50 40       	sbci	r21, 0x00	; 0
    6466:	a9 f7       	brne	.-22     	; 0x6452 <__mulsf3_pse+0x64>
    6468:	9e 3f       	cpi	r25, 0xFE	; 254
    646a:	51 05       	cpc	r21, r1
    646c:	70 f0       	brcs	.+28     	; 0x648a <__mulsf3_pse+0x9c>
    646e:	60 cf       	rjmp	.-320    	; 0x6330 <__fp_inf>
    6470:	aa cf       	rjmp	.-172    	; 0x63c6 <__fp_szero>
    6472:	5f 3f       	cpi	r21, 0xFF	; 255
    6474:	ec f3       	brlt	.-6      	; 0x6470 <__mulsf3_pse+0x82>
    6476:	98 3e       	cpi	r25, 0xE8	; 232
    6478:	dc f3       	brlt	.-10     	; 0x6470 <__mulsf3_pse+0x82>
    647a:	86 95       	lsr	r24
    647c:	77 95       	ror	r23
    647e:	67 95       	ror	r22
    6480:	b7 95       	ror	r27
    6482:	f7 95       	ror	r31
    6484:	e7 95       	ror	r30
    6486:	9f 5f       	subi	r25, 0xFF	; 255
    6488:	c1 f7       	brne	.-16     	; 0x647a <__mulsf3_pse+0x8c>
    648a:	fe 2b       	or	r31, r30
    648c:	88 0f       	add	r24, r24
    648e:	91 1d       	adc	r25, r1
    6490:	96 95       	lsr	r25
    6492:	87 95       	ror	r24
    6494:	97 f9       	bld	r25, 7
    6496:	08 95       	ret

00006498 <__mulsi3>:
    6498:	62 9f       	mul	r22, r18
    649a:	d0 01       	movw	r26, r0
    649c:	73 9f       	mul	r23, r19
    649e:	f0 01       	movw	r30, r0
    64a0:	82 9f       	mul	r24, r18
    64a2:	e0 0d       	add	r30, r0
    64a4:	f1 1d       	adc	r31, r1
    64a6:	64 9f       	mul	r22, r20
    64a8:	e0 0d       	add	r30, r0
    64aa:	f1 1d       	adc	r31, r1
    64ac:	92 9f       	mul	r25, r18
    64ae:	f0 0d       	add	r31, r0
    64b0:	83 9f       	mul	r24, r19
    64b2:	f0 0d       	add	r31, r0
    64b4:	74 9f       	mul	r23, r20
    64b6:	f0 0d       	add	r31, r0
    64b8:	65 9f       	mul	r22, r21
    64ba:	f0 0d       	add	r31, r0
    64bc:	99 27       	eor	r25, r25
    64be:	72 9f       	mul	r23, r18
    64c0:	b0 0d       	add	r27, r0
    64c2:	e1 1d       	adc	r30, r1
    64c4:	f9 1f       	adc	r31, r25
    64c6:	63 9f       	mul	r22, r19
    64c8:	b0 0d       	add	r27, r0
    64ca:	e1 1d       	adc	r30, r1
    64cc:	f9 1f       	adc	r31, r25
    64ce:	bd 01       	movw	r22, r26
    64d0:	cf 01       	movw	r24, r30
    64d2:	11 24       	eor	r1, r1
    64d4:	08 95       	ret

000064d6 <__udivmodhi4>:
    64d6:	aa 1b       	sub	r26, r26
    64d8:	bb 1b       	sub	r27, r27
    64da:	51 e1       	ldi	r21, 0x11	; 17
    64dc:	07 c0       	rjmp	.+14     	; 0x64ec <__udivmodhi4_ep>

000064de <__udivmodhi4_loop>:
    64de:	aa 1f       	adc	r26, r26
    64e0:	bb 1f       	adc	r27, r27
    64e2:	a6 17       	cp	r26, r22
    64e4:	b7 07       	cpc	r27, r23
    64e6:	10 f0       	brcs	.+4      	; 0x64ec <__udivmodhi4_ep>
    64e8:	a6 1b       	sub	r26, r22
    64ea:	b7 0b       	sbc	r27, r23

000064ec <__udivmodhi4_ep>:
    64ec:	88 1f       	adc	r24, r24
    64ee:	99 1f       	adc	r25, r25
    64f0:	5a 95       	dec	r21
    64f2:	a9 f7       	brne	.-22     	; 0x64de <__udivmodhi4_loop>
    64f4:	80 95       	com	r24
    64f6:	90 95       	com	r25
    64f8:	bc 01       	movw	r22, r24
    64fa:	cd 01       	movw	r24, r26
    64fc:	08 95       	ret

000064fe <__divmodhi4>:
    64fe:	97 fb       	bst	r25, 7
    6500:	09 2e       	mov	r0, r25
    6502:	07 26       	eor	r0, r23
    6504:	0a d0       	rcall	.+20     	; 0x651a <__divmodhi4_neg1>
    6506:	77 fd       	sbrc	r23, 7
    6508:	04 d0       	rcall	.+8      	; 0x6512 <__divmodhi4_neg2>
    650a:	e5 df       	rcall	.-54     	; 0x64d6 <__udivmodhi4>
    650c:	06 d0       	rcall	.+12     	; 0x651a <__divmodhi4_neg1>
    650e:	00 20       	and	r0, r0
    6510:	1a f4       	brpl	.+6      	; 0x6518 <__divmodhi4_exit>

00006512 <__divmodhi4_neg2>:
    6512:	70 95       	com	r23
    6514:	61 95       	neg	r22
    6516:	7f 4f       	sbci	r23, 0xFF	; 255

00006518 <__divmodhi4_exit>:
    6518:	08 95       	ret

0000651a <__divmodhi4_neg1>:
    651a:	f6 f7       	brtc	.-4      	; 0x6518 <__divmodhi4_exit>
    651c:	90 95       	com	r25
    651e:	81 95       	neg	r24
    6520:	9f 4f       	sbci	r25, 0xFF	; 255
    6522:	08 95       	ret

00006524 <__udivmodsi4>:
    6524:	a1 e2       	ldi	r26, 0x21	; 33
    6526:	1a 2e       	mov	r1, r26
    6528:	aa 1b       	sub	r26, r26
    652a:	bb 1b       	sub	r27, r27
    652c:	fd 01       	movw	r30, r26
    652e:	0d c0       	rjmp	.+26     	; 0x654a <__udivmodsi4_ep>

00006530 <__udivmodsi4_loop>:
    6530:	aa 1f       	adc	r26, r26
    6532:	bb 1f       	adc	r27, r27
    6534:	ee 1f       	adc	r30, r30
    6536:	ff 1f       	adc	r31, r31
    6538:	a2 17       	cp	r26, r18
    653a:	b3 07       	cpc	r27, r19
    653c:	e4 07       	cpc	r30, r20
    653e:	f5 07       	cpc	r31, r21
    6540:	20 f0       	brcs	.+8      	; 0x654a <__udivmodsi4_ep>
    6542:	a2 1b       	sub	r26, r18
    6544:	b3 0b       	sbc	r27, r19
    6546:	e4 0b       	sbc	r30, r20
    6548:	f5 0b       	sbc	r31, r21

0000654a <__udivmodsi4_ep>:
    654a:	66 1f       	adc	r22, r22
    654c:	77 1f       	adc	r23, r23
    654e:	88 1f       	adc	r24, r24
    6550:	99 1f       	adc	r25, r25
    6552:	1a 94       	dec	r1
    6554:	69 f7       	brne	.-38     	; 0x6530 <__udivmodsi4_loop>
    6556:	60 95       	com	r22
    6558:	70 95       	com	r23
    655a:	80 95       	com	r24
    655c:	90 95       	com	r25
    655e:	9b 01       	movw	r18, r22
    6560:	ac 01       	movw	r20, r24
    6562:	bd 01       	movw	r22, r26
    6564:	cf 01       	movw	r24, r30
    6566:	08 95       	ret

00006568 <__prologue_saves__>:
    6568:	2f 92       	push	r2
    656a:	3f 92       	push	r3
    656c:	4f 92       	push	r4
    656e:	5f 92       	push	r5
    6570:	6f 92       	push	r6
    6572:	7f 92       	push	r7
    6574:	8f 92       	push	r8
    6576:	9f 92       	push	r9
    6578:	af 92       	push	r10
    657a:	bf 92       	push	r11
    657c:	cf 92       	push	r12
    657e:	df 92       	push	r13
    6580:	ef 92       	push	r14
    6582:	ff 92       	push	r15
    6584:	0f 93       	push	r16
    6586:	1f 93       	push	r17
    6588:	cf 93       	push	r28
    658a:	df 93       	push	r29
    658c:	cd b7       	in	r28, 0x3d	; 61
    658e:	de b7       	in	r29, 0x3e	; 62
    6590:	ca 1b       	sub	r28, r26
    6592:	db 0b       	sbc	r29, r27
    6594:	0f b6       	in	r0, 0x3f	; 63
    6596:	f8 94       	cli
    6598:	de bf       	out	0x3e, r29	; 62
    659a:	0f be       	out	0x3f, r0	; 63
    659c:	cd bf       	out	0x3d, r28	; 61
    659e:	09 94       	ijmp

000065a0 <__epilogue_restores__>:
    65a0:	2a 88       	ldd	r2, Y+18	; 0x12
    65a2:	39 88       	ldd	r3, Y+17	; 0x11
    65a4:	48 88       	ldd	r4, Y+16	; 0x10
    65a6:	5f 84       	ldd	r5, Y+15	; 0x0f
    65a8:	6e 84       	ldd	r6, Y+14	; 0x0e
    65aa:	7d 84       	ldd	r7, Y+13	; 0x0d
    65ac:	8c 84       	ldd	r8, Y+12	; 0x0c
    65ae:	9b 84       	ldd	r9, Y+11	; 0x0b
    65b0:	aa 84       	ldd	r10, Y+10	; 0x0a
    65b2:	b9 84       	ldd	r11, Y+9	; 0x09
    65b4:	c8 84       	ldd	r12, Y+8	; 0x08
    65b6:	df 80       	ldd	r13, Y+7	; 0x07
    65b8:	ee 80       	ldd	r14, Y+6	; 0x06
    65ba:	fd 80       	ldd	r15, Y+5	; 0x05
    65bc:	0c 81       	ldd	r16, Y+4	; 0x04
    65be:	1b 81       	ldd	r17, Y+3	; 0x03
    65c0:	aa 81       	ldd	r26, Y+2	; 0x02
    65c2:	b9 81       	ldd	r27, Y+1	; 0x01
    65c4:	ce 0f       	add	r28, r30
    65c6:	d1 1d       	adc	r29, r1
    65c8:	0f b6       	in	r0, 0x3f	; 63
    65ca:	f8 94       	cli
    65cc:	de bf       	out	0x3e, r29	; 62
    65ce:	0f be       	out	0x3f, r0	; 63
    65d0:	cd bf       	out	0x3d, r28	; 61
    65d2:	ed 01       	movw	r28, r26
    65d4:	08 95       	ret

000065d6 <memcpy>:
    65d6:	fb 01       	movw	r30, r22
    65d8:	dc 01       	movw	r26, r24
    65da:	02 c0       	rjmp	.+4      	; 0x65e0 <memcpy+0xa>
    65dc:	01 90       	ld	r0, Z+
    65de:	0d 92       	st	X+, r0
    65e0:	41 50       	subi	r20, 0x01	; 1
    65e2:	50 40       	sbci	r21, 0x00	; 0
    65e4:	d8 f7       	brcc	.-10     	; 0x65dc <memcpy+0x6>
    65e6:	08 95       	ret

000065e8 <memset>:
    65e8:	dc 01       	movw	r26, r24
    65ea:	01 c0       	rjmp	.+2      	; 0x65ee <memset+0x6>
    65ec:	6d 93       	st	X+, r22
    65ee:	41 50       	subi	r20, 0x01	; 1
    65f0:	50 40       	sbci	r21, 0x00	; 0
    65f2:	e0 f7       	brcc	.-8      	; 0x65ec <memset+0x4>
    65f4:	08 95       	ret

000065f6 <strchr>:
    65f6:	fc 01       	movw	r30, r24
    65f8:	81 91       	ld	r24, Z+
    65fa:	86 17       	cp	r24, r22
    65fc:	21 f0       	breq	.+8      	; 0x6606 <strchr+0x10>
    65fe:	88 23       	and	r24, r24
    6600:	d9 f7       	brne	.-10     	; 0x65f8 <strchr+0x2>
    6602:	99 27       	eor	r25, r25
    6604:	08 95       	ret
    6606:	31 97       	sbiw	r30, 0x01	; 1
    6608:	cf 01       	movw	r24, r30
    660a:	08 95       	ret

0000660c <strcmp>:
    660c:	fb 01       	movw	r30, r22
    660e:	dc 01       	movw	r26, r24
    6610:	8d 91       	ld	r24, X+
    6612:	01 90       	ld	r0, Z+
    6614:	80 19       	sub	r24, r0
    6616:	01 10       	cpse	r0, r1
    6618:	d9 f3       	breq	.-10     	; 0x6610 <strcmp+0x4>
    661a:	99 0b       	sbc	r25, r25
    661c:	08 95       	ret

0000661e <strncmp>:
    661e:	fb 01       	movw	r30, r22
    6620:	dc 01       	movw	r26, r24
    6622:	41 50       	subi	r20, 0x01	; 1
    6624:	50 40       	sbci	r21, 0x00	; 0
    6626:	30 f0       	brcs	.+12     	; 0x6634 <strncmp+0x16>
    6628:	8d 91       	ld	r24, X+
    662a:	01 90       	ld	r0, Z+
    662c:	80 19       	sub	r24, r0
    662e:	19 f4       	brne	.+6      	; 0x6636 <strncmp+0x18>
    6630:	00 20       	and	r0, r0
    6632:	b9 f7       	brne	.-18     	; 0x6622 <strncmp+0x4>
    6634:	88 1b       	sub	r24, r24
    6636:	99 0b       	sbc	r25, r25
    6638:	08 95       	ret

0000663a <strncpy>:
    663a:	fb 01       	movw	r30, r22
    663c:	dc 01       	movw	r26, r24
    663e:	41 50       	subi	r20, 0x01	; 1
    6640:	50 40       	sbci	r21, 0x00	; 0
    6642:	48 f0       	brcs	.+18     	; 0x6656 <strncpy+0x1c>
    6644:	01 90       	ld	r0, Z+
    6646:	0d 92       	st	X+, r0
    6648:	00 20       	and	r0, r0
    664a:	c9 f7       	brne	.-14     	; 0x663e <strncpy+0x4>
    664c:	01 c0       	rjmp	.+2      	; 0x6650 <strncpy+0x16>
    664e:	1d 92       	st	X+, r1
    6650:	41 50       	subi	r20, 0x01	; 1
    6652:	50 40       	sbci	r21, 0x00	; 0
    6654:	e0 f7       	brcc	.-8      	; 0x664e <strncpy+0x14>
    6656:	08 95       	ret

00006658 <strrchr>:
    6658:	fc 01       	movw	r30, r24
    665a:	81 e0       	ldi	r24, 0x01	; 1
    665c:	90 e0       	ldi	r25, 0x00	; 0
    665e:	01 90       	ld	r0, Z+
    6660:	06 16       	cp	r0, r22
    6662:	09 f4       	brne	.+2      	; 0x6666 <strrchr+0xe>
    6664:	cf 01       	movw	r24, r30
    6666:	00 20       	and	r0, r0
    6668:	d1 f7       	brne	.-12     	; 0x665e <strrchr+0x6>
    666a:	01 97       	sbiw	r24, 0x01	; 1
    666c:	08 95       	ret

0000666e <printf>:
    666e:	a0 e0       	ldi	r26, 0x00	; 0
    6670:	b0 e0       	ldi	r27, 0x00	; 0
    6672:	ec e3       	ldi	r30, 0x3C	; 60
    6674:	f3 e3       	ldi	r31, 0x33	; 51
    6676:	88 cf       	rjmp	.-240    	; 0x6588 <__prologue_saves__+0x20>
    6678:	fe 01       	movw	r30, r28
    667a:	35 96       	adiw	r30, 0x05	; 5
    667c:	61 91       	ld	r22, Z+
    667e:	71 91       	ld	r23, Z+
    6680:	80 91 e8 04 	lds	r24, 0x04E8
    6684:	90 91 e9 04 	lds	r25, 0x04E9
    6688:	af 01       	movw	r20, r30
    668a:	77 d0       	rcall	.+238    	; 0x677a <vfprintf>
    668c:	20 96       	adiw	r28, 0x00	; 0
    668e:	e2 e0       	ldi	r30, 0x02	; 2
    6690:	97 cf       	rjmp	.-210    	; 0x65c0 <__epilogue_restores__+0x20>

00006692 <printf_P>:
    6692:	a0 e0       	ldi	r26, 0x00	; 0
    6694:	b0 e0       	ldi	r27, 0x00	; 0
    6696:	ee e4       	ldi	r30, 0x4E	; 78
    6698:	f3 e3       	ldi	r31, 0x33	; 51
    669a:	76 cf       	rjmp	.-276    	; 0x6588 <__prologue_saves__+0x20>
    669c:	fe 01       	movw	r30, r28
    669e:	35 96       	adiw	r30, 0x05	; 5
    66a0:	61 91       	ld	r22, Z+
    66a2:	71 91       	ld	r23, Z+
    66a4:	80 91 e8 04 	lds	r24, 0x04E8
    66a8:	90 91 e9 04 	lds	r25, 0x04E9
    66ac:	dc 01       	movw	r26, r24
    66ae:	13 96       	adiw	r26, 0x03	; 3
    66b0:	2c 91       	ld	r18, X
    66b2:	13 97       	sbiw	r26, 0x03	; 3
    66b4:	28 60       	ori	r18, 0x08	; 8
    66b6:	13 96       	adiw	r26, 0x03	; 3
    66b8:	2c 93       	st	X, r18
    66ba:	af 01       	movw	r20, r30
    66bc:	5e d0       	rcall	.+188    	; 0x677a <vfprintf>
    66be:	e0 91 e8 04 	lds	r30, 0x04E8
    66c2:	f0 91 e9 04 	lds	r31, 0x04E9
    66c6:	23 81       	ldd	r18, Z+3	; 0x03
    66c8:	27 7f       	andi	r18, 0xF7	; 247
    66ca:	23 83       	std	Z+3, r18	; 0x03
    66cc:	20 96       	adiw	r28, 0x00	; 0
    66ce:	e2 e0       	ldi	r30, 0x02	; 2
    66d0:	77 cf       	rjmp	.-274    	; 0x65c0 <__epilogue_restores__+0x20>

000066d2 <puts>:
    66d2:	ef 92       	push	r14
    66d4:	ff 92       	push	r15
    66d6:	0f 93       	push	r16
    66d8:	1f 93       	push	r17
    66da:	cf 93       	push	r28
    66dc:	df 93       	push	r29
    66de:	8c 01       	movw	r16, r24
    66e0:	e0 91 e8 04 	lds	r30, 0x04E8
    66e4:	f0 91 e9 04 	lds	r31, 0x04E9
    66e8:	83 81       	ldd	r24, Z+3	; 0x03
    66ea:	81 ff       	sbrs	r24, 1
    66ec:	1f c0       	rjmp	.+62     	; 0x672c <puts+0x5a>
    66ee:	c0 e0       	ldi	r28, 0x00	; 0
    66f0:	d0 e0       	ldi	r29, 0x00	; 0
    66f2:	0a c0       	rjmp	.+20     	; 0x6708 <puts+0x36>
    66f4:	db 01       	movw	r26, r22
    66f6:	18 96       	adiw	r26, 0x08	; 8
    66f8:	ed 91       	ld	r30, X+
    66fa:	fc 91       	ld	r31, X
    66fc:	19 97       	sbiw	r26, 0x09	; 9
    66fe:	09 95       	icall
    6700:	00 97       	sbiw	r24, 0x00	; 0
    6702:	11 f0       	breq	.+4      	; 0x6708 <puts+0x36>
    6704:	cf ef       	ldi	r28, 0xFF	; 255
    6706:	df ef       	ldi	r29, 0xFF	; 255
    6708:	f8 01       	movw	r30, r16
    670a:	81 91       	ld	r24, Z+
    670c:	8f 01       	movw	r16, r30
    670e:	60 91 e8 04 	lds	r22, 0x04E8
    6712:	70 91 e9 04 	lds	r23, 0x04E9
    6716:	88 23       	and	r24, r24
    6718:	69 f7       	brne	.-38     	; 0x66f4 <puts+0x22>
    671a:	db 01       	movw	r26, r22
    671c:	18 96       	adiw	r26, 0x08	; 8
    671e:	ed 91       	ld	r30, X+
    6720:	fc 91       	ld	r31, X
    6722:	19 97       	sbiw	r26, 0x09	; 9
    6724:	8a e0       	ldi	r24, 0x0A	; 10
    6726:	09 95       	icall
    6728:	00 97       	sbiw	r24, 0x00	; 0
    672a:	11 f0       	breq	.+4      	; 0x6730 <puts+0x5e>
    672c:	cf ef       	ldi	r28, 0xFF	; 255
    672e:	df ef       	ldi	r29, 0xFF	; 255
    6730:	ce 01       	movw	r24, r28
    6732:	cd b7       	in	r28, 0x3d	; 61
    6734:	de b7       	in	r29, 0x3e	; 62
    6736:	e6 e0       	ldi	r30, 0x06	; 6
    6738:	3f cf       	rjmp	.-386    	; 0x65b8 <__epilogue_restores__+0x18>

0000673a <sprintf>:
    673a:	ae e0       	ldi	r26, 0x0E	; 14
    673c:	b0 e0       	ldi	r27, 0x00	; 0
    673e:	e2 ea       	ldi	r30, 0xA2	; 162
    6740:	f3 e3       	ldi	r31, 0x33	; 51
    6742:	20 cf       	rjmp	.-448    	; 0x6584 <__prologue_saves__+0x1c>
    6744:	0d 89       	ldd	r16, Y+21	; 0x15
    6746:	1e 89       	ldd	r17, Y+22	; 0x16
    6748:	86 e0       	ldi	r24, 0x06	; 6
    674a:	8c 83       	std	Y+4, r24	; 0x04
    674c:	1a 83       	std	Y+2, r17	; 0x02
    674e:	09 83       	std	Y+1, r16	; 0x01
    6750:	8f ef       	ldi	r24, 0xFF	; 255
    6752:	9f e7       	ldi	r25, 0x7F	; 127
    6754:	9e 83       	std	Y+6, r25	; 0x06
    6756:	8d 83       	std	Y+5, r24	; 0x05
    6758:	9e 01       	movw	r18, r28
    675a:	27 5e       	subi	r18, 0xE7	; 231
    675c:	3f 4f       	sbci	r19, 0xFF	; 255
    675e:	ce 01       	movw	r24, r28
    6760:	01 96       	adiw	r24, 0x01	; 1
    6762:	6f 89       	ldd	r22, Y+23	; 0x17
    6764:	78 8d       	ldd	r23, Y+24	; 0x18
    6766:	a9 01       	movw	r20, r18
    6768:	08 d0       	rcall	.+16     	; 0x677a <vfprintf>
    676a:	ef 81       	ldd	r30, Y+7	; 0x07
    676c:	f8 85       	ldd	r31, Y+8	; 0x08
    676e:	e0 0f       	add	r30, r16
    6770:	f1 1f       	adc	r31, r17
    6772:	10 82       	st	Z, r1
    6774:	2e 96       	adiw	r28, 0x0e	; 14
    6776:	e4 e0       	ldi	r30, 0x04	; 4
    6778:	21 cf       	rjmp	.-446    	; 0x65bc <__epilogue_restores__+0x1c>

0000677a <vfprintf>:
    677a:	ac e0       	ldi	r26, 0x0C	; 12
    677c:	b0 e0       	ldi	r27, 0x00	; 0
    677e:	e2 ec       	ldi	r30, 0xC2	; 194
    6780:	f3 e3       	ldi	r31, 0x33	; 51
    6782:	f2 ce       	rjmp	.-540    	; 0x6568 <__prologue_saves__>
    6784:	6c 01       	movw	r12, r24
    6786:	1b 01       	movw	r2, r22
    6788:	8a 01       	movw	r16, r20
    678a:	fc 01       	movw	r30, r24
    678c:	17 82       	std	Z+7, r1	; 0x07
    678e:	16 82       	std	Z+6, r1	; 0x06
    6790:	83 81       	ldd	r24, Z+3	; 0x03
    6792:	81 ff       	sbrs	r24, 1
    6794:	c4 c1       	rjmp	.+904    	; 0x6b1e <vfprintf+0x3a4>
    6796:	2e 01       	movw	r4, r28
    6798:	08 94       	sec
    679a:	41 1c       	adc	r4, r1
    679c:	51 1c       	adc	r5, r1
    679e:	f6 01       	movw	r30, r12
    67a0:	93 81       	ldd	r25, Z+3	; 0x03
    67a2:	f1 01       	movw	r30, r2
    67a4:	93 fd       	sbrc	r25, 3
    67a6:	85 91       	lpm	r24, Z+
    67a8:	93 ff       	sbrs	r25, 3
    67aa:	81 91       	ld	r24, Z+
    67ac:	1f 01       	movw	r2, r30
    67ae:	88 23       	and	r24, r24
    67b0:	09 f4       	brne	.+2      	; 0x67b4 <vfprintf+0x3a>
    67b2:	b1 c1       	rjmp	.+866    	; 0x6b16 <vfprintf+0x39c>
    67b4:	85 32       	cpi	r24, 0x25	; 37
    67b6:	39 f4       	brne	.+14     	; 0x67c6 <vfprintf+0x4c>
    67b8:	93 fd       	sbrc	r25, 3
    67ba:	85 91       	lpm	r24, Z+
    67bc:	93 ff       	sbrs	r25, 3
    67be:	81 91       	ld	r24, Z+
    67c0:	1f 01       	movw	r2, r30
    67c2:	85 32       	cpi	r24, 0x25	; 37
    67c4:	21 f4       	brne	.+8      	; 0x67ce <vfprintf+0x54>
    67c6:	90 e0       	ldi	r25, 0x00	; 0
    67c8:	b6 01       	movw	r22, r12
    67ca:	c5 d1       	rcall	.+906    	; 0x6b56 <fputc>
    67cc:	e8 cf       	rjmp	.-48     	; 0x679e <vfprintf+0x24>
    67ce:	ee 24       	eor	r14, r14
    67d0:	ff 24       	eor	r15, r15
    67d2:	20 e0       	ldi	r18, 0x00	; 0
    67d4:	20 32       	cpi	r18, 0x20	; 32
    67d6:	b0 f4       	brcc	.+44     	; 0x6804 <vfprintf+0x8a>
    67d8:	8b 32       	cpi	r24, 0x2B	; 43
    67da:	69 f0       	breq	.+26     	; 0x67f6 <vfprintf+0x7c>
    67dc:	8c 32       	cpi	r24, 0x2C	; 44
    67de:	28 f4       	brcc	.+10     	; 0x67ea <vfprintf+0x70>
    67e0:	80 32       	cpi	r24, 0x20	; 32
    67e2:	51 f0       	breq	.+20     	; 0x67f8 <vfprintf+0x7e>
    67e4:	83 32       	cpi	r24, 0x23	; 35
    67e6:	71 f4       	brne	.+28     	; 0x6804 <vfprintf+0x8a>
    67e8:	0b c0       	rjmp	.+22     	; 0x6800 <vfprintf+0x86>
    67ea:	8d 32       	cpi	r24, 0x2D	; 45
    67ec:	39 f0       	breq	.+14     	; 0x67fc <vfprintf+0x82>
    67ee:	80 33       	cpi	r24, 0x30	; 48
    67f0:	49 f4       	brne	.+18     	; 0x6804 <vfprintf+0x8a>
    67f2:	21 60       	ori	r18, 0x01	; 1
    67f4:	2c c0       	rjmp	.+88     	; 0x684e <vfprintf+0xd4>
    67f6:	22 60       	ori	r18, 0x02	; 2
    67f8:	24 60       	ori	r18, 0x04	; 4
    67fa:	29 c0       	rjmp	.+82     	; 0x684e <vfprintf+0xd4>
    67fc:	28 60       	ori	r18, 0x08	; 8
    67fe:	27 c0       	rjmp	.+78     	; 0x684e <vfprintf+0xd4>
    6800:	20 61       	ori	r18, 0x10	; 16
    6802:	25 c0       	rjmp	.+74     	; 0x684e <vfprintf+0xd4>
    6804:	27 fd       	sbrc	r18, 7
    6806:	2c c0       	rjmp	.+88     	; 0x6860 <vfprintf+0xe6>
    6808:	38 2f       	mov	r19, r24
    680a:	30 53       	subi	r19, 0x30	; 48
    680c:	3a 30       	cpi	r19, 0x0A	; 10
    680e:	98 f4       	brcc	.+38     	; 0x6836 <vfprintf+0xbc>
    6810:	26 ff       	sbrs	r18, 6
    6812:	08 c0       	rjmp	.+16     	; 0x6824 <vfprintf+0xaa>
    6814:	8e 2d       	mov	r24, r14
    6816:	88 0f       	add	r24, r24
    6818:	e8 2e       	mov	r14, r24
    681a:	ee 0c       	add	r14, r14
    681c:	ee 0c       	add	r14, r14
    681e:	e8 0e       	add	r14, r24
    6820:	e3 0e       	add	r14, r19
    6822:	15 c0       	rjmp	.+42     	; 0x684e <vfprintf+0xd4>
    6824:	8f 2d       	mov	r24, r15
    6826:	88 0f       	add	r24, r24
    6828:	f8 2e       	mov	r15, r24
    682a:	ff 0c       	add	r15, r15
    682c:	ff 0c       	add	r15, r15
    682e:	f8 0e       	add	r15, r24
    6830:	f3 0e       	add	r15, r19
    6832:	20 62       	ori	r18, 0x20	; 32
    6834:	0c c0       	rjmp	.+24     	; 0x684e <vfprintf+0xd4>
    6836:	8e 32       	cpi	r24, 0x2E	; 46
    6838:	21 f4       	brne	.+8      	; 0x6842 <vfprintf+0xc8>
    683a:	26 fd       	sbrc	r18, 6
    683c:	6c c1       	rjmp	.+728    	; 0x6b16 <vfprintf+0x39c>
    683e:	20 64       	ori	r18, 0x40	; 64
    6840:	06 c0       	rjmp	.+12     	; 0x684e <vfprintf+0xd4>
    6842:	8c 36       	cpi	r24, 0x6C	; 108
    6844:	11 f4       	brne	.+4      	; 0x684a <vfprintf+0xd0>
    6846:	20 68       	ori	r18, 0x80	; 128
    6848:	02 c0       	rjmp	.+4      	; 0x684e <vfprintf+0xd4>
    684a:	88 36       	cpi	r24, 0x68	; 104
    684c:	49 f4       	brne	.+18     	; 0x6860 <vfprintf+0xe6>
    684e:	f1 01       	movw	r30, r2
    6850:	93 fd       	sbrc	r25, 3
    6852:	85 91       	lpm	r24, Z+
    6854:	93 ff       	sbrs	r25, 3
    6856:	81 91       	ld	r24, Z+
    6858:	1f 01       	movw	r2, r30
    685a:	88 23       	and	r24, r24
    685c:	09 f0       	breq	.+2      	; 0x6860 <vfprintf+0xe6>
    685e:	ba cf       	rjmp	.-140    	; 0x67d4 <vfprintf+0x5a>
    6860:	98 2f       	mov	r25, r24
    6862:	95 54       	subi	r25, 0x45	; 69
    6864:	93 30       	cpi	r25, 0x03	; 3
    6866:	18 f0       	brcs	.+6      	; 0x686e <vfprintf+0xf4>
    6868:	90 52       	subi	r25, 0x20	; 32
    686a:	93 30       	cpi	r25, 0x03	; 3
    686c:	28 f4       	brcc	.+10     	; 0x6878 <vfprintf+0xfe>
    686e:	0c 5f       	subi	r16, 0xFC	; 252
    6870:	1f 4f       	sbci	r17, 0xFF	; 255
    6872:	ff e3       	ldi	r31, 0x3F	; 63
    6874:	f9 83       	std	Y+1, r31	; 0x01
    6876:	0d c0       	rjmp	.+26     	; 0x6892 <vfprintf+0x118>
    6878:	83 36       	cpi	r24, 0x63	; 99
    687a:	31 f0       	breq	.+12     	; 0x6888 <vfprintf+0x10e>
    687c:	83 37       	cpi	r24, 0x73	; 115
    687e:	71 f0       	breq	.+28     	; 0x689c <vfprintf+0x122>
    6880:	83 35       	cpi	r24, 0x53	; 83
    6882:	09 f0       	breq	.+2      	; 0x6886 <vfprintf+0x10c>
    6884:	5c c0       	rjmp	.+184    	; 0x693e <vfprintf+0x1c4>
    6886:	21 c0       	rjmp	.+66     	; 0x68ca <vfprintf+0x150>
    6888:	f8 01       	movw	r30, r16
    688a:	80 81       	ld	r24, Z
    688c:	89 83       	std	Y+1, r24	; 0x01
    688e:	0e 5f       	subi	r16, 0xFE	; 254
    6890:	1f 4f       	sbci	r17, 0xFF	; 255
    6892:	42 01       	movw	r8, r4
    6894:	71 e0       	ldi	r23, 0x01	; 1
    6896:	a7 2e       	mov	r10, r23
    6898:	b1 2c       	mov	r11, r1
    689a:	15 c0       	rjmp	.+42     	; 0x68c6 <vfprintf+0x14c>
    689c:	62 e0       	ldi	r22, 0x02	; 2
    689e:	66 2e       	mov	r6, r22
    68a0:	71 2c       	mov	r7, r1
    68a2:	60 0e       	add	r6, r16
    68a4:	71 1e       	adc	r7, r17
    68a6:	f8 01       	movw	r30, r16
    68a8:	80 80       	ld	r8, Z
    68aa:	91 80       	ldd	r9, Z+1	; 0x01
    68ac:	26 ff       	sbrs	r18, 6
    68ae:	03 c0       	rjmp	.+6      	; 0x68b6 <vfprintf+0x13c>
    68b0:	6e 2d       	mov	r22, r14
    68b2:	70 e0       	ldi	r23, 0x00	; 0
    68b4:	02 c0       	rjmp	.+4      	; 0x68ba <vfprintf+0x140>
    68b6:	6f ef       	ldi	r22, 0xFF	; 255
    68b8:	7f ef       	ldi	r23, 0xFF	; 255
    68ba:	c4 01       	movw	r24, r8
    68bc:	2c 87       	std	Y+12, r18	; 0x0c
    68be:	40 d1       	rcall	.+640    	; 0x6b40 <strnlen>
    68c0:	5c 01       	movw	r10, r24
    68c2:	83 01       	movw	r16, r6
    68c4:	2c 85       	ldd	r18, Y+12	; 0x0c
    68c6:	2f 77       	andi	r18, 0x7F	; 127
    68c8:	16 c0       	rjmp	.+44     	; 0x68f6 <vfprintf+0x17c>
    68ca:	52 e0       	ldi	r21, 0x02	; 2
    68cc:	65 2e       	mov	r6, r21
    68ce:	71 2c       	mov	r7, r1
    68d0:	60 0e       	add	r6, r16
    68d2:	71 1e       	adc	r7, r17
    68d4:	f8 01       	movw	r30, r16
    68d6:	80 80       	ld	r8, Z
    68d8:	91 80       	ldd	r9, Z+1	; 0x01
    68da:	26 ff       	sbrs	r18, 6
    68dc:	03 c0       	rjmp	.+6      	; 0x68e4 <vfprintf+0x16a>
    68de:	6e 2d       	mov	r22, r14
    68e0:	70 e0       	ldi	r23, 0x00	; 0
    68e2:	02 c0       	rjmp	.+4      	; 0x68e8 <vfprintf+0x16e>
    68e4:	6f ef       	ldi	r22, 0xFF	; 255
    68e6:	7f ef       	ldi	r23, 0xFF	; 255
    68e8:	c4 01       	movw	r24, r8
    68ea:	2c 87       	std	Y+12, r18	; 0x0c
    68ec:	1e d1       	rcall	.+572    	; 0x6b2a <strnlen_P>
    68ee:	5c 01       	movw	r10, r24
    68f0:	2c 85       	ldd	r18, Y+12	; 0x0c
    68f2:	20 68       	ori	r18, 0x80	; 128
    68f4:	83 01       	movw	r16, r6
    68f6:	23 fd       	sbrc	r18, 3
    68f8:	1e c0       	rjmp	.+60     	; 0x6936 <vfprintf+0x1bc>
    68fa:	07 c0       	rjmp	.+14     	; 0x690a <vfprintf+0x190>
    68fc:	80 e2       	ldi	r24, 0x20	; 32
    68fe:	90 e0       	ldi	r25, 0x00	; 0
    6900:	b6 01       	movw	r22, r12
    6902:	2c 87       	std	Y+12, r18	; 0x0c
    6904:	28 d1       	rcall	.+592    	; 0x6b56 <fputc>
    6906:	fa 94       	dec	r15
    6908:	2c 85       	ldd	r18, Y+12	; 0x0c
    690a:	8f 2d       	mov	r24, r15
    690c:	90 e0       	ldi	r25, 0x00	; 0
    690e:	a8 16       	cp	r10, r24
    6910:	b9 06       	cpc	r11, r25
    6912:	a0 f3       	brcs	.-24     	; 0x68fc <vfprintf+0x182>
    6914:	10 c0       	rjmp	.+32     	; 0x6936 <vfprintf+0x1bc>
    6916:	f4 01       	movw	r30, r8
    6918:	27 fd       	sbrc	r18, 7
    691a:	85 91       	lpm	r24, Z+
    691c:	27 ff       	sbrs	r18, 7
    691e:	81 91       	ld	r24, Z+
    6920:	4f 01       	movw	r8, r30
    6922:	90 e0       	ldi	r25, 0x00	; 0
    6924:	b6 01       	movw	r22, r12
    6926:	2c 87       	std	Y+12, r18	; 0x0c
    6928:	16 d1       	rcall	.+556    	; 0x6b56 <fputc>
    692a:	2c 85       	ldd	r18, Y+12	; 0x0c
    692c:	f1 10       	cpse	r15, r1
    692e:	fa 94       	dec	r15
    6930:	08 94       	sec
    6932:	a1 08       	sbc	r10, r1
    6934:	b1 08       	sbc	r11, r1
    6936:	a1 14       	cp	r10, r1
    6938:	b1 04       	cpc	r11, r1
    693a:	69 f7       	brne	.-38     	; 0x6916 <vfprintf+0x19c>
    693c:	e9 c0       	rjmp	.+466    	; 0x6b10 <vfprintf+0x396>
    693e:	84 36       	cpi	r24, 0x64	; 100
    6940:	11 f0       	breq	.+4      	; 0x6946 <vfprintf+0x1cc>
    6942:	89 36       	cpi	r24, 0x69	; 105
    6944:	41 f5       	brne	.+80     	; 0x6996 <vfprintf+0x21c>
    6946:	27 ff       	sbrs	r18, 7
    6948:	08 c0       	rjmp	.+16     	; 0x695a <vfprintf+0x1e0>
    694a:	f8 01       	movw	r30, r16
    694c:	60 81       	ld	r22, Z
    694e:	71 81       	ldd	r23, Z+1	; 0x01
    6950:	82 81       	ldd	r24, Z+2	; 0x02
    6952:	93 81       	ldd	r25, Z+3	; 0x03
    6954:	0c 5f       	subi	r16, 0xFC	; 252
    6956:	1f 4f       	sbci	r17, 0xFF	; 255
    6958:	09 c0       	rjmp	.+18     	; 0x696c <vfprintf+0x1f2>
    695a:	f8 01       	movw	r30, r16
    695c:	60 81       	ld	r22, Z
    695e:	71 81       	ldd	r23, Z+1	; 0x01
    6960:	88 27       	eor	r24, r24
    6962:	77 fd       	sbrc	r23, 7
    6964:	80 95       	com	r24
    6966:	98 2f       	mov	r25, r24
    6968:	0e 5f       	subi	r16, 0xFE	; 254
    696a:	1f 4f       	sbci	r17, 0xFF	; 255
    696c:	4f e6       	ldi	r20, 0x6F	; 111
    696e:	b4 2e       	mov	r11, r20
    6970:	b2 22       	and	r11, r18
    6972:	97 ff       	sbrs	r25, 7
    6974:	09 c0       	rjmp	.+18     	; 0x6988 <vfprintf+0x20e>
    6976:	90 95       	com	r25
    6978:	80 95       	com	r24
    697a:	70 95       	com	r23
    697c:	61 95       	neg	r22
    697e:	7f 4f       	sbci	r23, 0xFF	; 255
    6980:	8f 4f       	sbci	r24, 0xFF	; 255
    6982:	9f 4f       	sbci	r25, 0xFF	; 255
    6984:	f0 e8       	ldi	r31, 0x80	; 128
    6986:	bf 2a       	or	r11, r31
    6988:	a2 01       	movw	r20, r4
    698a:	2a e0       	ldi	r18, 0x0A	; 10
    698c:	30 e0       	ldi	r19, 0x00	; 0
    698e:	0f d1       	rcall	.+542    	; 0x6bae <__ultoa_invert>
    6990:	78 2e       	mov	r7, r24
    6992:	74 18       	sub	r7, r4
    6994:	44 c0       	rjmp	.+136    	; 0x6a1e <vfprintf+0x2a4>
    6996:	85 37       	cpi	r24, 0x75	; 117
    6998:	31 f4       	brne	.+12     	; 0x69a6 <vfprintf+0x22c>
    699a:	3f ee       	ldi	r19, 0xEF	; 239
    699c:	b3 2e       	mov	r11, r19
    699e:	b2 22       	and	r11, r18
    69a0:	2a e0       	ldi	r18, 0x0A	; 10
    69a2:	30 e0       	ldi	r19, 0x00	; 0
    69a4:	25 c0       	rjmp	.+74     	; 0x69f0 <vfprintf+0x276>
    69a6:	99 ef       	ldi	r25, 0xF9	; 249
    69a8:	b9 2e       	mov	r11, r25
    69aa:	b2 22       	and	r11, r18
    69ac:	8f 36       	cpi	r24, 0x6F	; 111
    69ae:	c1 f0       	breq	.+48     	; 0x69e0 <vfprintf+0x266>
    69b0:	80 37       	cpi	r24, 0x70	; 112
    69b2:	20 f4       	brcc	.+8      	; 0x69bc <vfprintf+0x242>
    69b4:	88 35       	cpi	r24, 0x58	; 88
    69b6:	09 f0       	breq	.+2      	; 0x69ba <vfprintf+0x240>
    69b8:	ae c0       	rjmp	.+348    	; 0x6b16 <vfprintf+0x39c>
    69ba:	0d c0       	rjmp	.+26     	; 0x69d6 <vfprintf+0x25c>
    69bc:	80 37       	cpi	r24, 0x70	; 112
    69be:	21 f0       	breq	.+8      	; 0x69c8 <vfprintf+0x24e>
    69c0:	88 37       	cpi	r24, 0x78	; 120
    69c2:	09 f0       	breq	.+2      	; 0x69c6 <vfprintf+0x24c>
    69c4:	a8 c0       	rjmp	.+336    	; 0x6b16 <vfprintf+0x39c>
    69c6:	02 c0       	rjmp	.+4      	; 0x69cc <vfprintf+0x252>
    69c8:	20 e1       	ldi	r18, 0x10	; 16
    69ca:	b2 2a       	or	r11, r18
    69cc:	b4 fe       	sbrs	r11, 4
    69ce:	0b c0       	rjmp	.+22     	; 0x69e6 <vfprintf+0x26c>
    69d0:	84 e0       	ldi	r24, 0x04	; 4
    69d2:	b8 2a       	or	r11, r24
    69d4:	08 c0       	rjmp	.+16     	; 0x69e6 <vfprintf+0x26c>
    69d6:	b4 fe       	sbrs	r11, 4
    69d8:	09 c0       	rjmp	.+18     	; 0x69ec <vfprintf+0x272>
    69da:	e6 e0       	ldi	r30, 0x06	; 6
    69dc:	be 2a       	or	r11, r30
    69de:	06 c0       	rjmp	.+12     	; 0x69ec <vfprintf+0x272>
    69e0:	28 e0       	ldi	r18, 0x08	; 8
    69e2:	30 e0       	ldi	r19, 0x00	; 0
    69e4:	05 c0       	rjmp	.+10     	; 0x69f0 <vfprintf+0x276>
    69e6:	20 e1       	ldi	r18, 0x10	; 16
    69e8:	30 e0       	ldi	r19, 0x00	; 0
    69ea:	02 c0       	rjmp	.+4      	; 0x69f0 <vfprintf+0x276>
    69ec:	20 e1       	ldi	r18, 0x10	; 16
    69ee:	32 e0       	ldi	r19, 0x02	; 2
    69f0:	b7 fe       	sbrs	r11, 7
    69f2:	08 c0       	rjmp	.+16     	; 0x6a04 <vfprintf+0x28a>
    69f4:	f8 01       	movw	r30, r16
    69f6:	60 81       	ld	r22, Z
    69f8:	71 81       	ldd	r23, Z+1	; 0x01
    69fa:	82 81       	ldd	r24, Z+2	; 0x02
    69fc:	93 81       	ldd	r25, Z+3	; 0x03
    69fe:	0c 5f       	subi	r16, 0xFC	; 252
    6a00:	1f 4f       	sbci	r17, 0xFF	; 255
    6a02:	07 c0       	rjmp	.+14     	; 0x6a12 <vfprintf+0x298>
    6a04:	f8 01       	movw	r30, r16
    6a06:	60 81       	ld	r22, Z
    6a08:	71 81       	ldd	r23, Z+1	; 0x01
    6a0a:	80 e0       	ldi	r24, 0x00	; 0
    6a0c:	90 e0       	ldi	r25, 0x00	; 0
    6a0e:	0e 5f       	subi	r16, 0xFE	; 254
    6a10:	1f 4f       	sbci	r17, 0xFF	; 255
    6a12:	a2 01       	movw	r20, r4
    6a14:	cc d0       	rcall	.+408    	; 0x6bae <__ultoa_invert>
    6a16:	78 2e       	mov	r7, r24
    6a18:	74 18       	sub	r7, r4
    6a1a:	ff e7       	ldi	r31, 0x7F	; 127
    6a1c:	bf 22       	and	r11, r31
    6a1e:	b6 fe       	sbrs	r11, 6
    6a20:	0b c0       	rjmp	.+22     	; 0x6a38 <vfprintf+0x2be>
    6a22:	2e ef       	ldi	r18, 0xFE	; 254
    6a24:	b2 22       	and	r11, r18
    6a26:	7e 14       	cp	r7, r14
    6a28:	38 f4       	brcc	.+14     	; 0x6a38 <vfprintf+0x2be>
    6a2a:	b4 fe       	sbrs	r11, 4
    6a2c:	07 c0       	rjmp	.+14     	; 0x6a3c <vfprintf+0x2c2>
    6a2e:	b2 fc       	sbrc	r11, 2
    6a30:	05 c0       	rjmp	.+10     	; 0x6a3c <vfprintf+0x2c2>
    6a32:	8f ee       	ldi	r24, 0xEF	; 239
    6a34:	b8 22       	and	r11, r24
    6a36:	02 c0       	rjmp	.+4      	; 0x6a3c <vfprintf+0x2c2>
    6a38:	a7 2c       	mov	r10, r7
    6a3a:	01 c0       	rjmp	.+2      	; 0x6a3e <vfprintf+0x2c4>
    6a3c:	ae 2c       	mov	r10, r14
    6a3e:	8b 2d       	mov	r24, r11
    6a40:	90 e0       	ldi	r25, 0x00	; 0
    6a42:	b4 fe       	sbrs	r11, 4
    6a44:	0d c0       	rjmp	.+26     	; 0x6a60 <vfprintf+0x2e6>
    6a46:	fe 01       	movw	r30, r28
    6a48:	e7 0d       	add	r30, r7
    6a4a:	f1 1d       	adc	r31, r1
    6a4c:	20 81       	ld	r18, Z
    6a4e:	20 33       	cpi	r18, 0x30	; 48
    6a50:	19 f4       	brne	.+6      	; 0x6a58 <vfprintf+0x2de>
    6a52:	e9 ee       	ldi	r30, 0xE9	; 233
    6a54:	be 22       	and	r11, r30
    6a56:	09 c0       	rjmp	.+18     	; 0x6a6a <vfprintf+0x2f0>
    6a58:	a3 94       	inc	r10
    6a5a:	b2 fe       	sbrs	r11, 2
    6a5c:	06 c0       	rjmp	.+12     	; 0x6a6a <vfprintf+0x2f0>
    6a5e:	04 c0       	rjmp	.+8      	; 0x6a68 <vfprintf+0x2ee>
    6a60:	86 78       	andi	r24, 0x86	; 134
    6a62:	90 70       	andi	r25, 0x00	; 0
    6a64:	00 97       	sbiw	r24, 0x00	; 0
    6a66:	09 f0       	breq	.+2      	; 0x6a6a <vfprintf+0x2f0>
    6a68:	a3 94       	inc	r10
    6a6a:	8b 2c       	mov	r8, r11
    6a6c:	99 24       	eor	r9, r9
    6a6e:	b3 fc       	sbrc	r11, 3
    6a70:	13 c0       	rjmp	.+38     	; 0x6a98 <vfprintf+0x31e>
    6a72:	b0 fe       	sbrs	r11, 0
    6a74:	0e c0       	rjmp	.+28     	; 0x6a92 <vfprintf+0x318>
    6a76:	af 14       	cp	r10, r15
    6a78:	28 f4       	brcc	.+10     	; 0x6a84 <vfprintf+0x30a>
    6a7a:	e7 2c       	mov	r14, r7
    6a7c:	ef 0c       	add	r14, r15
    6a7e:	ea 18       	sub	r14, r10
    6a80:	af 2c       	mov	r10, r15
    6a82:	07 c0       	rjmp	.+14     	; 0x6a92 <vfprintf+0x318>
    6a84:	e7 2c       	mov	r14, r7
    6a86:	05 c0       	rjmp	.+10     	; 0x6a92 <vfprintf+0x318>
    6a88:	80 e2       	ldi	r24, 0x20	; 32
    6a8a:	90 e0       	ldi	r25, 0x00	; 0
    6a8c:	b6 01       	movw	r22, r12
    6a8e:	63 d0       	rcall	.+198    	; 0x6b56 <fputc>
    6a90:	a3 94       	inc	r10
    6a92:	af 14       	cp	r10, r15
    6a94:	c8 f3       	brcs	.-14     	; 0x6a88 <vfprintf+0x30e>
    6a96:	04 c0       	rjmp	.+8      	; 0x6aa0 <vfprintf+0x326>
    6a98:	af 14       	cp	r10, r15
    6a9a:	10 f4       	brcc	.+4      	; 0x6aa0 <vfprintf+0x326>
    6a9c:	fa 18       	sub	r15, r10
    6a9e:	01 c0       	rjmp	.+2      	; 0x6aa2 <vfprintf+0x328>
    6aa0:	ff 24       	eor	r15, r15
    6aa2:	84 fe       	sbrs	r8, 4
    6aa4:	0e c0       	rjmp	.+28     	; 0x6ac2 <vfprintf+0x348>
    6aa6:	80 e3       	ldi	r24, 0x30	; 48
    6aa8:	90 e0       	ldi	r25, 0x00	; 0
    6aaa:	b6 01       	movw	r22, r12
    6aac:	54 d0       	rcall	.+168    	; 0x6b56 <fputc>
    6aae:	82 fe       	sbrs	r8, 2
    6ab0:	1d c0       	rjmp	.+58     	; 0x6aec <vfprintf+0x372>
    6ab2:	81 fe       	sbrs	r8, 1
    6ab4:	03 c0       	rjmp	.+6      	; 0x6abc <vfprintf+0x342>
    6ab6:	88 e5       	ldi	r24, 0x58	; 88
    6ab8:	90 e0       	ldi	r25, 0x00	; 0
    6aba:	10 c0       	rjmp	.+32     	; 0x6adc <vfprintf+0x362>
    6abc:	88 e7       	ldi	r24, 0x78	; 120
    6abe:	90 e0       	ldi	r25, 0x00	; 0
    6ac0:	0d c0       	rjmp	.+26     	; 0x6adc <vfprintf+0x362>
    6ac2:	c4 01       	movw	r24, r8
    6ac4:	86 78       	andi	r24, 0x86	; 134
    6ac6:	90 70       	andi	r25, 0x00	; 0
    6ac8:	00 97       	sbiw	r24, 0x00	; 0
    6aca:	81 f0       	breq	.+32     	; 0x6aec <vfprintf+0x372>
    6acc:	81 fc       	sbrc	r8, 1
    6ace:	02 c0       	rjmp	.+4      	; 0x6ad4 <vfprintf+0x35a>
    6ad0:	80 e2       	ldi	r24, 0x20	; 32
    6ad2:	01 c0       	rjmp	.+2      	; 0x6ad6 <vfprintf+0x35c>
    6ad4:	8b e2       	ldi	r24, 0x2B	; 43
    6ad6:	b7 fc       	sbrc	r11, 7
    6ad8:	8d e2       	ldi	r24, 0x2D	; 45
    6ada:	90 e0       	ldi	r25, 0x00	; 0
    6adc:	b6 01       	movw	r22, r12
    6ade:	3b d0       	rcall	.+118    	; 0x6b56 <fputc>
    6ae0:	05 c0       	rjmp	.+10     	; 0x6aec <vfprintf+0x372>
    6ae2:	80 e3       	ldi	r24, 0x30	; 48
    6ae4:	90 e0       	ldi	r25, 0x00	; 0
    6ae6:	b6 01       	movw	r22, r12
    6ae8:	36 d0       	rcall	.+108    	; 0x6b56 <fputc>
    6aea:	ea 94       	dec	r14
    6aec:	7e 14       	cp	r7, r14
    6aee:	c8 f3       	brcs	.-14     	; 0x6ae2 <vfprintf+0x368>
    6af0:	7a 94       	dec	r7
    6af2:	f2 01       	movw	r30, r4
    6af4:	e7 0d       	add	r30, r7
    6af6:	f1 1d       	adc	r31, r1
    6af8:	80 81       	ld	r24, Z
    6afa:	90 e0       	ldi	r25, 0x00	; 0
    6afc:	b6 01       	movw	r22, r12
    6afe:	2b d0       	rcall	.+86     	; 0x6b56 <fputc>
    6b00:	77 20       	and	r7, r7
    6b02:	b1 f7       	brne	.-20     	; 0x6af0 <vfprintf+0x376>
    6b04:	05 c0       	rjmp	.+10     	; 0x6b10 <vfprintf+0x396>
    6b06:	80 e2       	ldi	r24, 0x20	; 32
    6b08:	90 e0       	ldi	r25, 0x00	; 0
    6b0a:	b6 01       	movw	r22, r12
    6b0c:	24 d0       	rcall	.+72     	; 0x6b56 <fputc>
    6b0e:	fa 94       	dec	r15
    6b10:	ff 20       	and	r15, r15
    6b12:	c9 f7       	brne	.-14     	; 0x6b06 <vfprintf+0x38c>
    6b14:	44 ce       	rjmp	.-888    	; 0x679e <vfprintf+0x24>
    6b16:	f6 01       	movw	r30, r12
    6b18:	26 81       	ldd	r18, Z+6	; 0x06
    6b1a:	37 81       	ldd	r19, Z+7	; 0x07
    6b1c:	02 c0       	rjmp	.+4      	; 0x6b22 <vfprintf+0x3a8>
    6b1e:	2f ef       	ldi	r18, 0xFF	; 255
    6b20:	3f ef       	ldi	r19, 0xFF	; 255
    6b22:	c9 01       	movw	r24, r18
    6b24:	2c 96       	adiw	r28, 0x0c	; 12
    6b26:	e2 e1       	ldi	r30, 0x12	; 18
    6b28:	3b cd       	rjmp	.-1418   	; 0x65a0 <__epilogue_restores__>

00006b2a <strnlen_P>:
    6b2a:	fc 01       	movw	r30, r24
    6b2c:	05 90       	lpm	r0, Z+
    6b2e:	61 50       	subi	r22, 0x01	; 1
    6b30:	70 40       	sbci	r23, 0x00	; 0
    6b32:	01 10       	cpse	r0, r1
    6b34:	d8 f7       	brcc	.-10     	; 0x6b2c <strnlen_P+0x2>
    6b36:	80 95       	com	r24
    6b38:	90 95       	com	r25
    6b3a:	8e 0f       	add	r24, r30
    6b3c:	9f 1f       	adc	r25, r31
    6b3e:	08 95       	ret

00006b40 <strnlen>:
    6b40:	fc 01       	movw	r30, r24
    6b42:	61 50       	subi	r22, 0x01	; 1
    6b44:	70 40       	sbci	r23, 0x00	; 0
    6b46:	01 90       	ld	r0, Z+
    6b48:	01 10       	cpse	r0, r1
    6b4a:	d8 f7       	brcc	.-10     	; 0x6b42 <strnlen+0x2>
    6b4c:	80 95       	com	r24
    6b4e:	90 95       	com	r25
    6b50:	8e 0f       	add	r24, r30
    6b52:	9f 1f       	adc	r25, r31
    6b54:	08 95       	ret

00006b56 <fputc>:
    6b56:	0f 93       	push	r16
    6b58:	1f 93       	push	r17
    6b5a:	cf 93       	push	r28
    6b5c:	df 93       	push	r29
    6b5e:	8c 01       	movw	r16, r24
    6b60:	eb 01       	movw	r28, r22
    6b62:	8b 81       	ldd	r24, Y+3	; 0x03
    6b64:	81 ff       	sbrs	r24, 1
    6b66:	1b c0       	rjmp	.+54     	; 0x6b9e <fputc+0x48>
    6b68:	82 ff       	sbrs	r24, 2
    6b6a:	0d c0       	rjmp	.+26     	; 0x6b86 <fputc+0x30>
    6b6c:	2e 81       	ldd	r18, Y+6	; 0x06
    6b6e:	3f 81       	ldd	r19, Y+7	; 0x07
    6b70:	8c 81       	ldd	r24, Y+4	; 0x04
    6b72:	9d 81       	ldd	r25, Y+5	; 0x05
    6b74:	28 17       	cp	r18, r24
    6b76:	39 07       	cpc	r19, r25
    6b78:	64 f4       	brge	.+24     	; 0x6b92 <fputc+0x3c>
    6b7a:	e8 81       	ld	r30, Y
    6b7c:	f9 81       	ldd	r31, Y+1	; 0x01
    6b7e:	01 93       	st	Z+, r16
    6b80:	f9 83       	std	Y+1, r31	; 0x01
    6b82:	e8 83       	st	Y, r30
    6b84:	06 c0       	rjmp	.+12     	; 0x6b92 <fputc+0x3c>
    6b86:	e8 85       	ldd	r30, Y+8	; 0x08
    6b88:	f9 85       	ldd	r31, Y+9	; 0x09
    6b8a:	80 2f       	mov	r24, r16
    6b8c:	09 95       	icall
    6b8e:	00 97       	sbiw	r24, 0x00	; 0
    6b90:	31 f4       	brne	.+12     	; 0x6b9e <fputc+0x48>
    6b92:	8e 81       	ldd	r24, Y+6	; 0x06
    6b94:	9f 81       	ldd	r25, Y+7	; 0x07
    6b96:	01 96       	adiw	r24, 0x01	; 1
    6b98:	9f 83       	std	Y+7, r25	; 0x07
    6b9a:	8e 83       	std	Y+6, r24	; 0x06
    6b9c:	02 c0       	rjmp	.+4      	; 0x6ba2 <fputc+0x4c>
    6b9e:	0f ef       	ldi	r16, 0xFF	; 255
    6ba0:	1f ef       	ldi	r17, 0xFF	; 255
    6ba2:	c8 01       	movw	r24, r16
    6ba4:	df 91       	pop	r29
    6ba6:	cf 91       	pop	r28
    6ba8:	1f 91       	pop	r17
    6baa:	0f 91       	pop	r16
    6bac:	08 95       	ret

00006bae <__ultoa_invert>:
    6bae:	fa 01       	movw	r30, r20
    6bb0:	aa 27       	eor	r26, r26
    6bb2:	28 30       	cpi	r18, 0x08	; 8
    6bb4:	51 f1       	breq	.+84     	; 0x6c0a <__ultoa_invert+0x5c>
    6bb6:	20 31       	cpi	r18, 0x10	; 16
    6bb8:	81 f1       	breq	.+96     	; 0x6c1a <__ultoa_invert+0x6c>
    6bba:	e8 94       	clt
    6bbc:	6f 93       	push	r22
    6bbe:	6e 7f       	andi	r22, 0xFE	; 254
    6bc0:	6e 5f       	subi	r22, 0xFE	; 254
    6bc2:	7f 4f       	sbci	r23, 0xFF	; 255
    6bc4:	8f 4f       	sbci	r24, 0xFF	; 255
    6bc6:	9f 4f       	sbci	r25, 0xFF	; 255
    6bc8:	af 4f       	sbci	r26, 0xFF	; 255
    6bca:	b1 e0       	ldi	r27, 0x01	; 1
    6bcc:	3e d0       	rcall	.+124    	; 0x6c4a <__ultoa_invert+0x9c>
    6bce:	b4 e0       	ldi	r27, 0x04	; 4
    6bd0:	3c d0       	rcall	.+120    	; 0x6c4a <__ultoa_invert+0x9c>
    6bd2:	67 0f       	add	r22, r23
    6bd4:	78 1f       	adc	r23, r24
    6bd6:	89 1f       	adc	r24, r25
    6bd8:	9a 1f       	adc	r25, r26
    6bda:	a1 1d       	adc	r26, r1
    6bdc:	68 0f       	add	r22, r24
    6bde:	79 1f       	adc	r23, r25
    6be0:	8a 1f       	adc	r24, r26
    6be2:	91 1d       	adc	r25, r1
    6be4:	a1 1d       	adc	r26, r1
    6be6:	6a 0f       	add	r22, r26
    6be8:	71 1d       	adc	r23, r1
    6bea:	81 1d       	adc	r24, r1
    6bec:	91 1d       	adc	r25, r1
    6bee:	a1 1d       	adc	r26, r1
    6bf0:	20 d0       	rcall	.+64     	; 0x6c32 <__ultoa_invert+0x84>
    6bf2:	09 f4       	brne	.+2      	; 0x6bf6 <__ultoa_invert+0x48>
    6bf4:	68 94       	set
    6bf6:	3f 91       	pop	r19
    6bf8:	2a e0       	ldi	r18, 0x0A	; 10
    6bfa:	26 9f       	mul	r18, r22
    6bfc:	11 24       	eor	r1, r1
    6bfe:	30 19       	sub	r19, r0
    6c00:	30 5d       	subi	r19, 0xD0	; 208
    6c02:	31 93       	st	Z+, r19
    6c04:	de f6       	brtc	.-74     	; 0x6bbc <__ultoa_invert+0xe>
    6c06:	cf 01       	movw	r24, r30
    6c08:	08 95       	ret
    6c0a:	46 2f       	mov	r20, r22
    6c0c:	47 70       	andi	r20, 0x07	; 7
    6c0e:	40 5d       	subi	r20, 0xD0	; 208
    6c10:	41 93       	st	Z+, r20
    6c12:	b3 e0       	ldi	r27, 0x03	; 3
    6c14:	0f d0       	rcall	.+30     	; 0x6c34 <__ultoa_invert+0x86>
    6c16:	c9 f7       	brne	.-14     	; 0x6c0a <__ultoa_invert+0x5c>
    6c18:	f6 cf       	rjmp	.-20     	; 0x6c06 <__ultoa_invert+0x58>
    6c1a:	46 2f       	mov	r20, r22
    6c1c:	4f 70       	andi	r20, 0x0F	; 15
    6c1e:	40 5d       	subi	r20, 0xD0	; 208
    6c20:	4a 33       	cpi	r20, 0x3A	; 58
    6c22:	18 f0       	brcs	.+6      	; 0x6c2a <__ultoa_invert+0x7c>
    6c24:	49 5d       	subi	r20, 0xD9	; 217
    6c26:	31 fd       	sbrc	r19, 1
    6c28:	40 52       	subi	r20, 0x20	; 32
    6c2a:	41 93       	st	Z+, r20
    6c2c:	02 d0       	rcall	.+4      	; 0x6c32 <__ultoa_invert+0x84>
    6c2e:	a9 f7       	brne	.-22     	; 0x6c1a <__ultoa_invert+0x6c>
    6c30:	ea cf       	rjmp	.-44     	; 0x6c06 <__ultoa_invert+0x58>
    6c32:	b4 e0       	ldi	r27, 0x04	; 4
    6c34:	a6 95       	lsr	r26
    6c36:	97 95       	ror	r25
    6c38:	87 95       	ror	r24
    6c3a:	77 95       	ror	r23
    6c3c:	67 95       	ror	r22
    6c3e:	ba 95       	dec	r27
    6c40:	c9 f7       	brne	.-14     	; 0x6c34 <__ultoa_invert+0x86>
    6c42:	00 97       	sbiw	r24, 0x00	; 0
    6c44:	61 05       	cpc	r22, r1
    6c46:	71 05       	cpc	r23, r1
    6c48:	08 95       	ret
    6c4a:	9b 01       	movw	r18, r22
    6c4c:	ac 01       	movw	r20, r24
    6c4e:	0a 2e       	mov	r0, r26
    6c50:	06 94       	lsr	r0
    6c52:	57 95       	ror	r21
    6c54:	47 95       	ror	r20
    6c56:	37 95       	ror	r19
    6c58:	27 95       	ror	r18
    6c5a:	ba 95       	dec	r27
    6c5c:	c9 f7       	brne	.-14     	; 0x6c50 <__ultoa_invert+0xa2>
    6c5e:	62 0f       	add	r22, r18
    6c60:	73 1f       	adc	r23, r19
    6c62:	84 1f       	adc	r24, r20
    6c64:	95 1f       	adc	r25, r21
    6c66:	a0 1d       	adc	r26, r0
    6c68:	08 95       	ret

00006c6a <_exit>:
    6c6a:	f8 94       	cli

00006c6c <__stop_program>:
    6c6c:	ff cf       	rjmp	.-2      	; 0x6c6c <__stop_program>
